
cameraProjectov7670.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009110  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  080091d0  080091d0  000191d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009614  08009614  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08009614  08009614  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009614  08009614  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009614  08009614  00019614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009618  08009618  00019618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800961c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000554  200001d4  080097f0  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000728  080097f0  00020728  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010b8b  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024e2  00000000  00000000  00030dca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc8  00000000  00000000  000332b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c6d  00000000  00000000  00034278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001232e  00000000  00000000  00034ee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013ea5  00000000  00000000  00047213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006932e  00000000  00000000  0005b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000048dc  00000000  00000000  000c43e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000c8cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080091b8 	.word	0x080091b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	080091b8 	.word	0x080091b8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ff29 	bl	8001294 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fe79 	bl	8001144 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff1b 	bl	8001294 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff11 	bl	8001294 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fea1 	bl	80011c8 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fe97 	bl	80011c8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	464f      	mov	r7, r9
 80004ac:	4646      	mov	r6, r8
 80004ae:	46d6      	mov	lr, sl
 80004b0:	0004      	movs	r4, r0
 80004b2:	b5c0      	push	{r6, r7, lr}
 80004b4:	001f      	movs	r7, r3
 80004b6:	030b      	lsls	r3, r1, #12
 80004b8:	0010      	movs	r0, r2
 80004ba:	004e      	lsls	r6, r1, #1
 80004bc:	0a5b      	lsrs	r3, r3, #9
 80004be:	0fcd      	lsrs	r5, r1, #31
 80004c0:	0f61      	lsrs	r1, r4, #29
 80004c2:	007a      	lsls	r2, r7, #1
 80004c4:	4319      	orrs	r1, r3
 80004c6:	00e3      	lsls	r3, r4, #3
 80004c8:	033c      	lsls	r4, r7, #12
 80004ca:	0fff      	lsrs	r7, r7, #31
 80004cc:	46bc      	mov	ip, r7
 80004ce:	0a64      	lsrs	r4, r4, #9
 80004d0:	0f47      	lsrs	r7, r0, #29
 80004d2:	4327      	orrs	r7, r4
 80004d4:	0d76      	lsrs	r6, r6, #21
 80004d6:	0d52      	lsrs	r2, r2, #21
 80004d8:	00c0      	lsls	r0, r0, #3
 80004da:	46b9      	mov	r9, r7
 80004dc:	4680      	mov	r8, r0
 80004de:	1ab7      	subs	r7, r6, r2
 80004e0:	4565      	cmp	r5, ip
 80004e2:	d100      	bne.n	80004e6 <__aeabi_dadd+0x3e>
 80004e4:	e09b      	b.n	800061e <__aeabi_dadd+0x176>
 80004e6:	2f00      	cmp	r7, #0
 80004e8:	dc00      	bgt.n	80004ec <__aeabi_dadd+0x44>
 80004ea:	e084      	b.n	80005f6 <__aeabi_dadd+0x14e>
 80004ec:	2a00      	cmp	r2, #0
 80004ee:	d100      	bne.n	80004f2 <__aeabi_dadd+0x4a>
 80004f0:	e0be      	b.n	8000670 <__aeabi_dadd+0x1c8>
 80004f2:	4ac8      	ldr	r2, [pc, #800]	; (8000814 <__aeabi_dadd+0x36c>)
 80004f4:	4296      	cmp	r6, r2
 80004f6:	d100      	bne.n	80004fa <__aeabi_dadd+0x52>
 80004f8:	e124      	b.n	8000744 <__aeabi_dadd+0x29c>
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	464c      	mov	r4, r9
 80004fe:	0412      	lsls	r2, r2, #16
 8000500:	4314      	orrs	r4, r2
 8000502:	46a1      	mov	r9, r4
 8000504:	2f38      	cmp	r7, #56	; 0x38
 8000506:	dd00      	ble.n	800050a <__aeabi_dadd+0x62>
 8000508:	e167      	b.n	80007da <__aeabi_dadd+0x332>
 800050a:	2f1f      	cmp	r7, #31
 800050c:	dd00      	ble.n	8000510 <__aeabi_dadd+0x68>
 800050e:	e1d6      	b.n	80008be <__aeabi_dadd+0x416>
 8000510:	2220      	movs	r2, #32
 8000512:	464c      	mov	r4, r9
 8000514:	1bd2      	subs	r2, r2, r7
 8000516:	4094      	lsls	r4, r2
 8000518:	46a2      	mov	sl, r4
 800051a:	4644      	mov	r4, r8
 800051c:	40fc      	lsrs	r4, r7
 800051e:	0020      	movs	r0, r4
 8000520:	4654      	mov	r4, sl
 8000522:	4304      	orrs	r4, r0
 8000524:	4640      	mov	r0, r8
 8000526:	4090      	lsls	r0, r2
 8000528:	1e42      	subs	r2, r0, #1
 800052a:	4190      	sbcs	r0, r2
 800052c:	464a      	mov	r2, r9
 800052e:	40fa      	lsrs	r2, r7
 8000530:	4304      	orrs	r4, r0
 8000532:	1a89      	subs	r1, r1, r2
 8000534:	1b1c      	subs	r4, r3, r4
 8000536:	42a3      	cmp	r3, r4
 8000538:	4192      	sbcs	r2, r2
 800053a:	4252      	negs	r2, r2
 800053c:	1a8b      	subs	r3, r1, r2
 800053e:	469a      	mov	sl, r3
 8000540:	4653      	mov	r3, sl
 8000542:	021b      	lsls	r3, r3, #8
 8000544:	d400      	bmi.n	8000548 <__aeabi_dadd+0xa0>
 8000546:	e0d4      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000548:	4653      	mov	r3, sl
 800054a:	025a      	lsls	r2, r3, #9
 800054c:	0a53      	lsrs	r3, r2, #9
 800054e:	469a      	mov	sl, r3
 8000550:	4653      	mov	r3, sl
 8000552:	2b00      	cmp	r3, #0
 8000554:	d100      	bne.n	8000558 <__aeabi_dadd+0xb0>
 8000556:	e104      	b.n	8000762 <__aeabi_dadd+0x2ba>
 8000558:	4650      	mov	r0, sl
 800055a:	f001 fded 	bl	8002138 <__clzsi2>
 800055e:	0003      	movs	r3, r0
 8000560:	3b08      	subs	r3, #8
 8000562:	2220      	movs	r2, #32
 8000564:	0020      	movs	r0, r4
 8000566:	1ad2      	subs	r2, r2, r3
 8000568:	4651      	mov	r1, sl
 800056a:	40d0      	lsrs	r0, r2
 800056c:	4099      	lsls	r1, r3
 800056e:	0002      	movs	r2, r0
 8000570:	409c      	lsls	r4, r3
 8000572:	430a      	orrs	r2, r1
 8000574:	42b3      	cmp	r3, r6
 8000576:	da00      	bge.n	800057a <__aeabi_dadd+0xd2>
 8000578:	e102      	b.n	8000780 <__aeabi_dadd+0x2d8>
 800057a:	1b9b      	subs	r3, r3, r6
 800057c:	1c59      	adds	r1, r3, #1
 800057e:	291f      	cmp	r1, #31
 8000580:	dd00      	ble.n	8000584 <__aeabi_dadd+0xdc>
 8000582:	e0a7      	b.n	80006d4 <__aeabi_dadd+0x22c>
 8000584:	2320      	movs	r3, #32
 8000586:	0010      	movs	r0, r2
 8000588:	0026      	movs	r6, r4
 800058a:	1a5b      	subs	r3, r3, r1
 800058c:	409c      	lsls	r4, r3
 800058e:	4098      	lsls	r0, r3
 8000590:	40ce      	lsrs	r6, r1
 8000592:	40ca      	lsrs	r2, r1
 8000594:	1e63      	subs	r3, r4, #1
 8000596:	419c      	sbcs	r4, r3
 8000598:	4330      	orrs	r0, r6
 800059a:	4692      	mov	sl, r2
 800059c:	2600      	movs	r6, #0
 800059e:	4304      	orrs	r4, r0
 80005a0:	0763      	lsls	r3, r4, #29
 80005a2:	d009      	beq.n	80005b8 <__aeabi_dadd+0x110>
 80005a4:	230f      	movs	r3, #15
 80005a6:	4023      	ands	r3, r4
 80005a8:	2b04      	cmp	r3, #4
 80005aa:	d005      	beq.n	80005b8 <__aeabi_dadd+0x110>
 80005ac:	1d23      	adds	r3, r4, #4
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	41a4      	sbcs	r4, r4
 80005b2:	4264      	negs	r4, r4
 80005b4:	44a2      	add	sl, r4
 80005b6:	001c      	movs	r4, r3
 80005b8:	4653      	mov	r3, sl
 80005ba:	021b      	lsls	r3, r3, #8
 80005bc:	d400      	bmi.n	80005c0 <__aeabi_dadd+0x118>
 80005be:	e09b      	b.n	80006f8 <__aeabi_dadd+0x250>
 80005c0:	4b94      	ldr	r3, [pc, #592]	; (8000814 <__aeabi_dadd+0x36c>)
 80005c2:	3601      	adds	r6, #1
 80005c4:	429e      	cmp	r6, r3
 80005c6:	d100      	bne.n	80005ca <__aeabi_dadd+0x122>
 80005c8:	e0b8      	b.n	800073c <__aeabi_dadd+0x294>
 80005ca:	4653      	mov	r3, sl
 80005cc:	4992      	ldr	r1, [pc, #584]	; (8000818 <__aeabi_dadd+0x370>)
 80005ce:	08e4      	lsrs	r4, r4, #3
 80005d0:	400b      	ands	r3, r1
 80005d2:	0019      	movs	r1, r3
 80005d4:	075b      	lsls	r3, r3, #29
 80005d6:	4323      	orrs	r3, r4
 80005d8:	0572      	lsls	r2, r6, #21
 80005da:	024c      	lsls	r4, r1, #9
 80005dc:	0b24      	lsrs	r4, r4, #12
 80005de:	0d52      	lsrs	r2, r2, #21
 80005e0:	0512      	lsls	r2, r2, #20
 80005e2:	07ed      	lsls	r5, r5, #31
 80005e4:	4322      	orrs	r2, r4
 80005e6:	432a      	orrs	r2, r5
 80005e8:	0018      	movs	r0, r3
 80005ea:	0011      	movs	r1, r2
 80005ec:	bce0      	pop	{r5, r6, r7}
 80005ee:	46ba      	mov	sl, r7
 80005f0:	46b1      	mov	r9, r6
 80005f2:	46a8      	mov	r8, r5
 80005f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f6:	2f00      	cmp	r7, #0
 80005f8:	d048      	beq.n	800068c <__aeabi_dadd+0x1e4>
 80005fa:	1b97      	subs	r7, r2, r6
 80005fc:	2e00      	cmp	r6, #0
 80005fe:	d000      	beq.n	8000602 <__aeabi_dadd+0x15a>
 8000600:	e10e      	b.n	8000820 <__aeabi_dadd+0x378>
 8000602:	000c      	movs	r4, r1
 8000604:	431c      	orrs	r4, r3
 8000606:	d100      	bne.n	800060a <__aeabi_dadd+0x162>
 8000608:	e1b7      	b.n	800097a <__aeabi_dadd+0x4d2>
 800060a:	1e7c      	subs	r4, r7, #1
 800060c:	2f01      	cmp	r7, #1
 800060e:	d100      	bne.n	8000612 <__aeabi_dadd+0x16a>
 8000610:	e226      	b.n	8000a60 <__aeabi_dadd+0x5b8>
 8000612:	4d80      	ldr	r5, [pc, #512]	; (8000814 <__aeabi_dadd+0x36c>)
 8000614:	42af      	cmp	r7, r5
 8000616:	d100      	bne.n	800061a <__aeabi_dadd+0x172>
 8000618:	e1d5      	b.n	80009c6 <__aeabi_dadd+0x51e>
 800061a:	0027      	movs	r7, r4
 800061c:	e107      	b.n	800082e <__aeabi_dadd+0x386>
 800061e:	2f00      	cmp	r7, #0
 8000620:	dc00      	bgt.n	8000624 <__aeabi_dadd+0x17c>
 8000622:	e0b2      	b.n	800078a <__aeabi_dadd+0x2e2>
 8000624:	2a00      	cmp	r2, #0
 8000626:	d047      	beq.n	80006b8 <__aeabi_dadd+0x210>
 8000628:	4a7a      	ldr	r2, [pc, #488]	; (8000814 <__aeabi_dadd+0x36c>)
 800062a:	4296      	cmp	r6, r2
 800062c:	d100      	bne.n	8000630 <__aeabi_dadd+0x188>
 800062e:	e089      	b.n	8000744 <__aeabi_dadd+0x29c>
 8000630:	2280      	movs	r2, #128	; 0x80
 8000632:	464c      	mov	r4, r9
 8000634:	0412      	lsls	r2, r2, #16
 8000636:	4314      	orrs	r4, r2
 8000638:	46a1      	mov	r9, r4
 800063a:	2f38      	cmp	r7, #56	; 0x38
 800063c:	dc6b      	bgt.n	8000716 <__aeabi_dadd+0x26e>
 800063e:	2f1f      	cmp	r7, #31
 8000640:	dc00      	bgt.n	8000644 <__aeabi_dadd+0x19c>
 8000642:	e16e      	b.n	8000922 <__aeabi_dadd+0x47a>
 8000644:	003a      	movs	r2, r7
 8000646:	4648      	mov	r0, r9
 8000648:	3a20      	subs	r2, #32
 800064a:	40d0      	lsrs	r0, r2
 800064c:	4684      	mov	ip, r0
 800064e:	2f20      	cmp	r7, #32
 8000650:	d007      	beq.n	8000662 <__aeabi_dadd+0x1ba>
 8000652:	2240      	movs	r2, #64	; 0x40
 8000654:	4648      	mov	r0, r9
 8000656:	1bd2      	subs	r2, r2, r7
 8000658:	4090      	lsls	r0, r2
 800065a:	0002      	movs	r2, r0
 800065c:	4640      	mov	r0, r8
 800065e:	4310      	orrs	r0, r2
 8000660:	4680      	mov	r8, r0
 8000662:	4640      	mov	r0, r8
 8000664:	1e42      	subs	r2, r0, #1
 8000666:	4190      	sbcs	r0, r2
 8000668:	4662      	mov	r2, ip
 800066a:	0004      	movs	r4, r0
 800066c:	4314      	orrs	r4, r2
 800066e:	e057      	b.n	8000720 <__aeabi_dadd+0x278>
 8000670:	464a      	mov	r2, r9
 8000672:	4302      	orrs	r2, r0
 8000674:	d100      	bne.n	8000678 <__aeabi_dadd+0x1d0>
 8000676:	e103      	b.n	8000880 <__aeabi_dadd+0x3d8>
 8000678:	1e7a      	subs	r2, r7, #1
 800067a:	2f01      	cmp	r7, #1
 800067c:	d100      	bne.n	8000680 <__aeabi_dadd+0x1d8>
 800067e:	e193      	b.n	80009a8 <__aeabi_dadd+0x500>
 8000680:	4c64      	ldr	r4, [pc, #400]	; (8000814 <__aeabi_dadd+0x36c>)
 8000682:	42a7      	cmp	r7, r4
 8000684:	d100      	bne.n	8000688 <__aeabi_dadd+0x1e0>
 8000686:	e18a      	b.n	800099e <__aeabi_dadd+0x4f6>
 8000688:	0017      	movs	r7, r2
 800068a:	e73b      	b.n	8000504 <__aeabi_dadd+0x5c>
 800068c:	4c63      	ldr	r4, [pc, #396]	; (800081c <__aeabi_dadd+0x374>)
 800068e:	1c72      	adds	r2, r6, #1
 8000690:	4222      	tst	r2, r4
 8000692:	d000      	beq.n	8000696 <__aeabi_dadd+0x1ee>
 8000694:	e0e0      	b.n	8000858 <__aeabi_dadd+0x3b0>
 8000696:	000a      	movs	r2, r1
 8000698:	431a      	orrs	r2, r3
 800069a:	2e00      	cmp	r6, #0
 800069c:	d000      	beq.n	80006a0 <__aeabi_dadd+0x1f8>
 800069e:	e174      	b.n	800098a <__aeabi_dadd+0x4e2>
 80006a0:	2a00      	cmp	r2, #0
 80006a2:	d100      	bne.n	80006a6 <__aeabi_dadd+0x1fe>
 80006a4:	e1d0      	b.n	8000a48 <__aeabi_dadd+0x5a0>
 80006a6:	464a      	mov	r2, r9
 80006a8:	4302      	orrs	r2, r0
 80006aa:	d000      	beq.n	80006ae <__aeabi_dadd+0x206>
 80006ac:	e1e3      	b.n	8000a76 <__aeabi_dadd+0x5ce>
 80006ae:	074a      	lsls	r2, r1, #29
 80006b0:	08db      	lsrs	r3, r3, #3
 80006b2:	4313      	orrs	r3, r2
 80006b4:	08c9      	lsrs	r1, r1, #3
 80006b6:	e029      	b.n	800070c <__aeabi_dadd+0x264>
 80006b8:	464a      	mov	r2, r9
 80006ba:	4302      	orrs	r2, r0
 80006bc:	d100      	bne.n	80006c0 <__aeabi_dadd+0x218>
 80006be:	e17d      	b.n	80009bc <__aeabi_dadd+0x514>
 80006c0:	1e7a      	subs	r2, r7, #1
 80006c2:	2f01      	cmp	r7, #1
 80006c4:	d100      	bne.n	80006c8 <__aeabi_dadd+0x220>
 80006c6:	e0e0      	b.n	800088a <__aeabi_dadd+0x3e2>
 80006c8:	4c52      	ldr	r4, [pc, #328]	; (8000814 <__aeabi_dadd+0x36c>)
 80006ca:	42a7      	cmp	r7, r4
 80006cc:	d100      	bne.n	80006d0 <__aeabi_dadd+0x228>
 80006ce:	e166      	b.n	800099e <__aeabi_dadd+0x4f6>
 80006d0:	0017      	movs	r7, r2
 80006d2:	e7b2      	b.n	800063a <__aeabi_dadd+0x192>
 80006d4:	0010      	movs	r0, r2
 80006d6:	3b1f      	subs	r3, #31
 80006d8:	40d8      	lsrs	r0, r3
 80006da:	2920      	cmp	r1, #32
 80006dc:	d003      	beq.n	80006e6 <__aeabi_dadd+0x23e>
 80006de:	2340      	movs	r3, #64	; 0x40
 80006e0:	1a5b      	subs	r3, r3, r1
 80006e2:	409a      	lsls	r2, r3
 80006e4:	4314      	orrs	r4, r2
 80006e6:	1e63      	subs	r3, r4, #1
 80006e8:	419c      	sbcs	r4, r3
 80006ea:	2300      	movs	r3, #0
 80006ec:	2600      	movs	r6, #0
 80006ee:	469a      	mov	sl, r3
 80006f0:	4304      	orrs	r4, r0
 80006f2:	0763      	lsls	r3, r4, #29
 80006f4:	d000      	beq.n	80006f8 <__aeabi_dadd+0x250>
 80006f6:	e755      	b.n	80005a4 <__aeabi_dadd+0xfc>
 80006f8:	4652      	mov	r2, sl
 80006fa:	08e3      	lsrs	r3, r4, #3
 80006fc:	0752      	lsls	r2, r2, #29
 80006fe:	4313      	orrs	r3, r2
 8000700:	4652      	mov	r2, sl
 8000702:	0037      	movs	r7, r6
 8000704:	08d1      	lsrs	r1, r2, #3
 8000706:	4a43      	ldr	r2, [pc, #268]	; (8000814 <__aeabi_dadd+0x36c>)
 8000708:	4297      	cmp	r7, r2
 800070a:	d01f      	beq.n	800074c <__aeabi_dadd+0x2a4>
 800070c:	0309      	lsls	r1, r1, #12
 800070e:	057a      	lsls	r2, r7, #21
 8000710:	0b0c      	lsrs	r4, r1, #12
 8000712:	0d52      	lsrs	r2, r2, #21
 8000714:	e764      	b.n	80005e0 <__aeabi_dadd+0x138>
 8000716:	4642      	mov	r2, r8
 8000718:	464c      	mov	r4, r9
 800071a:	4314      	orrs	r4, r2
 800071c:	1e62      	subs	r2, r4, #1
 800071e:	4194      	sbcs	r4, r2
 8000720:	18e4      	adds	r4, r4, r3
 8000722:	429c      	cmp	r4, r3
 8000724:	4192      	sbcs	r2, r2
 8000726:	4252      	negs	r2, r2
 8000728:	4692      	mov	sl, r2
 800072a:	448a      	add	sl, r1
 800072c:	4653      	mov	r3, sl
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	d5df      	bpl.n	80006f2 <__aeabi_dadd+0x24a>
 8000732:	4b38      	ldr	r3, [pc, #224]	; (8000814 <__aeabi_dadd+0x36c>)
 8000734:	3601      	adds	r6, #1
 8000736:	429e      	cmp	r6, r3
 8000738:	d000      	beq.n	800073c <__aeabi_dadd+0x294>
 800073a:	e0b3      	b.n	80008a4 <__aeabi_dadd+0x3fc>
 800073c:	0032      	movs	r2, r6
 800073e:	2400      	movs	r4, #0
 8000740:	2300      	movs	r3, #0
 8000742:	e74d      	b.n	80005e0 <__aeabi_dadd+0x138>
 8000744:	074a      	lsls	r2, r1, #29
 8000746:	08db      	lsrs	r3, r3, #3
 8000748:	4313      	orrs	r3, r2
 800074a:	08c9      	lsrs	r1, r1, #3
 800074c:	001a      	movs	r2, r3
 800074e:	430a      	orrs	r2, r1
 8000750:	d100      	bne.n	8000754 <__aeabi_dadd+0x2ac>
 8000752:	e200      	b.n	8000b56 <__aeabi_dadd+0x6ae>
 8000754:	2480      	movs	r4, #128	; 0x80
 8000756:	0324      	lsls	r4, r4, #12
 8000758:	430c      	orrs	r4, r1
 800075a:	0324      	lsls	r4, r4, #12
 800075c:	4a2d      	ldr	r2, [pc, #180]	; (8000814 <__aeabi_dadd+0x36c>)
 800075e:	0b24      	lsrs	r4, r4, #12
 8000760:	e73e      	b.n	80005e0 <__aeabi_dadd+0x138>
 8000762:	0020      	movs	r0, r4
 8000764:	f001 fce8 	bl	8002138 <__clzsi2>
 8000768:	0003      	movs	r3, r0
 800076a:	3318      	adds	r3, #24
 800076c:	2b1f      	cmp	r3, #31
 800076e:	dc00      	bgt.n	8000772 <__aeabi_dadd+0x2ca>
 8000770:	e6f7      	b.n	8000562 <__aeabi_dadd+0xba>
 8000772:	0022      	movs	r2, r4
 8000774:	3808      	subs	r0, #8
 8000776:	4082      	lsls	r2, r0
 8000778:	2400      	movs	r4, #0
 800077a:	42b3      	cmp	r3, r6
 800077c:	db00      	blt.n	8000780 <__aeabi_dadd+0x2d8>
 800077e:	e6fc      	b.n	800057a <__aeabi_dadd+0xd2>
 8000780:	1af6      	subs	r6, r6, r3
 8000782:	4b25      	ldr	r3, [pc, #148]	; (8000818 <__aeabi_dadd+0x370>)
 8000784:	401a      	ands	r2, r3
 8000786:	4692      	mov	sl, r2
 8000788:	e70a      	b.n	80005a0 <__aeabi_dadd+0xf8>
 800078a:	2f00      	cmp	r7, #0
 800078c:	d02b      	beq.n	80007e6 <__aeabi_dadd+0x33e>
 800078e:	1b97      	subs	r7, r2, r6
 8000790:	2e00      	cmp	r6, #0
 8000792:	d100      	bne.n	8000796 <__aeabi_dadd+0x2ee>
 8000794:	e0b8      	b.n	8000908 <__aeabi_dadd+0x460>
 8000796:	4c1f      	ldr	r4, [pc, #124]	; (8000814 <__aeabi_dadd+0x36c>)
 8000798:	42a2      	cmp	r2, r4
 800079a:	d100      	bne.n	800079e <__aeabi_dadd+0x2f6>
 800079c:	e11c      	b.n	80009d8 <__aeabi_dadd+0x530>
 800079e:	2480      	movs	r4, #128	; 0x80
 80007a0:	0424      	lsls	r4, r4, #16
 80007a2:	4321      	orrs	r1, r4
 80007a4:	2f38      	cmp	r7, #56	; 0x38
 80007a6:	dd00      	ble.n	80007aa <__aeabi_dadd+0x302>
 80007a8:	e11e      	b.n	80009e8 <__aeabi_dadd+0x540>
 80007aa:	2f1f      	cmp	r7, #31
 80007ac:	dd00      	ble.n	80007b0 <__aeabi_dadd+0x308>
 80007ae:	e19e      	b.n	8000aee <__aeabi_dadd+0x646>
 80007b0:	2620      	movs	r6, #32
 80007b2:	000c      	movs	r4, r1
 80007b4:	1bf6      	subs	r6, r6, r7
 80007b6:	0018      	movs	r0, r3
 80007b8:	40b3      	lsls	r3, r6
 80007ba:	40b4      	lsls	r4, r6
 80007bc:	40f8      	lsrs	r0, r7
 80007be:	1e5e      	subs	r6, r3, #1
 80007c0:	41b3      	sbcs	r3, r6
 80007c2:	40f9      	lsrs	r1, r7
 80007c4:	4304      	orrs	r4, r0
 80007c6:	431c      	orrs	r4, r3
 80007c8:	4489      	add	r9, r1
 80007ca:	4444      	add	r4, r8
 80007cc:	4544      	cmp	r4, r8
 80007ce:	419b      	sbcs	r3, r3
 80007d0:	425b      	negs	r3, r3
 80007d2:	444b      	add	r3, r9
 80007d4:	469a      	mov	sl, r3
 80007d6:	0016      	movs	r6, r2
 80007d8:	e7a8      	b.n	800072c <__aeabi_dadd+0x284>
 80007da:	4642      	mov	r2, r8
 80007dc:	464c      	mov	r4, r9
 80007de:	4314      	orrs	r4, r2
 80007e0:	1e62      	subs	r2, r4, #1
 80007e2:	4194      	sbcs	r4, r2
 80007e4:	e6a6      	b.n	8000534 <__aeabi_dadd+0x8c>
 80007e6:	4c0d      	ldr	r4, [pc, #52]	; (800081c <__aeabi_dadd+0x374>)
 80007e8:	1c72      	adds	r2, r6, #1
 80007ea:	4222      	tst	r2, r4
 80007ec:	d000      	beq.n	80007f0 <__aeabi_dadd+0x348>
 80007ee:	e0a8      	b.n	8000942 <__aeabi_dadd+0x49a>
 80007f0:	000a      	movs	r2, r1
 80007f2:	431a      	orrs	r2, r3
 80007f4:	2e00      	cmp	r6, #0
 80007f6:	d000      	beq.n	80007fa <__aeabi_dadd+0x352>
 80007f8:	e10a      	b.n	8000a10 <__aeabi_dadd+0x568>
 80007fa:	2a00      	cmp	r2, #0
 80007fc:	d100      	bne.n	8000800 <__aeabi_dadd+0x358>
 80007fe:	e15e      	b.n	8000abe <__aeabi_dadd+0x616>
 8000800:	464a      	mov	r2, r9
 8000802:	4302      	orrs	r2, r0
 8000804:	d000      	beq.n	8000808 <__aeabi_dadd+0x360>
 8000806:	e161      	b.n	8000acc <__aeabi_dadd+0x624>
 8000808:	074a      	lsls	r2, r1, #29
 800080a:	08db      	lsrs	r3, r3, #3
 800080c:	4313      	orrs	r3, r2
 800080e:	08c9      	lsrs	r1, r1, #3
 8000810:	e77c      	b.n	800070c <__aeabi_dadd+0x264>
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	000007ff 	.word	0x000007ff
 8000818:	ff7fffff 	.word	0xff7fffff
 800081c:	000007fe 	.word	0x000007fe
 8000820:	4ccf      	ldr	r4, [pc, #828]	; (8000b60 <__aeabi_dadd+0x6b8>)
 8000822:	42a2      	cmp	r2, r4
 8000824:	d100      	bne.n	8000828 <__aeabi_dadd+0x380>
 8000826:	e0ce      	b.n	80009c6 <__aeabi_dadd+0x51e>
 8000828:	2480      	movs	r4, #128	; 0x80
 800082a:	0424      	lsls	r4, r4, #16
 800082c:	4321      	orrs	r1, r4
 800082e:	2f38      	cmp	r7, #56	; 0x38
 8000830:	dc5b      	bgt.n	80008ea <__aeabi_dadd+0x442>
 8000832:	2f1f      	cmp	r7, #31
 8000834:	dd00      	ble.n	8000838 <__aeabi_dadd+0x390>
 8000836:	e0dc      	b.n	80009f2 <__aeabi_dadd+0x54a>
 8000838:	2520      	movs	r5, #32
 800083a:	000c      	movs	r4, r1
 800083c:	1bed      	subs	r5, r5, r7
 800083e:	001e      	movs	r6, r3
 8000840:	40ab      	lsls	r3, r5
 8000842:	40ac      	lsls	r4, r5
 8000844:	40fe      	lsrs	r6, r7
 8000846:	1e5d      	subs	r5, r3, #1
 8000848:	41ab      	sbcs	r3, r5
 800084a:	4334      	orrs	r4, r6
 800084c:	40f9      	lsrs	r1, r7
 800084e:	431c      	orrs	r4, r3
 8000850:	464b      	mov	r3, r9
 8000852:	1a5b      	subs	r3, r3, r1
 8000854:	4699      	mov	r9, r3
 8000856:	e04c      	b.n	80008f2 <__aeabi_dadd+0x44a>
 8000858:	464a      	mov	r2, r9
 800085a:	1a1c      	subs	r4, r3, r0
 800085c:	1a88      	subs	r0, r1, r2
 800085e:	42a3      	cmp	r3, r4
 8000860:	4192      	sbcs	r2, r2
 8000862:	4252      	negs	r2, r2
 8000864:	4692      	mov	sl, r2
 8000866:	0002      	movs	r2, r0
 8000868:	4650      	mov	r0, sl
 800086a:	1a12      	subs	r2, r2, r0
 800086c:	4692      	mov	sl, r2
 800086e:	0212      	lsls	r2, r2, #8
 8000870:	d478      	bmi.n	8000964 <__aeabi_dadd+0x4bc>
 8000872:	4653      	mov	r3, sl
 8000874:	4323      	orrs	r3, r4
 8000876:	d000      	beq.n	800087a <__aeabi_dadd+0x3d2>
 8000878:	e66a      	b.n	8000550 <__aeabi_dadd+0xa8>
 800087a:	2100      	movs	r1, #0
 800087c:	2500      	movs	r5, #0
 800087e:	e745      	b.n	800070c <__aeabi_dadd+0x264>
 8000880:	074a      	lsls	r2, r1, #29
 8000882:	08db      	lsrs	r3, r3, #3
 8000884:	4313      	orrs	r3, r2
 8000886:	08c9      	lsrs	r1, r1, #3
 8000888:	e73d      	b.n	8000706 <__aeabi_dadd+0x25e>
 800088a:	181c      	adds	r4, r3, r0
 800088c:	429c      	cmp	r4, r3
 800088e:	419b      	sbcs	r3, r3
 8000890:	4449      	add	r1, r9
 8000892:	468a      	mov	sl, r1
 8000894:	425b      	negs	r3, r3
 8000896:	449a      	add	sl, r3
 8000898:	4653      	mov	r3, sl
 800089a:	2601      	movs	r6, #1
 800089c:	021b      	lsls	r3, r3, #8
 800089e:	d400      	bmi.n	80008a2 <__aeabi_dadd+0x3fa>
 80008a0:	e727      	b.n	80006f2 <__aeabi_dadd+0x24a>
 80008a2:	2602      	movs	r6, #2
 80008a4:	4652      	mov	r2, sl
 80008a6:	4baf      	ldr	r3, [pc, #700]	; (8000b64 <__aeabi_dadd+0x6bc>)
 80008a8:	2101      	movs	r1, #1
 80008aa:	401a      	ands	r2, r3
 80008ac:	0013      	movs	r3, r2
 80008ae:	4021      	ands	r1, r4
 80008b0:	0862      	lsrs	r2, r4, #1
 80008b2:	430a      	orrs	r2, r1
 80008b4:	07dc      	lsls	r4, r3, #31
 80008b6:	085b      	lsrs	r3, r3, #1
 80008b8:	469a      	mov	sl, r3
 80008ba:	4314      	orrs	r4, r2
 80008bc:	e670      	b.n	80005a0 <__aeabi_dadd+0xf8>
 80008be:	003a      	movs	r2, r7
 80008c0:	464c      	mov	r4, r9
 80008c2:	3a20      	subs	r2, #32
 80008c4:	40d4      	lsrs	r4, r2
 80008c6:	46a4      	mov	ip, r4
 80008c8:	2f20      	cmp	r7, #32
 80008ca:	d007      	beq.n	80008dc <__aeabi_dadd+0x434>
 80008cc:	2240      	movs	r2, #64	; 0x40
 80008ce:	4648      	mov	r0, r9
 80008d0:	1bd2      	subs	r2, r2, r7
 80008d2:	4090      	lsls	r0, r2
 80008d4:	0002      	movs	r2, r0
 80008d6:	4640      	mov	r0, r8
 80008d8:	4310      	orrs	r0, r2
 80008da:	4680      	mov	r8, r0
 80008dc:	4640      	mov	r0, r8
 80008de:	1e42      	subs	r2, r0, #1
 80008e0:	4190      	sbcs	r0, r2
 80008e2:	4662      	mov	r2, ip
 80008e4:	0004      	movs	r4, r0
 80008e6:	4314      	orrs	r4, r2
 80008e8:	e624      	b.n	8000534 <__aeabi_dadd+0x8c>
 80008ea:	4319      	orrs	r1, r3
 80008ec:	000c      	movs	r4, r1
 80008ee:	1e63      	subs	r3, r4, #1
 80008f0:	419c      	sbcs	r4, r3
 80008f2:	4643      	mov	r3, r8
 80008f4:	1b1c      	subs	r4, r3, r4
 80008f6:	45a0      	cmp	r8, r4
 80008f8:	419b      	sbcs	r3, r3
 80008fa:	4649      	mov	r1, r9
 80008fc:	425b      	negs	r3, r3
 80008fe:	1acb      	subs	r3, r1, r3
 8000900:	469a      	mov	sl, r3
 8000902:	4665      	mov	r5, ip
 8000904:	0016      	movs	r6, r2
 8000906:	e61b      	b.n	8000540 <__aeabi_dadd+0x98>
 8000908:	000c      	movs	r4, r1
 800090a:	431c      	orrs	r4, r3
 800090c:	d100      	bne.n	8000910 <__aeabi_dadd+0x468>
 800090e:	e0c7      	b.n	8000aa0 <__aeabi_dadd+0x5f8>
 8000910:	1e7c      	subs	r4, r7, #1
 8000912:	2f01      	cmp	r7, #1
 8000914:	d100      	bne.n	8000918 <__aeabi_dadd+0x470>
 8000916:	e0f9      	b.n	8000b0c <__aeabi_dadd+0x664>
 8000918:	4e91      	ldr	r6, [pc, #580]	; (8000b60 <__aeabi_dadd+0x6b8>)
 800091a:	42b7      	cmp	r7, r6
 800091c:	d05c      	beq.n	80009d8 <__aeabi_dadd+0x530>
 800091e:	0027      	movs	r7, r4
 8000920:	e740      	b.n	80007a4 <__aeabi_dadd+0x2fc>
 8000922:	2220      	movs	r2, #32
 8000924:	464c      	mov	r4, r9
 8000926:	4640      	mov	r0, r8
 8000928:	1bd2      	subs	r2, r2, r7
 800092a:	4094      	lsls	r4, r2
 800092c:	40f8      	lsrs	r0, r7
 800092e:	4304      	orrs	r4, r0
 8000930:	4640      	mov	r0, r8
 8000932:	4090      	lsls	r0, r2
 8000934:	1e42      	subs	r2, r0, #1
 8000936:	4190      	sbcs	r0, r2
 8000938:	464a      	mov	r2, r9
 800093a:	40fa      	lsrs	r2, r7
 800093c:	4304      	orrs	r4, r0
 800093e:	1889      	adds	r1, r1, r2
 8000940:	e6ee      	b.n	8000720 <__aeabi_dadd+0x278>
 8000942:	4c87      	ldr	r4, [pc, #540]	; (8000b60 <__aeabi_dadd+0x6b8>)
 8000944:	42a2      	cmp	r2, r4
 8000946:	d100      	bne.n	800094a <__aeabi_dadd+0x4a2>
 8000948:	e6f9      	b.n	800073e <__aeabi_dadd+0x296>
 800094a:	1818      	adds	r0, r3, r0
 800094c:	4298      	cmp	r0, r3
 800094e:	419b      	sbcs	r3, r3
 8000950:	4449      	add	r1, r9
 8000952:	425b      	negs	r3, r3
 8000954:	18cb      	adds	r3, r1, r3
 8000956:	07dc      	lsls	r4, r3, #31
 8000958:	0840      	lsrs	r0, r0, #1
 800095a:	085b      	lsrs	r3, r3, #1
 800095c:	469a      	mov	sl, r3
 800095e:	0016      	movs	r6, r2
 8000960:	4304      	orrs	r4, r0
 8000962:	e6c6      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000964:	4642      	mov	r2, r8
 8000966:	1ad4      	subs	r4, r2, r3
 8000968:	45a0      	cmp	r8, r4
 800096a:	4180      	sbcs	r0, r0
 800096c:	464b      	mov	r3, r9
 800096e:	4240      	negs	r0, r0
 8000970:	1a59      	subs	r1, r3, r1
 8000972:	1a0b      	subs	r3, r1, r0
 8000974:	469a      	mov	sl, r3
 8000976:	4665      	mov	r5, ip
 8000978:	e5ea      	b.n	8000550 <__aeabi_dadd+0xa8>
 800097a:	464b      	mov	r3, r9
 800097c:	464a      	mov	r2, r9
 800097e:	08c0      	lsrs	r0, r0, #3
 8000980:	075b      	lsls	r3, r3, #29
 8000982:	4665      	mov	r5, ip
 8000984:	4303      	orrs	r3, r0
 8000986:	08d1      	lsrs	r1, r2, #3
 8000988:	e6bd      	b.n	8000706 <__aeabi_dadd+0x25e>
 800098a:	2a00      	cmp	r2, #0
 800098c:	d000      	beq.n	8000990 <__aeabi_dadd+0x4e8>
 800098e:	e08e      	b.n	8000aae <__aeabi_dadd+0x606>
 8000990:	464b      	mov	r3, r9
 8000992:	4303      	orrs	r3, r0
 8000994:	d117      	bne.n	80009c6 <__aeabi_dadd+0x51e>
 8000996:	2180      	movs	r1, #128	; 0x80
 8000998:	2500      	movs	r5, #0
 800099a:	0309      	lsls	r1, r1, #12
 800099c:	e6da      	b.n	8000754 <__aeabi_dadd+0x2ac>
 800099e:	074a      	lsls	r2, r1, #29
 80009a0:	08db      	lsrs	r3, r3, #3
 80009a2:	4313      	orrs	r3, r2
 80009a4:	08c9      	lsrs	r1, r1, #3
 80009a6:	e6d1      	b.n	800074c <__aeabi_dadd+0x2a4>
 80009a8:	1a1c      	subs	r4, r3, r0
 80009aa:	464a      	mov	r2, r9
 80009ac:	42a3      	cmp	r3, r4
 80009ae:	419b      	sbcs	r3, r3
 80009b0:	1a89      	subs	r1, r1, r2
 80009b2:	425b      	negs	r3, r3
 80009b4:	1acb      	subs	r3, r1, r3
 80009b6:	469a      	mov	sl, r3
 80009b8:	2601      	movs	r6, #1
 80009ba:	e5c1      	b.n	8000540 <__aeabi_dadd+0x98>
 80009bc:	074a      	lsls	r2, r1, #29
 80009be:	08db      	lsrs	r3, r3, #3
 80009c0:	4313      	orrs	r3, r2
 80009c2:	08c9      	lsrs	r1, r1, #3
 80009c4:	e69f      	b.n	8000706 <__aeabi_dadd+0x25e>
 80009c6:	4643      	mov	r3, r8
 80009c8:	08d8      	lsrs	r0, r3, #3
 80009ca:	464b      	mov	r3, r9
 80009cc:	464a      	mov	r2, r9
 80009ce:	075b      	lsls	r3, r3, #29
 80009d0:	4665      	mov	r5, ip
 80009d2:	4303      	orrs	r3, r0
 80009d4:	08d1      	lsrs	r1, r2, #3
 80009d6:	e6b9      	b.n	800074c <__aeabi_dadd+0x2a4>
 80009d8:	4643      	mov	r3, r8
 80009da:	08d8      	lsrs	r0, r3, #3
 80009dc:	464b      	mov	r3, r9
 80009de:	464a      	mov	r2, r9
 80009e0:	075b      	lsls	r3, r3, #29
 80009e2:	4303      	orrs	r3, r0
 80009e4:	08d1      	lsrs	r1, r2, #3
 80009e6:	e6b1      	b.n	800074c <__aeabi_dadd+0x2a4>
 80009e8:	4319      	orrs	r1, r3
 80009ea:	000c      	movs	r4, r1
 80009ec:	1e63      	subs	r3, r4, #1
 80009ee:	419c      	sbcs	r4, r3
 80009f0:	e6eb      	b.n	80007ca <__aeabi_dadd+0x322>
 80009f2:	003c      	movs	r4, r7
 80009f4:	000d      	movs	r5, r1
 80009f6:	3c20      	subs	r4, #32
 80009f8:	40e5      	lsrs	r5, r4
 80009fa:	2f20      	cmp	r7, #32
 80009fc:	d003      	beq.n	8000a06 <__aeabi_dadd+0x55e>
 80009fe:	2440      	movs	r4, #64	; 0x40
 8000a00:	1be4      	subs	r4, r4, r7
 8000a02:	40a1      	lsls	r1, r4
 8000a04:	430b      	orrs	r3, r1
 8000a06:	001c      	movs	r4, r3
 8000a08:	1e63      	subs	r3, r4, #1
 8000a0a:	419c      	sbcs	r4, r3
 8000a0c:	432c      	orrs	r4, r5
 8000a0e:	e770      	b.n	80008f2 <__aeabi_dadd+0x44a>
 8000a10:	2a00      	cmp	r2, #0
 8000a12:	d0e1      	beq.n	80009d8 <__aeabi_dadd+0x530>
 8000a14:	464a      	mov	r2, r9
 8000a16:	4302      	orrs	r2, r0
 8000a18:	d0c1      	beq.n	800099e <__aeabi_dadd+0x4f6>
 8000a1a:	074a      	lsls	r2, r1, #29
 8000a1c:	08db      	lsrs	r3, r3, #3
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	2280      	movs	r2, #128	; 0x80
 8000a22:	08c9      	lsrs	r1, r1, #3
 8000a24:	0312      	lsls	r2, r2, #12
 8000a26:	4211      	tst	r1, r2
 8000a28:	d008      	beq.n	8000a3c <__aeabi_dadd+0x594>
 8000a2a:	4648      	mov	r0, r9
 8000a2c:	08c4      	lsrs	r4, r0, #3
 8000a2e:	4214      	tst	r4, r2
 8000a30:	d104      	bne.n	8000a3c <__aeabi_dadd+0x594>
 8000a32:	4643      	mov	r3, r8
 8000a34:	0021      	movs	r1, r4
 8000a36:	08db      	lsrs	r3, r3, #3
 8000a38:	0742      	lsls	r2, r0, #29
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	0f5a      	lsrs	r2, r3, #29
 8000a3e:	00db      	lsls	r3, r3, #3
 8000a40:	0752      	lsls	r2, r2, #29
 8000a42:	08db      	lsrs	r3, r3, #3
 8000a44:	4313      	orrs	r3, r2
 8000a46:	e681      	b.n	800074c <__aeabi_dadd+0x2a4>
 8000a48:	464b      	mov	r3, r9
 8000a4a:	4303      	orrs	r3, r0
 8000a4c:	d100      	bne.n	8000a50 <__aeabi_dadd+0x5a8>
 8000a4e:	e714      	b.n	800087a <__aeabi_dadd+0x3d2>
 8000a50:	464b      	mov	r3, r9
 8000a52:	464a      	mov	r2, r9
 8000a54:	08c0      	lsrs	r0, r0, #3
 8000a56:	075b      	lsls	r3, r3, #29
 8000a58:	4665      	mov	r5, ip
 8000a5a:	4303      	orrs	r3, r0
 8000a5c:	08d1      	lsrs	r1, r2, #3
 8000a5e:	e655      	b.n	800070c <__aeabi_dadd+0x264>
 8000a60:	1ac4      	subs	r4, r0, r3
 8000a62:	45a0      	cmp	r8, r4
 8000a64:	4180      	sbcs	r0, r0
 8000a66:	464b      	mov	r3, r9
 8000a68:	4240      	negs	r0, r0
 8000a6a:	1a59      	subs	r1, r3, r1
 8000a6c:	1a0b      	subs	r3, r1, r0
 8000a6e:	469a      	mov	sl, r3
 8000a70:	4665      	mov	r5, ip
 8000a72:	2601      	movs	r6, #1
 8000a74:	e564      	b.n	8000540 <__aeabi_dadd+0x98>
 8000a76:	1a1c      	subs	r4, r3, r0
 8000a78:	464a      	mov	r2, r9
 8000a7a:	42a3      	cmp	r3, r4
 8000a7c:	4180      	sbcs	r0, r0
 8000a7e:	1a8a      	subs	r2, r1, r2
 8000a80:	4240      	negs	r0, r0
 8000a82:	1a12      	subs	r2, r2, r0
 8000a84:	4692      	mov	sl, r2
 8000a86:	0212      	lsls	r2, r2, #8
 8000a88:	d549      	bpl.n	8000b1e <__aeabi_dadd+0x676>
 8000a8a:	4642      	mov	r2, r8
 8000a8c:	1ad4      	subs	r4, r2, r3
 8000a8e:	45a0      	cmp	r8, r4
 8000a90:	4180      	sbcs	r0, r0
 8000a92:	464b      	mov	r3, r9
 8000a94:	4240      	negs	r0, r0
 8000a96:	1a59      	subs	r1, r3, r1
 8000a98:	1a0b      	subs	r3, r1, r0
 8000a9a:	469a      	mov	sl, r3
 8000a9c:	4665      	mov	r5, ip
 8000a9e:	e57f      	b.n	80005a0 <__aeabi_dadd+0xf8>
 8000aa0:	464b      	mov	r3, r9
 8000aa2:	464a      	mov	r2, r9
 8000aa4:	08c0      	lsrs	r0, r0, #3
 8000aa6:	075b      	lsls	r3, r3, #29
 8000aa8:	4303      	orrs	r3, r0
 8000aaa:	08d1      	lsrs	r1, r2, #3
 8000aac:	e62b      	b.n	8000706 <__aeabi_dadd+0x25e>
 8000aae:	464a      	mov	r2, r9
 8000ab0:	08db      	lsrs	r3, r3, #3
 8000ab2:	4302      	orrs	r2, r0
 8000ab4:	d138      	bne.n	8000b28 <__aeabi_dadd+0x680>
 8000ab6:	074a      	lsls	r2, r1, #29
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	08c9      	lsrs	r1, r1, #3
 8000abc:	e646      	b.n	800074c <__aeabi_dadd+0x2a4>
 8000abe:	464b      	mov	r3, r9
 8000ac0:	464a      	mov	r2, r9
 8000ac2:	08c0      	lsrs	r0, r0, #3
 8000ac4:	075b      	lsls	r3, r3, #29
 8000ac6:	4303      	orrs	r3, r0
 8000ac8:	08d1      	lsrs	r1, r2, #3
 8000aca:	e61f      	b.n	800070c <__aeabi_dadd+0x264>
 8000acc:	181c      	adds	r4, r3, r0
 8000ace:	429c      	cmp	r4, r3
 8000ad0:	419b      	sbcs	r3, r3
 8000ad2:	4449      	add	r1, r9
 8000ad4:	468a      	mov	sl, r1
 8000ad6:	425b      	negs	r3, r3
 8000ad8:	449a      	add	sl, r3
 8000ada:	4653      	mov	r3, sl
 8000adc:	021b      	lsls	r3, r3, #8
 8000ade:	d400      	bmi.n	8000ae2 <__aeabi_dadd+0x63a>
 8000ae0:	e607      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000ae2:	4652      	mov	r2, sl
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <__aeabi_dadd+0x6bc>)
 8000ae6:	2601      	movs	r6, #1
 8000ae8:	401a      	ands	r2, r3
 8000aea:	4692      	mov	sl, r2
 8000aec:	e601      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000aee:	003c      	movs	r4, r7
 8000af0:	000e      	movs	r6, r1
 8000af2:	3c20      	subs	r4, #32
 8000af4:	40e6      	lsrs	r6, r4
 8000af6:	2f20      	cmp	r7, #32
 8000af8:	d003      	beq.n	8000b02 <__aeabi_dadd+0x65a>
 8000afa:	2440      	movs	r4, #64	; 0x40
 8000afc:	1be4      	subs	r4, r4, r7
 8000afe:	40a1      	lsls	r1, r4
 8000b00:	430b      	orrs	r3, r1
 8000b02:	001c      	movs	r4, r3
 8000b04:	1e63      	subs	r3, r4, #1
 8000b06:	419c      	sbcs	r4, r3
 8000b08:	4334      	orrs	r4, r6
 8000b0a:	e65e      	b.n	80007ca <__aeabi_dadd+0x322>
 8000b0c:	4443      	add	r3, r8
 8000b0e:	4283      	cmp	r3, r0
 8000b10:	4180      	sbcs	r0, r0
 8000b12:	4449      	add	r1, r9
 8000b14:	468a      	mov	sl, r1
 8000b16:	4240      	negs	r0, r0
 8000b18:	001c      	movs	r4, r3
 8000b1a:	4482      	add	sl, r0
 8000b1c:	e6bc      	b.n	8000898 <__aeabi_dadd+0x3f0>
 8000b1e:	4653      	mov	r3, sl
 8000b20:	4323      	orrs	r3, r4
 8000b22:	d100      	bne.n	8000b26 <__aeabi_dadd+0x67e>
 8000b24:	e6a9      	b.n	800087a <__aeabi_dadd+0x3d2>
 8000b26:	e5e4      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000b28:	074a      	lsls	r2, r1, #29
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	2280      	movs	r2, #128	; 0x80
 8000b2e:	08c9      	lsrs	r1, r1, #3
 8000b30:	0312      	lsls	r2, r2, #12
 8000b32:	4211      	tst	r1, r2
 8000b34:	d009      	beq.n	8000b4a <__aeabi_dadd+0x6a2>
 8000b36:	4648      	mov	r0, r9
 8000b38:	08c4      	lsrs	r4, r0, #3
 8000b3a:	4214      	tst	r4, r2
 8000b3c:	d105      	bne.n	8000b4a <__aeabi_dadd+0x6a2>
 8000b3e:	4643      	mov	r3, r8
 8000b40:	4665      	mov	r5, ip
 8000b42:	0021      	movs	r1, r4
 8000b44:	08db      	lsrs	r3, r3, #3
 8000b46:	0742      	lsls	r2, r0, #29
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	0f5a      	lsrs	r2, r3, #29
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	08db      	lsrs	r3, r3, #3
 8000b50:	0752      	lsls	r2, r2, #29
 8000b52:	4313      	orrs	r3, r2
 8000b54:	e5fa      	b.n	800074c <__aeabi_dadd+0x2a4>
 8000b56:	2300      	movs	r3, #0
 8000b58:	4a01      	ldr	r2, [pc, #4]	; (8000b60 <__aeabi_dadd+0x6b8>)
 8000b5a:	001c      	movs	r4, r3
 8000b5c:	e540      	b.n	80005e0 <__aeabi_dadd+0x138>
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	000007ff 	.word	0x000007ff
 8000b64:	ff7fffff 	.word	0xff7fffff

08000b68 <__aeabi_ddiv>:
 8000b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b6a:	4657      	mov	r7, sl
 8000b6c:	464e      	mov	r6, r9
 8000b6e:	4645      	mov	r5, r8
 8000b70:	46de      	mov	lr, fp
 8000b72:	b5e0      	push	{r5, r6, r7, lr}
 8000b74:	030c      	lsls	r4, r1, #12
 8000b76:	001f      	movs	r7, r3
 8000b78:	004b      	lsls	r3, r1, #1
 8000b7a:	4681      	mov	r9, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0005      	movs	r5, r0
 8000b80:	b085      	sub	sp, #20
 8000b82:	0b24      	lsrs	r4, r4, #12
 8000b84:	0d5b      	lsrs	r3, r3, #21
 8000b86:	0fce      	lsrs	r6, r1, #31
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_ddiv+0x26>
 8000b8c:	e152      	b.n	8000e34 <__aeabi_ddiv+0x2cc>
 8000b8e:	4ad2      	ldr	r2, [pc, #840]	; (8000ed8 <__aeabi_ddiv+0x370>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d100      	bne.n	8000b96 <__aeabi_ddiv+0x2e>
 8000b94:	e16e      	b.n	8000e74 <__aeabi_ddiv+0x30c>
 8000b96:	0f42      	lsrs	r2, r0, #29
 8000b98:	00e4      	lsls	r4, r4, #3
 8000b9a:	4314      	orrs	r4, r2
 8000b9c:	2280      	movs	r2, #128	; 0x80
 8000b9e:	0412      	lsls	r2, r2, #16
 8000ba0:	4322      	orrs	r2, r4
 8000ba2:	4690      	mov	r8, r2
 8000ba4:	4acd      	ldr	r2, [pc, #820]	; (8000edc <__aeabi_ddiv+0x374>)
 8000ba6:	00c5      	lsls	r5, r0, #3
 8000ba8:	4693      	mov	fp, r2
 8000baa:	449b      	add	fp, r3
 8000bac:	2300      	movs	r3, #0
 8000bae:	4699      	mov	r9, r3
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	033c      	lsls	r4, r7, #12
 8000bb4:	007b      	lsls	r3, r7, #1
 8000bb6:	4650      	mov	r0, sl
 8000bb8:	0b24      	lsrs	r4, r4, #12
 8000bba:	0d5b      	lsrs	r3, r3, #21
 8000bbc:	0fff      	lsrs	r7, r7, #31
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_ddiv+0x5c>
 8000bc2:	e11a      	b.n	8000dfa <__aeabi_ddiv+0x292>
 8000bc4:	4ac4      	ldr	r2, [pc, #784]	; (8000ed8 <__aeabi_ddiv+0x370>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d100      	bne.n	8000bcc <__aeabi_ddiv+0x64>
 8000bca:	e15e      	b.n	8000e8a <__aeabi_ddiv+0x322>
 8000bcc:	0f42      	lsrs	r2, r0, #29
 8000bce:	00e4      	lsls	r4, r4, #3
 8000bd0:	4322      	orrs	r2, r4
 8000bd2:	2480      	movs	r4, #128	; 0x80
 8000bd4:	0424      	lsls	r4, r4, #16
 8000bd6:	4314      	orrs	r4, r2
 8000bd8:	4ac0      	ldr	r2, [pc, #768]	; (8000edc <__aeabi_ddiv+0x374>)
 8000bda:	00c1      	lsls	r1, r0, #3
 8000bdc:	4694      	mov	ip, r2
 8000bde:	465a      	mov	r2, fp
 8000be0:	4463      	add	r3, ip
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	469b      	mov	fp, r3
 8000be6:	2000      	movs	r0, #0
 8000be8:	0033      	movs	r3, r6
 8000bea:	407b      	eors	r3, r7
 8000bec:	469a      	mov	sl, r3
 8000bee:	464b      	mov	r3, r9
 8000bf0:	2b0f      	cmp	r3, #15
 8000bf2:	d827      	bhi.n	8000c44 <__aeabi_ddiv+0xdc>
 8000bf4:	4aba      	ldr	r2, [pc, #744]	; (8000ee0 <__aeabi_ddiv+0x378>)
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	58d3      	ldr	r3, [r2, r3]
 8000bfa:	469f      	mov	pc, r3
 8000bfc:	46b2      	mov	sl, r6
 8000bfe:	9b00      	ldr	r3, [sp, #0]
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d016      	beq.n	8000c32 <__aeabi_ddiv+0xca>
 8000c04:	2b03      	cmp	r3, #3
 8000c06:	d100      	bne.n	8000c0a <__aeabi_ddiv+0xa2>
 8000c08:	e287      	b.n	800111a <__aeabi_ddiv+0x5b2>
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d000      	beq.n	8000c10 <__aeabi_ddiv+0xa8>
 8000c0e:	e0d5      	b.n	8000dbc <__aeabi_ddiv+0x254>
 8000c10:	2300      	movs	r3, #0
 8000c12:	2200      	movs	r2, #0
 8000c14:	2500      	movs	r5, #0
 8000c16:	051b      	lsls	r3, r3, #20
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	4652      	mov	r2, sl
 8000c1c:	07d2      	lsls	r2, r2, #31
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	0028      	movs	r0, r5
 8000c22:	0019      	movs	r1, r3
 8000c24:	b005      	add	sp, #20
 8000c26:	bcf0      	pop	{r4, r5, r6, r7}
 8000c28:	46bb      	mov	fp, r7
 8000c2a:	46b2      	mov	sl, r6
 8000c2c:	46a9      	mov	r9, r5
 8000c2e:	46a0      	mov	r8, r4
 8000c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c32:	2200      	movs	r2, #0
 8000c34:	2500      	movs	r5, #0
 8000c36:	4ba8      	ldr	r3, [pc, #672]	; (8000ed8 <__aeabi_ddiv+0x370>)
 8000c38:	e7ed      	b.n	8000c16 <__aeabi_ddiv+0xae>
 8000c3a:	46ba      	mov	sl, r7
 8000c3c:	46a0      	mov	r8, r4
 8000c3e:	000d      	movs	r5, r1
 8000c40:	9000      	str	r0, [sp, #0]
 8000c42:	e7dc      	b.n	8000bfe <__aeabi_ddiv+0x96>
 8000c44:	4544      	cmp	r4, r8
 8000c46:	d200      	bcs.n	8000c4a <__aeabi_ddiv+0xe2>
 8000c48:	e1c4      	b.n	8000fd4 <__aeabi_ddiv+0x46c>
 8000c4a:	d100      	bne.n	8000c4e <__aeabi_ddiv+0xe6>
 8000c4c:	e1bf      	b.n	8000fce <__aeabi_ddiv+0x466>
 8000c4e:	2301      	movs	r3, #1
 8000c50:	425b      	negs	r3, r3
 8000c52:	469c      	mov	ip, r3
 8000c54:	002e      	movs	r6, r5
 8000c56:	4640      	mov	r0, r8
 8000c58:	2500      	movs	r5, #0
 8000c5a:	44e3      	add	fp, ip
 8000c5c:	0223      	lsls	r3, r4, #8
 8000c5e:	0e0c      	lsrs	r4, r1, #24
 8000c60:	431c      	orrs	r4, r3
 8000c62:	0c1b      	lsrs	r3, r3, #16
 8000c64:	4699      	mov	r9, r3
 8000c66:	0423      	lsls	r3, r4, #16
 8000c68:	020a      	lsls	r2, r1, #8
 8000c6a:	0c1f      	lsrs	r7, r3, #16
 8000c6c:	4649      	mov	r1, r9
 8000c6e:	9200      	str	r2, [sp, #0]
 8000c70:	9701      	str	r7, [sp, #4]
 8000c72:	f7ff faeb 	bl	800024c <__aeabi_uidivmod>
 8000c76:	0002      	movs	r2, r0
 8000c78:	437a      	muls	r2, r7
 8000c7a:	040b      	lsls	r3, r1, #16
 8000c7c:	0c31      	lsrs	r1, r6, #16
 8000c7e:	4680      	mov	r8, r0
 8000c80:	4319      	orrs	r1, r3
 8000c82:	428a      	cmp	r2, r1
 8000c84:	d907      	bls.n	8000c96 <__aeabi_ddiv+0x12e>
 8000c86:	2301      	movs	r3, #1
 8000c88:	425b      	negs	r3, r3
 8000c8a:	469c      	mov	ip, r3
 8000c8c:	1909      	adds	r1, r1, r4
 8000c8e:	44e0      	add	r8, ip
 8000c90:	428c      	cmp	r4, r1
 8000c92:	d800      	bhi.n	8000c96 <__aeabi_ddiv+0x12e>
 8000c94:	e201      	b.n	800109a <__aeabi_ddiv+0x532>
 8000c96:	1a88      	subs	r0, r1, r2
 8000c98:	4649      	mov	r1, r9
 8000c9a:	f7ff fad7 	bl	800024c <__aeabi_uidivmod>
 8000c9e:	9a01      	ldr	r2, [sp, #4]
 8000ca0:	0436      	lsls	r6, r6, #16
 8000ca2:	4342      	muls	r2, r0
 8000ca4:	0409      	lsls	r1, r1, #16
 8000ca6:	0c36      	lsrs	r6, r6, #16
 8000ca8:	0003      	movs	r3, r0
 8000caa:	430e      	orrs	r6, r1
 8000cac:	42b2      	cmp	r2, r6
 8000cae:	d904      	bls.n	8000cba <__aeabi_ddiv+0x152>
 8000cb0:	1936      	adds	r6, r6, r4
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	42b4      	cmp	r4, r6
 8000cb6:	d800      	bhi.n	8000cba <__aeabi_ddiv+0x152>
 8000cb8:	e1e9      	b.n	800108e <__aeabi_ddiv+0x526>
 8000cba:	1ab0      	subs	r0, r6, r2
 8000cbc:	4642      	mov	r2, r8
 8000cbe:	9e00      	ldr	r6, [sp, #0]
 8000cc0:	0412      	lsls	r2, r2, #16
 8000cc2:	431a      	orrs	r2, r3
 8000cc4:	0c33      	lsrs	r3, r6, #16
 8000cc6:	001f      	movs	r7, r3
 8000cc8:	0c11      	lsrs	r1, r2, #16
 8000cca:	4690      	mov	r8, r2
 8000ccc:	9302      	str	r3, [sp, #8]
 8000cce:	0413      	lsls	r3, r2, #16
 8000cd0:	0432      	lsls	r2, r6, #16
 8000cd2:	0c16      	lsrs	r6, r2, #16
 8000cd4:	0032      	movs	r2, r6
 8000cd6:	0c1b      	lsrs	r3, r3, #16
 8000cd8:	435a      	muls	r2, r3
 8000cda:	9603      	str	r6, [sp, #12]
 8000cdc:	437b      	muls	r3, r7
 8000cde:	434e      	muls	r6, r1
 8000ce0:	4379      	muls	r1, r7
 8000ce2:	0c17      	lsrs	r7, r2, #16
 8000ce4:	46bc      	mov	ip, r7
 8000ce6:	199b      	adds	r3, r3, r6
 8000ce8:	4463      	add	r3, ip
 8000cea:	429e      	cmp	r6, r3
 8000cec:	d903      	bls.n	8000cf6 <__aeabi_ddiv+0x18e>
 8000cee:	2680      	movs	r6, #128	; 0x80
 8000cf0:	0276      	lsls	r6, r6, #9
 8000cf2:	46b4      	mov	ip, r6
 8000cf4:	4461      	add	r1, ip
 8000cf6:	0c1e      	lsrs	r6, r3, #16
 8000cf8:	1871      	adds	r1, r6, r1
 8000cfa:	0416      	lsls	r6, r2, #16
 8000cfc:	041b      	lsls	r3, r3, #16
 8000cfe:	0c36      	lsrs	r6, r6, #16
 8000d00:	199e      	adds	r6, r3, r6
 8000d02:	4288      	cmp	r0, r1
 8000d04:	d302      	bcc.n	8000d0c <__aeabi_ddiv+0x1a4>
 8000d06:	d112      	bne.n	8000d2e <__aeabi_ddiv+0x1c6>
 8000d08:	42b5      	cmp	r5, r6
 8000d0a:	d210      	bcs.n	8000d2e <__aeabi_ddiv+0x1c6>
 8000d0c:	4643      	mov	r3, r8
 8000d0e:	1e5a      	subs	r2, r3, #1
 8000d10:	9b00      	ldr	r3, [sp, #0]
 8000d12:	469c      	mov	ip, r3
 8000d14:	4465      	add	r5, ip
 8000d16:	001f      	movs	r7, r3
 8000d18:	429d      	cmp	r5, r3
 8000d1a:	419b      	sbcs	r3, r3
 8000d1c:	425b      	negs	r3, r3
 8000d1e:	191b      	adds	r3, r3, r4
 8000d20:	18c0      	adds	r0, r0, r3
 8000d22:	4284      	cmp	r4, r0
 8000d24:	d200      	bcs.n	8000d28 <__aeabi_ddiv+0x1c0>
 8000d26:	e19e      	b.n	8001066 <__aeabi_ddiv+0x4fe>
 8000d28:	d100      	bne.n	8000d2c <__aeabi_ddiv+0x1c4>
 8000d2a:	e199      	b.n	8001060 <__aeabi_ddiv+0x4f8>
 8000d2c:	4690      	mov	r8, r2
 8000d2e:	1bae      	subs	r6, r5, r6
 8000d30:	42b5      	cmp	r5, r6
 8000d32:	41ad      	sbcs	r5, r5
 8000d34:	1a40      	subs	r0, r0, r1
 8000d36:	426d      	negs	r5, r5
 8000d38:	1b40      	subs	r0, r0, r5
 8000d3a:	4284      	cmp	r4, r0
 8000d3c:	d100      	bne.n	8000d40 <__aeabi_ddiv+0x1d8>
 8000d3e:	e1d2      	b.n	80010e6 <__aeabi_ddiv+0x57e>
 8000d40:	4649      	mov	r1, r9
 8000d42:	f7ff fa83 	bl	800024c <__aeabi_uidivmod>
 8000d46:	9a01      	ldr	r2, [sp, #4]
 8000d48:	040b      	lsls	r3, r1, #16
 8000d4a:	4342      	muls	r2, r0
 8000d4c:	0c31      	lsrs	r1, r6, #16
 8000d4e:	0005      	movs	r5, r0
 8000d50:	4319      	orrs	r1, r3
 8000d52:	428a      	cmp	r2, r1
 8000d54:	d900      	bls.n	8000d58 <__aeabi_ddiv+0x1f0>
 8000d56:	e16c      	b.n	8001032 <__aeabi_ddiv+0x4ca>
 8000d58:	1a88      	subs	r0, r1, r2
 8000d5a:	4649      	mov	r1, r9
 8000d5c:	f7ff fa76 	bl	800024c <__aeabi_uidivmod>
 8000d60:	9a01      	ldr	r2, [sp, #4]
 8000d62:	0436      	lsls	r6, r6, #16
 8000d64:	4342      	muls	r2, r0
 8000d66:	0409      	lsls	r1, r1, #16
 8000d68:	0c36      	lsrs	r6, r6, #16
 8000d6a:	0003      	movs	r3, r0
 8000d6c:	430e      	orrs	r6, r1
 8000d6e:	42b2      	cmp	r2, r6
 8000d70:	d900      	bls.n	8000d74 <__aeabi_ddiv+0x20c>
 8000d72:	e153      	b.n	800101c <__aeabi_ddiv+0x4b4>
 8000d74:	9803      	ldr	r0, [sp, #12]
 8000d76:	1ab6      	subs	r6, r6, r2
 8000d78:	0002      	movs	r2, r0
 8000d7a:	042d      	lsls	r5, r5, #16
 8000d7c:	431d      	orrs	r5, r3
 8000d7e:	9f02      	ldr	r7, [sp, #8]
 8000d80:	042b      	lsls	r3, r5, #16
 8000d82:	0c1b      	lsrs	r3, r3, #16
 8000d84:	435a      	muls	r2, r3
 8000d86:	437b      	muls	r3, r7
 8000d88:	469c      	mov	ip, r3
 8000d8a:	0c29      	lsrs	r1, r5, #16
 8000d8c:	4348      	muls	r0, r1
 8000d8e:	0c13      	lsrs	r3, r2, #16
 8000d90:	4484      	add	ip, r0
 8000d92:	4463      	add	r3, ip
 8000d94:	4379      	muls	r1, r7
 8000d96:	4298      	cmp	r0, r3
 8000d98:	d903      	bls.n	8000da2 <__aeabi_ddiv+0x23a>
 8000d9a:	2080      	movs	r0, #128	; 0x80
 8000d9c:	0240      	lsls	r0, r0, #9
 8000d9e:	4684      	mov	ip, r0
 8000da0:	4461      	add	r1, ip
 8000da2:	0c18      	lsrs	r0, r3, #16
 8000da4:	0412      	lsls	r2, r2, #16
 8000da6:	041b      	lsls	r3, r3, #16
 8000da8:	0c12      	lsrs	r2, r2, #16
 8000daa:	1840      	adds	r0, r0, r1
 8000dac:	189b      	adds	r3, r3, r2
 8000dae:	4286      	cmp	r6, r0
 8000db0:	d200      	bcs.n	8000db4 <__aeabi_ddiv+0x24c>
 8000db2:	e100      	b.n	8000fb6 <__aeabi_ddiv+0x44e>
 8000db4:	d100      	bne.n	8000db8 <__aeabi_ddiv+0x250>
 8000db6:	e0fb      	b.n	8000fb0 <__aeabi_ddiv+0x448>
 8000db8:	2301      	movs	r3, #1
 8000dba:	431d      	orrs	r5, r3
 8000dbc:	4b49      	ldr	r3, [pc, #292]	; (8000ee4 <__aeabi_ddiv+0x37c>)
 8000dbe:	445b      	add	r3, fp
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	dc00      	bgt.n	8000dc6 <__aeabi_ddiv+0x25e>
 8000dc4:	e0aa      	b.n	8000f1c <__aeabi_ddiv+0x3b4>
 8000dc6:	076a      	lsls	r2, r5, #29
 8000dc8:	d000      	beq.n	8000dcc <__aeabi_ddiv+0x264>
 8000dca:	e13d      	b.n	8001048 <__aeabi_ddiv+0x4e0>
 8000dcc:	08e9      	lsrs	r1, r5, #3
 8000dce:	4642      	mov	r2, r8
 8000dd0:	01d2      	lsls	r2, r2, #7
 8000dd2:	d506      	bpl.n	8000de2 <__aeabi_ddiv+0x27a>
 8000dd4:	4642      	mov	r2, r8
 8000dd6:	4b44      	ldr	r3, [pc, #272]	; (8000ee8 <__aeabi_ddiv+0x380>)
 8000dd8:	401a      	ands	r2, r3
 8000dda:	2380      	movs	r3, #128	; 0x80
 8000ddc:	4690      	mov	r8, r2
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	445b      	add	r3, fp
 8000de2:	4a42      	ldr	r2, [pc, #264]	; (8000eec <__aeabi_ddiv+0x384>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	dd00      	ble.n	8000dea <__aeabi_ddiv+0x282>
 8000de8:	e723      	b.n	8000c32 <__aeabi_ddiv+0xca>
 8000dea:	4642      	mov	r2, r8
 8000dec:	055b      	lsls	r3, r3, #21
 8000dee:	0755      	lsls	r5, r2, #29
 8000df0:	0252      	lsls	r2, r2, #9
 8000df2:	430d      	orrs	r5, r1
 8000df4:	0b12      	lsrs	r2, r2, #12
 8000df6:	0d5b      	lsrs	r3, r3, #21
 8000df8:	e70d      	b.n	8000c16 <__aeabi_ddiv+0xae>
 8000dfa:	4651      	mov	r1, sl
 8000dfc:	4321      	orrs	r1, r4
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_ddiv+0x29a>
 8000e00:	e07c      	b.n	8000efc <__aeabi_ddiv+0x394>
 8000e02:	2c00      	cmp	r4, #0
 8000e04:	d100      	bne.n	8000e08 <__aeabi_ddiv+0x2a0>
 8000e06:	e0fb      	b.n	8001000 <__aeabi_ddiv+0x498>
 8000e08:	0020      	movs	r0, r4
 8000e0a:	f001 f995 	bl	8002138 <__clzsi2>
 8000e0e:	0002      	movs	r2, r0
 8000e10:	3a0b      	subs	r2, #11
 8000e12:	231d      	movs	r3, #29
 8000e14:	1a9b      	subs	r3, r3, r2
 8000e16:	4652      	mov	r2, sl
 8000e18:	0001      	movs	r1, r0
 8000e1a:	40da      	lsrs	r2, r3
 8000e1c:	4653      	mov	r3, sl
 8000e1e:	3908      	subs	r1, #8
 8000e20:	408b      	lsls	r3, r1
 8000e22:	408c      	lsls	r4, r1
 8000e24:	0019      	movs	r1, r3
 8000e26:	4314      	orrs	r4, r2
 8000e28:	4b31      	ldr	r3, [pc, #196]	; (8000ef0 <__aeabi_ddiv+0x388>)
 8000e2a:	4458      	add	r0, fp
 8000e2c:	469b      	mov	fp, r3
 8000e2e:	4483      	add	fp, r0
 8000e30:	2000      	movs	r0, #0
 8000e32:	e6d9      	b.n	8000be8 <__aeabi_ddiv+0x80>
 8000e34:	0003      	movs	r3, r0
 8000e36:	4323      	orrs	r3, r4
 8000e38:	4698      	mov	r8, r3
 8000e3a:	d044      	beq.n	8000ec6 <__aeabi_ddiv+0x35e>
 8000e3c:	2c00      	cmp	r4, #0
 8000e3e:	d100      	bne.n	8000e42 <__aeabi_ddiv+0x2da>
 8000e40:	e0cf      	b.n	8000fe2 <__aeabi_ddiv+0x47a>
 8000e42:	0020      	movs	r0, r4
 8000e44:	f001 f978 	bl	8002138 <__clzsi2>
 8000e48:	0001      	movs	r1, r0
 8000e4a:	0002      	movs	r2, r0
 8000e4c:	390b      	subs	r1, #11
 8000e4e:	231d      	movs	r3, #29
 8000e50:	1a5b      	subs	r3, r3, r1
 8000e52:	4649      	mov	r1, r9
 8000e54:	0010      	movs	r0, r2
 8000e56:	40d9      	lsrs	r1, r3
 8000e58:	3808      	subs	r0, #8
 8000e5a:	4084      	lsls	r4, r0
 8000e5c:	000b      	movs	r3, r1
 8000e5e:	464d      	mov	r5, r9
 8000e60:	4323      	orrs	r3, r4
 8000e62:	4698      	mov	r8, r3
 8000e64:	4085      	lsls	r5, r0
 8000e66:	4b23      	ldr	r3, [pc, #140]	; (8000ef4 <__aeabi_ddiv+0x38c>)
 8000e68:	1a9b      	subs	r3, r3, r2
 8000e6a:	469b      	mov	fp, r3
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	4699      	mov	r9, r3
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	e69e      	b.n	8000bb2 <__aeabi_ddiv+0x4a>
 8000e74:	0002      	movs	r2, r0
 8000e76:	4322      	orrs	r2, r4
 8000e78:	4690      	mov	r8, r2
 8000e7a:	d11d      	bne.n	8000eb8 <__aeabi_ddiv+0x350>
 8000e7c:	2208      	movs	r2, #8
 8000e7e:	469b      	mov	fp, r3
 8000e80:	2302      	movs	r3, #2
 8000e82:	2500      	movs	r5, #0
 8000e84:	4691      	mov	r9, r2
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	e693      	b.n	8000bb2 <__aeabi_ddiv+0x4a>
 8000e8a:	4651      	mov	r1, sl
 8000e8c:	4321      	orrs	r1, r4
 8000e8e:	d109      	bne.n	8000ea4 <__aeabi_ddiv+0x33c>
 8000e90:	2302      	movs	r3, #2
 8000e92:	464a      	mov	r2, r9
 8000e94:	431a      	orrs	r2, r3
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <__aeabi_ddiv+0x390>)
 8000e98:	4691      	mov	r9, r2
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	2400      	movs	r4, #0
 8000e9e:	2002      	movs	r0, #2
 8000ea0:	44e3      	add	fp, ip
 8000ea2:	e6a1      	b.n	8000be8 <__aeabi_ddiv+0x80>
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	464a      	mov	r2, r9
 8000ea8:	431a      	orrs	r2, r3
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <__aeabi_ddiv+0x390>)
 8000eac:	4691      	mov	r9, r2
 8000eae:	469c      	mov	ip, r3
 8000eb0:	4651      	mov	r1, sl
 8000eb2:	2003      	movs	r0, #3
 8000eb4:	44e3      	add	fp, ip
 8000eb6:	e697      	b.n	8000be8 <__aeabi_ddiv+0x80>
 8000eb8:	220c      	movs	r2, #12
 8000eba:	469b      	mov	fp, r3
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	46a0      	mov	r8, r4
 8000ec0:	4691      	mov	r9, r2
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	e675      	b.n	8000bb2 <__aeabi_ddiv+0x4a>
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	4699      	mov	r9, r3
 8000eca:	2300      	movs	r3, #0
 8000ecc:	469b      	mov	fp, r3
 8000ece:	3301      	adds	r3, #1
 8000ed0:	2500      	movs	r5, #0
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	e66d      	b.n	8000bb2 <__aeabi_ddiv+0x4a>
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	000007ff 	.word	0x000007ff
 8000edc:	fffffc01 	.word	0xfffffc01
 8000ee0:	080091d4 	.word	0x080091d4
 8000ee4:	000003ff 	.word	0x000003ff
 8000ee8:	feffffff 	.word	0xfeffffff
 8000eec:	000007fe 	.word	0x000007fe
 8000ef0:	000003f3 	.word	0x000003f3
 8000ef4:	fffffc0d 	.word	0xfffffc0d
 8000ef8:	fffff801 	.word	0xfffff801
 8000efc:	464a      	mov	r2, r9
 8000efe:	2301      	movs	r3, #1
 8000f00:	431a      	orrs	r2, r3
 8000f02:	4691      	mov	r9, r2
 8000f04:	2400      	movs	r4, #0
 8000f06:	2001      	movs	r0, #1
 8000f08:	e66e      	b.n	8000be8 <__aeabi_ddiv+0x80>
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	2280      	movs	r2, #128	; 0x80
 8000f0e:	469a      	mov	sl, r3
 8000f10:	2500      	movs	r5, #0
 8000f12:	4b88      	ldr	r3, [pc, #544]	; (8001134 <__aeabi_ddiv+0x5cc>)
 8000f14:	0312      	lsls	r2, r2, #12
 8000f16:	e67e      	b.n	8000c16 <__aeabi_ddiv+0xae>
 8000f18:	2501      	movs	r5, #1
 8000f1a:	426d      	negs	r5, r5
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	1ad2      	subs	r2, r2, r3
 8000f20:	2a38      	cmp	r2, #56	; 0x38
 8000f22:	dd00      	ble.n	8000f26 <__aeabi_ddiv+0x3be>
 8000f24:	e674      	b.n	8000c10 <__aeabi_ddiv+0xa8>
 8000f26:	2a1f      	cmp	r2, #31
 8000f28:	dc00      	bgt.n	8000f2c <__aeabi_ddiv+0x3c4>
 8000f2a:	e0bd      	b.n	80010a8 <__aeabi_ddiv+0x540>
 8000f2c:	211f      	movs	r1, #31
 8000f2e:	4249      	negs	r1, r1
 8000f30:	1acb      	subs	r3, r1, r3
 8000f32:	4641      	mov	r1, r8
 8000f34:	40d9      	lsrs	r1, r3
 8000f36:	000b      	movs	r3, r1
 8000f38:	2a20      	cmp	r2, #32
 8000f3a:	d004      	beq.n	8000f46 <__aeabi_ddiv+0x3de>
 8000f3c:	4641      	mov	r1, r8
 8000f3e:	4a7e      	ldr	r2, [pc, #504]	; (8001138 <__aeabi_ddiv+0x5d0>)
 8000f40:	445a      	add	r2, fp
 8000f42:	4091      	lsls	r1, r2
 8000f44:	430d      	orrs	r5, r1
 8000f46:	0029      	movs	r1, r5
 8000f48:	1e4a      	subs	r2, r1, #1
 8000f4a:	4191      	sbcs	r1, r2
 8000f4c:	4319      	orrs	r1, r3
 8000f4e:	2307      	movs	r3, #7
 8000f50:	001d      	movs	r5, r3
 8000f52:	2200      	movs	r2, #0
 8000f54:	400d      	ands	r5, r1
 8000f56:	420b      	tst	r3, r1
 8000f58:	d100      	bne.n	8000f5c <__aeabi_ddiv+0x3f4>
 8000f5a:	e0d0      	b.n	80010fe <__aeabi_ddiv+0x596>
 8000f5c:	220f      	movs	r2, #15
 8000f5e:	2300      	movs	r3, #0
 8000f60:	400a      	ands	r2, r1
 8000f62:	2a04      	cmp	r2, #4
 8000f64:	d100      	bne.n	8000f68 <__aeabi_ddiv+0x400>
 8000f66:	e0c7      	b.n	80010f8 <__aeabi_ddiv+0x590>
 8000f68:	1d0a      	adds	r2, r1, #4
 8000f6a:	428a      	cmp	r2, r1
 8000f6c:	4189      	sbcs	r1, r1
 8000f6e:	4249      	negs	r1, r1
 8000f70:	185b      	adds	r3, r3, r1
 8000f72:	0011      	movs	r1, r2
 8000f74:	021a      	lsls	r2, r3, #8
 8000f76:	d400      	bmi.n	8000f7a <__aeabi_ddiv+0x412>
 8000f78:	e0be      	b.n	80010f8 <__aeabi_ddiv+0x590>
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2500      	movs	r5, #0
 8000f80:	e649      	b.n	8000c16 <__aeabi_ddiv+0xae>
 8000f82:	2280      	movs	r2, #128	; 0x80
 8000f84:	4643      	mov	r3, r8
 8000f86:	0312      	lsls	r2, r2, #12
 8000f88:	4213      	tst	r3, r2
 8000f8a:	d008      	beq.n	8000f9e <__aeabi_ddiv+0x436>
 8000f8c:	4214      	tst	r4, r2
 8000f8e:	d106      	bne.n	8000f9e <__aeabi_ddiv+0x436>
 8000f90:	4322      	orrs	r2, r4
 8000f92:	0312      	lsls	r2, r2, #12
 8000f94:	46ba      	mov	sl, r7
 8000f96:	000d      	movs	r5, r1
 8000f98:	4b66      	ldr	r3, [pc, #408]	; (8001134 <__aeabi_ddiv+0x5cc>)
 8000f9a:	0b12      	lsrs	r2, r2, #12
 8000f9c:	e63b      	b.n	8000c16 <__aeabi_ddiv+0xae>
 8000f9e:	2280      	movs	r2, #128	; 0x80
 8000fa0:	4643      	mov	r3, r8
 8000fa2:	0312      	lsls	r2, r2, #12
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	0312      	lsls	r2, r2, #12
 8000fa8:	46b2      	mov	sl, r6
 8000faa:	4b62      	ldr	r3, [pc, #392]	; (8001134 <__aeabi_ddiv+0x5cc>)
 8000fac:	0b12      	lsrs	r2, r2, #12
 8000fae:	e632      	b.n	8000c16 <__aeabi_ddiv+0xae>
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d100      	bne.n	8000fb6 <__aeabi_ddiv+0x44e>
 8000fb4:	e702      	b.n	8000dbc <__aeabi_ddiv+0x254>
 8000fb6:	19a6      	adds	r6, r4, r6
 8000fb8:	1e6a      	subs	r2, r5, #1
 8000fba:	42a6      	cmp	r6, r4
 8000fbc:	d200      	bcs.n	8000fc0 <__aeabi_ddiv+0x458>
 8000fbe:	e089      	b.n	80010d4 <__aeabi_ddiv+0x56c>
 8000fc0:	4286      	cmp	r6, r0
 8000fc2:	d200      	bcs.n	8000fc6 <__aeabi_ddiv+0x45e>
 8000fc4:	e09f      	b.n	8001106 <__aeabi_ddiv+0x59e>
 8000fc6:	d100      	bne.n	8000fca <__aeabi_ddiv+0x462>
 8000fc8:	e0af      	b.n	800112a <__aeabi_ddiv+0x5c2>
 8000fca:	0015      	movs	r5, r2
 8000fcc:	e6f4      	b.n	8000db8 <__aeabi_ddiv+0x250>
 8000fce:	42a9      	cmp	r1, r5
 8000fd0:	d900      	bls.n	8000fd4 <__aeabi_ddiv+0x46c>
 8000fd2:	e63c      	b.n	8000c4e <__aeabi_ddiv+0xe6>
 8000fd4:	4643      	mov	r3, r8
 8000fd6:	07de      	lsls	r6, r3, #31
 8000fd8:	0858      	lsrs	r0, r3, #1
 8000fda:	086b      	lsrs	r3, r5, #1
 8000fdc:	431e      	orrs	r6, r3
 8000fde:	07ed      	lsls	r5, r5, #31
 8000fe0:	e63c      	b.n	8000c5c <__aeabi_ddiv+0xf4>
 8000fe2:	f001 f8a9 	bl	8002138 <__clzsi2>
 8000fe6:	0001      	movs	r1, r0
 8000fe8:	0002      	movs	r2, r0
 8000fea:	3115      	adds	r1, #21
 8000fec:	3220      	adds	r2, #32
 8000fee:	291c      	cmp	r1, #28
 8000ff0:	dc00      	bgt.n	8000ff4 <__aeabi_ddiv+0x48c>
 8000ff2:	e72c      	b.n	8000e4e <__aeabi_ddiv+0x2e6>
 8000ff4:	464b      	mov	r3, r9
 8000ff6:	3808      	subs	r0, #8
 8000ff8:	4083      	lsls	r3, r0
 8000ffa:	2500      	movs	r5, #0
 8000ffc:	4698      	mov	r8, r3
 8000ffe:	e732      	b.n	8000e66 <__aeabi_ddiv+0x2fe>
 8001000:	f001 f89a 	bl	8002138 <__clzsi2>
 8001004:	0003      	movs	r3, r0
 8001006:	001a      	movs	r2, r3
 8001008:	3215      	adds	r2, #21
 800100a:	3020      	adds	r0, #32
 800100c:	2a1c      	cmp	r2, #28
 800100e:	dc00      	bgt.n	8001012 <__aeabi_ddiv+0x4aa>
 8001010:	e6ff      	b.n	8000e12 <__aeabi_ddiv+0x2aa>
 8001012:	4654      	mov	r4, sl
 8001014:	3b08      	subs	r3, #8
 8001016:	2100      	movs	r1, #0
 8001018:	409c      	lsls	r4, r3
 800101a:	e705      	b.n	8000e28 <__aeabi_ddiv+0x2c0>
 800101c:	1936      	adds	r6, r6, r4
 800101e:	3b01      	subs	r3, #1
 8001020:	42b4      	cmp	r4, r6
 8001022:	d900      	bls.n	8001026 <__aeabi_ddiv+0x4be>
 8001024:	e6a6      	b.n	8000d74 <__aeabi_ddiv+0x20c>
 8001026:	42b2      	cmp	r2, r6
 8001028:	d800      	bhi.n	800102c <__aeabi_ddiv+0x4c4>
 800102a:	e6a3      	b.n	8000d74 <__aeabi_ddiv+0x20c>
 800102c:	1e83      	subs	r3, r0, #2
 800102e:	1936      	adds	r6, r6, r4
 8001030:	e6a0      	b.n	8000d74 <__aeabi_ddiv+0x20c>
 8001032:	1909      	adds	r1, r1, r4
 8001034:	3d01      	subs	r5, #1
 8001036:	428c      	cmp	r4, r1
 8001038:	d900      	bls.n	800103c <__aeabi_ddiv+0x4d4>
 800103a:	e68d      	b.n	8000d58 <__aeabi_ddiv+0x1f0>
 800103c:	428a      	cmp	r2, r1
 800103e:	d800      	bhi.n	8001042 <__aeabi_ddiv+0x4da>
 8001040:	e68a      	b.n	8000d58 <__aeabi_ddiv+0x1f0>
 8001042:	1e85      	subs	r5, r0, #2
 8001044:	1909      	adds	r1, r1, r4
 8001046:	e687      	b.n	8000d58 <__aeabi_ddiv+0x1f0>
 8001048:	220f      	movs	r2, #15
 800104a:	402a      	ands	r2, r5
 800104c:	2a04      	cmp	r2, #4
 800104e:	d100      	bne.n	8001052 <__aeabi_ddiv+0x4ea>
 8001050:	e6bc      	b.n	8000dcc <__aeabi_ddiv+0x264>
 8001052:	1d29      	adds	r1, r5, #4
 8001054:	42a9      	cmp	r1, r5
 8001056:	41ad      	sbcs	r5, r5
 8001058:	426d      	negs	r5, r5
 800105a:	08c9      	lsrs	r1, r1, #3
 800105c:	44a8      	add	r8, r5
 800105e:	e6b6      	b.n	8000dce <__aeabi_ddiv+0x266>
 8001060:	42af      	cmp	r7, r5
 8001062:	d900      	bls.n	8001066 <__aeabi_ddiv+0x4fe>
 8001064:	e662      	b.n	8000d2c <__aeabi_ddiv+0x1c4>
 8001066:	4281      	cmp	r1, r0
 8001068:	d804      	bhi.n	8001074 <__aeabi_ddiv+0x50c>
 800106a:	d000      	beq.n	800106e <__aeabi_ddiv+0x506>
 800106c:	e65e      	b.n	8000d2c <__aeabi_ddiv+0x1c4>
 800106e:	42ae      	cmp	r6, r5
 8001070:	d800      	bhi.n	8001074 <__aeabi_ddiv+0x50c>
 8001072:	e65b      	b.n	8000d2c <__aeabi_ddiv+0x1c4>
 8001074:	2302      	movs	r3, #2
 8001076:	425b      	negs	r3, r3
 8001078:	469c      	mov	ip, r3
 800107a:	9b00      	ldr	r3, [sp, #0]
 800107c:	44e0      	add	r8, ip
 800107e:	469c      	mov	ip, r3
 8001080:	4465      	add	r5, ip
 8001082:	429d      	cmp	r5, r3
 8001084:	419b      	sbcs	r3, r3
 8001086:	425b      	negs	r3, r3
 8001088:	191b      	adds	r3, r3, r4
 800108a:	18c0      	adds	r0, r0, r3
 800108c:	e64f      	b.n	8000d2e <__aeabi_ddiv+0x1c6>
 800108e:	42b2      	cmp	r2, r6
 8001090:	d800      	bhi.n	8001094 <__aeabi_ddiv+0x52c>
 8001092:	e612      	b.n	8000cba <__aeabi_ddiv+0x152>
 8001094:	1e83      	subs	r3, r0, #2
 8001096:	1936      	adds	r6, r6, r4
 8001098:	e60f      	b.n	8000cba <__aeabi_ddiv+0x152>
 800109a:	428a      	cmp	r2, r1
 800109c:	d800      	bhi.n	80010a0 <__aeabi_ddiv+0x538>
 800109e:	e5fa      	b.n	8000c96 <__aeabi_ddiv+0x12e>
 80010a0:	1e83      	subs	r3, r0, #2
 80010a2:	4698      	mov	r8, r3
 80010a4:	1909      	adds	r1, r1, r4
 80010a6:	e5f6      	b.n	8000c96 <__aeabi_ddiv+0x12e>
 80010a8:	4b24      	ldr	r3, [pc, #144]	; (800113c <__aeabi_ddiv+0x5d4>)
 80010aa:	0028      	movs	r0, r5
 80010ac:	445b      	add	r3, fp
 80010ae:	4641      	mov	r1, r8
 80010b0:	409d      	lsls	r5, r3
 80010b2:	4099      	lsls	r1, r3
 80010b4:	40d0      	lsrs	r0, r2
 80010b6:	1e6b      	subs	r3, r5, #1
 80010b8:	419d      	sbcs	r5, r3
 80010ba:	4643      	mov	r3, r8
 80010bc:	4301      	orrs	r1, r0
 80010be:	4329      	orrs	r1, r5
 80010c0:	40d3      	lsrs	r3, r2
 80010c2:	074a      	lsls	r2, r1, #29
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x560>
 80010c6:	e755      	b.n	8000f74 <__aeabi_ddiv+0x40c>
 80010c8:	220f      	movs	r2, #15
 80010ca:	400a      	ands	r2, r1
 80010cc:	2a04      	cmp	r2, #4
 80010ce:	d000      	beq.n	80010d2 <__aeabi_ddiv+0x56a>
 80010d0:	e74a      	b.n	8000f68 <__aeabi_ddiv+0x400>
 80010d2:	e74f      	b.n	8000f74 <__aeabi_ddiv+0x40c>
 80010d4:	0015      	movs	r5, r2
 80010d6:	4286      	cmp	r6, r0
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x574>
 80010da:	e66d      	b.n	8000db8 <__aeabi_ddiv+0x250>
 80010dc:	9a00      	ldr	r2, [sp, #0]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d000      	beq.n	80010e4 <__aeabi_ddiv+0x57c>
 80010e2:	e669      	b.n	8000db8 <__aeabi_ddiv+0x250>
 80010e4:	e66a      	b.n	8000dbc <__aeabi_ddiv+0x254>
 80010e6:	4b16      	ldr	r3, [pc, #88]	; (8001140 <__aeabi_ddiv+0x5d8>)
 80010e8:	445b      	add	r3, fp
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	dc00      	bgt.n	80010f0 <__aeabi_ddiv+0x588>
 80010ee:	e713      	b.n	8000f18 <__aeabi_ddiv+0x3b0>
 80010f0:	2501      	movs	r5, #1
 80010f2:	2100      	movs	r1, #0
 80010f4:	44a8      	add	r8, r5
 80010f6:	e66a      	b.n	8000dce <__aeabi_ddiv+0x266>
 80010f8:	075d      	lsls	r5, r3, #29
 80010fa:	025b      	lsls	r3, r3, #9
 80010fc:	0b1a      	lsrs	r2, r3, #12
 80010fe:	08c9      	lsrs	r1, r1, #3
 8001100:	2300      	movs	r3, #0
 8001102:	430d      	orrs	r5, r1
 8001104:	e587      	b.n	8000c16 <__aeabi_ddiv+0xae>
 8001106:	9900      	ldr	r1, [sp, #0]
 8001108:	3d02      	subs	r5, #2
 800110a:	004a      	lsls	r2, r1, #1
 800110c:	428a      	cmp	r2, r1
 800110e:	41bf      	sbcs	r7, r7
 8001110:	427f      	negs	r7, r7
 8001112:	193f      	adds	r7, r7, r4
 8001114:	19f6      	adds	r6, r6, r7
 8001116:	9200      	str	r2, [sp, #0]
 8001118:	e7dd      	b.n	80010d6 <__aeabi_ddiv+0x56e>
 800111a:	2280      	movs	r2, #128	; 0x80
 800111c:	4643      	mov	r3, r8
 800111e:	0312      	lsls	r2, r2, #12
 8001120:	431a      	orrs	r2, r3
 8001122:	0312      	lsls	r2, r2, #12
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <__aeabi_ddiv+0x5cc>)
 8001126:	0b12      	lsrs	r2, r2, #12
 8001128:	e575      	b.n	8000c16 <__aeabi_ddiv+0xae>
 800112a:	9900      	ldr	r1, [sp, #0]
 800112c:	4299      	cmp	r1, r3
 800112e:	d3ea      	bcc.n	8001106 <__aeabi_ddiv+0x59e>
 8001130:	0015      	movs	r5, r2
 8001132:	e7d3      	b.n	80010dc <__aeabi_ddiv+0x574>
 8001134:	000007ff 	.word	0x000007ff
 8001138:	0000043e 	.word	0x0000043e
 800113c:	0000041e 	.word	0x0000041e
 8001140:	000003ff 	.word	0x000003ff

08001144 <__eqdf2>:
 8001144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001146:	464e      	mov	r6, r9
 8001148:	4645      	mov	r5, r8
 800114a:	46de      	mov	lr, fp
 800114c:	4657      	mov	r7, sl
 800114e:	4690      	mov	r8, r2
 8001150:	b5e0      	push	{r5, r6, r7, lr}
 8001152:	0017      	movs	r7, r2
 8001154:	031a      	lsls	r2, r3, #12
 8001156:	0b12      	lsrs	r2, r2, #12
 8001158:	0005      	movs	r5, r0
 800115a:	4684      	mov	ip, r0
 800115c:	4819      	ldr	r0, [pc, #100]	; (80011c4 <__eqdf2+0x80>)
 800115e:	030e      	lsls	r6, r1, #12
 8001160:	004c      	lsls	r4, r1, #1
 8001162:	4691      	mov	r9, r2
 8001164:	005a      	lsls	r2, r3, #1
 8001166:	0fdb      	lsrs	r3, r3, #31
 8001168:	469b      	mov	fp, r3
 800116a:	0b36      	lsrs	r6, r6, #12
 800116c:	0d64      	lsrs	r4, r4, #21
 800116e:	0fc9      	lsrs	r1, r1, #31
 8001170:	0d52      	lsrs	r2, r2, #21
 8001172:	4284      	cmp	r4, r0
 8001174:	d019      	beq.n	80011aa <__eqdf2+0x66>
 8001176:	4282      	cmp	r2, r0
 8001178:	d010      	beq.n	800119c <__eqdf2+0x58>
 800117a:	2001      	movs	r0, #1
 800117c:	4294      	cmp	r4, r2
 800117e:	d10e      	bne.n	800119e <__eqdf2+0x5a>
 8001180:	454e      	cmp	r6, r9
 8001182:	d10c      	bne.n	800119e <__eqdf2+0x5a>
 8001184:	2001      	movs	r0, #1
 8001186:	45c4      	cmp	ip, r8
 8001188:	d109      	bne.n	800119e <__eqdf2+0x5a>
 800118a:	4559      	cmp	r1, fp
 800118c:	d017      	beq.n	80011be <__eqdf2+0x7a>
 800118e:	2c00      	cmp	r4, #0
 8001190:	d105      	bne.n	800119e <__eqdf2+0x5a>
 8001192:	0030      	movs	r0, r6
 8001194:	4328      	orrs	r0, r5
 8001196:	1e43      	subs	r3, r0, #1
 8001198:	4198      	sbcs	r0, r3
 800119a:	e000      	b.n	800119e <__eqdf2+0x5a>
 800119c:	2001      	movs	r0, #1
 800119e:	bcf0      	pop	{r4, r5, r6, r7}
 80011a0:	46bb      	mov	fp, r7
 80011a2:	46b2      	mov	sl, r6
 80011a4:	46a9      	mov	r9, r5
 80011a6:	46a0      	mov	r8, r4
 80011a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011aa:	0033      	movs	r3, r6
 80011ac:	2001      	movs	r0, #1
 80011ae:	432b      	orrs	r3, r5
 80011b0:	d1f5      	bne.n	800119e <__eqdf2+0x5a>
 80011b2:	42a2      	cmp	r2, r4
 80011b4:	d1f3      	bne.n	800119e <__eqdf2+0x5a>
 80011b6:	464b      	mov	r3, r9
 80011b8:	433b      	orrs	r3, r7
 80011ba:	d1f0      	bne.n	800119e <__eqdf2+0x5a>
 80011bc:	e7e2      	b.n	8001184 <__eqdf2+0x40>
 80011be:	2000      	movs	r0, #0
 80011c0:	e7ed      	b.n	800119e <__eqdf2+0x5a>
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	000007ff 	.word	0x000007ff

080011c8 <__gedf2>:
 80011c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ca:	4647      	mov	r7, r8
 80011cc:	46ce      	mov	lr, r9
 80011ce:	0004      	movs	r4, r0
 80011d0:	0018      	movs	r0, r3
 80011d2:	0016      	movs	r6, r2
 80011d4:	031b      	lsls	r3, r3, #12
 80011d6:	0b1b      	lsrs	r3, r3, #12
 80011d8:	4d2d      	ldr	r5, [pc, #180]	; (8001290 <__gedf2+0xc8>)
 80011da:	004a      	lsls	r2, r1, #1
 80011dc:	4699      	mov	r9, r3
 80011de:	b580      	push	{r7, lr}
 80011e0:	0043      	lsls	r3, r0, #1
 80011e2:	030f      	lsls	r7, r1, #12
 80011e4:	46a4      	mov	ip, r4
 80011e6:	46b0      	mov	r8, r6
 80011e8:	0b3f      	lsrs	r7, r7, #12
 80011ea:	0d52      	lsrs	r2, r2, #21
 80011ec:	0fc9      	lsrs	r1, r1, #31
 80011ee:	0d5b      	lsrs	r3, r3, #21
 80011f0:	0fc0      	lsrs	r0, r0, #31
 80011f2:	42aa      	cmp	r2, r5
 80011f4:	d021      	beq.n	800123a <__gedf2+0x72>
 80011f6:	42ab      	cmp	r3, r5
 80011f8:	d013      	beq.n	8001222 <__gedf2+0x5a>
 80011fa:	2a00      	cmp	r2, #0
 80011fc:	d122      	bne.n	8001244 <__gedf2+0x7c>
 80011fe:	433c      	orrs	r4, r7
 8001200:	2b00      	cmp	r3, #0
 8001202:	d102      	bne.n	800120a <__gedf2+0x42>
 8001204:	464d      	mov	r5, r9
 8001206:	432e      	orrs	r6, r5
 8001208:	d022      	beq.n	8001250 <__gedf2+0x88>
 800120a:	2c00      	cmp	r4, #0
 800120c:	d010      	beq.n	8001230 <__gedf2+0x68>
 800120e:	4281      	cmp	r1, r0
 8001210:	d022      	beq.n	8001258 <__gedf2+0x90>
 8001212:	2002      	movs	r0, #2
 8001214:	3901      	subs	r1, #1
 8001216:	4008      	ands	r0, r1
 8001218:	3801      	subs	r0, #1
 800121a:	bcc0      	pop	{r6, r7}
 800121c:	46b9      	mov	r9, r7
 800121e:	46b0      	mov	r8, r6
 8001220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001222:	464d      	mov	r5, r9
 8001224:	432e      	orrs	r6, r5
 8001226:	d129      	bne.n	800127c <__gedf2+0xb4>
 8001228:	2a00      	cmp	r2, #0
 800122a:	d1f0      	bne.n	800120e <__gedf2+0x46>
 800122c:	433c      	orrs	r4, r7
 800122e:	d1ee      	bne.n	800120e <__gedf2+0x46>
 8001230:	2800      	cmp	r0, #0
 8001232:	d1f2      	bne.n	800121a <__gedf2+0x52>
 8001234:	2001      	movs	r0, #1
 8001236:	4240      	negs	r0, r0
 8001238:	e7ef      	b.n	800121a <__gedf2+0x52>
 800123a:	003d      	movs	r5, r7
 800123c:	4325      	orrs	r5, r4
 800123e:	d11d      	bne.n	800127c <__gedf2+0xb4>
 8001240:	4293      	cmp	r3, r2
 8001242:	d0ee      	beq.n	8001222 <__gedf2+0x5a>
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1e2      	bne.n	800120e <__gedf2+0x46>
 8001248:	464c      	mov	r4, r9
 800124a:	4326      	orrs	r6, r4
 800124c:	d1df      	bne.n	800120e <__gedf2+0x46>
 800124e:	e7e0      	b.n	8001212 <__gedf2+0x4a>
 8001250:	2000      	movs	r0, #0
 8001252:	2c00      	cmp	r4, #0
 8001254:	d0e1      	beq.n	800121a <__gedf2+0x52>
 8001256:	e7dc      	b.n	8001212 <__gedf2+0x4a>
 8001258:	429a      	cmp	r2, r3
 800125a:	dc0a      	bgt.n	8001272 <__gedf2+0xaa>
 800125c:	dbe8      	blt.n	8001230 <__gedf2+0x68>
 800125e:	454f      	cmp	r7, r9
 8001260:	d8d7      	bhi.n	8001212 <__gedf2+0x4a>
 8001262:	d00e      	beq.n	8001282 <__gedf2+0xba>
 8001264:	2000      	movs	r0, #0
 8001266:	454f      	cmp	r7, r9
 8001268:	d2d7      	bcs.n	800121a <__gedf2+0x52>
 800126a:	2900      	cmp	r1, #0
 800126c:	d0e2      	beq.n	8001234 <__gedf2+0x6c>
 800126e:	0008      	movs	r0, r1
 8001270:	e7d3      	b.n	800121a <__gedf2+0x52>
 8001272:	4243      	negs	r3, r0
 8001274:	4158      	adcs	r0, r3
 8001276:	0040      	lsls	r0, r0, #1
 8001278:	3801      	subs	r0, #1
 800127a:	e7ce      	b.n	800121a <__gedf2+0x52>
 800127c:	2002      	movs	r0, #2
 800127e:	4240      	negs	r0, r0
 8001280:	e7cb      	b.n	800121a <__gedf2+0x52>
 8001282:	45c4      	cmp	ip, r8
 8001284:	d8c5      	bhi.n	8001212 <__gedf2+0x4a>
 8001286:	2000      	movs	r0, #0
 8001288:	45c4      	cmp	ip, r8
 800128a:	d2c6      	bcs.n	800121a <__gedf2+0x52>
 800128c:	e7ed      	b.n	800126a <__gedf2+0xa2>
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	000007ff 	.word	0x000007ff

08001294 <__ledf2>:
 8001294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001296:	4647      	mov	r7, r8
 8001298:	46ce      	mov	lr, r9
 800129a:	0004      	movs	r4, r0
 800129c:	0018      	movs	r0, r3
 800129e:	0016      	movs	r6, r2
 80012a0:	031b      	lsls	r3, r3, #12
 80012a2:	0b1b      	lsrs	r3, r3, #12
 80012a4:	4d2c      	ldr	r5, [pc, #176]	; (8001358 <__ledf2+0xc4>)
 80012a6:	004a      	lsls	r2, r1, #1
 80012a8:	4699      	mov	r9, r3
 80012aa:	b580      	push	{r7, lr}
 80012ac:	0043      	lsls	r3, r0, #1
 80012ae:	030f      	lsls	r7, r1, #12
 80012b0:	46a4      	mov	ip, r4
 80012b2:	46b0      	mov	r8, r6
 80012b4:	0b3f      	lsrs	r7, r7, #12
 80012b6:	0d52      	lsrs	r2, r2, #21
 80012b8:	0fc9      	lsrs	r1, r1, #31
 80012ba:	0d5b      	lsrs	r3, r3, #21
 80012bc:	0fc0      	lsrs	r0, r0, #31
 80012be:	42aa      	cmp	r2, r5
 80012c0:	d00d      	beq.n	80012de <__ledf2+0x4a>
 80012c2:	42ab      	cmp	r3, r5
 80012c4:	d010      	beq.n	80012e8 <__ledf2+0x54>
 80012c6:	2a00      	cmp	r2, #0
 80012c8:	d127      	bne.n	800131a <__ledf2+0x86>
 80012ca:	433c      	orrs	r4, r7
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d111      	bne.n	80012f4 <__ledf2+0x60>
 80012d0:	464d      	mov	r5, r9
 80012d2:	432e      	orrs	r6, r5
 80012d4:	d10e      	bne.n	80012f4 <__ledf2+0x60>
 80012d6:	2000      	movs	r0, #0
 80012d8:	2c00      	cmp	r4, #0
 80012da:	d015      	beq.n	8001308 <__ledf2+0x74>
 80012dc:	e00e      	b.n	80012fc <__ledf2+0x68>
 80012de:	003d      	movs	r5, r7
 80012e0:	4325      	orrs	r5, r4
 80012e2:	d110      	bne.n	8001306 <__ledf2+0x72>
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d118      	bne.n	800131a <__ledf2+0x86>
 80012e8:	464d      	mov	r5, r9
 80012ea:	432e      	orrs	r6, r5
 80012ec:	d10b      	bne.n	8001306 <__ledf2+0x72>
 80012ee:	2a00      	cmp	r2, #0
 80012f0:	d102      	bne.n	80012f8 <__ledf2+0x64>
 80012f2:	433c      	orrs	r4, r7
 80012f4:	2c00      	cmp	r4, #0
 80012f6:	d00b      	beq.n	8001310 <__ledf2+0x7c>
 80012f8:	4281      	cmp	r1, r0
 80012fa:	d014      	beq.n	8001326 <__ledf2+0x92>
 80012fc:	2002      	movs	r0, #2
 80012fe:	3901      	subs	r1, #1
 8001300:	4008      	ands	r0, r1
 8001302:	3801      	subs	r0, #1
 8001304:	e000      	b.n	8001308 <__ledf2+0x74>
 8001306:	2002      	movs	r0, #2
 8001308:	bcc0      	pop	{r6, r7}
 800130a:	46b9      	mov	r9, r7
 800130c:	46b0      	mov	r8, r6
 800130e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001310:	2800      	cmp	r0, #0
 8001312:	d1f9      	bne.n	8001308 <__ledf2+0x74>
 8001314:	2001      	movs	r0, #1
 8001316:	4240      	negs	r0, r0
 8001318:	e7f6      	b.n	8001308 <__ledf2+0x74>
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1ec      	bne.n	80012f8 <__ledf2+0x64>
 800131e:	464c      	mov	r4, r9
 8001320:	4326      	orrs	r6, r4
 8001322:	d1e9      	bne.n	80012f8 <__ledf2+0x64>
 8001324:	e7ea      	b.n	80012fc <__ledf2+0x68>
 8001326:	429a      	cmp	r2, r3
 8001328:	dd04      	ble.n	8001334 <__ledf2+0xa0>
 800132a:	4243      	negs	r3, r0
 800132c:	4158      	adcs	r0, r3
 800132e:	0040      	lsls	r0, r0, #1
 8001330:	3801      	subs	r0, #1
 8001332:	e7e9      	b.n	8001308 <__ledf2+0x74>
 8001334:	429a      	cmp	r2, r3
 8001336:	dbeb      	blt.n	8001310 <__ledf2+0x7c>
 8001338:	454f      	cmp	r7, r9
 800133a:	d8df      	bhi.n	80012fc <__ledf2+0x68>
 800133c:	d006      	beq.n	800134c <__ledf2+0xb8>
 800133e:	2000      	movs	r0, #0
 8001340:	454f      	cmp	r7, r9
 8001342:	d2e1      	bcs.n	8001308 <__ledf2+0x74>
 8001344:	2900      	cmp	r1, #0
 8001346:	d0e5      	beq.n	8001314 <__ledf2+0x80>
 8001348:	0008      	movs	r0, r1
 800134a:	e7dd      	b.n	8001308 <__ledf2+0x74>
 800134c:	45c4      	cmp	ip, r8
 800134e:	d8d5      	bhi.n	80012fc <__ledf2+0x68>
 8001350:	2000      	movs	r0, #0
 8001352:	45c4      	cmp	ip, r8
 8001354:	d2d8      	bcs.n	8001308 <__ledf2+0x74>
 8001356:	e7f5      	b.n	8001344 <__ledf2+0xb0>
 8001358:	000007ff 	.word	0x000007ff

0800135c <__aeabi_dmul>:
 800135c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800135e:	4645      	mov	r5, r8
 8001360:	46de      	mov	lr, fp
 8001362:	4657      	mov	r7, sl
 8001364:	464e      	mov	r6, r9
 8001366:	b5e0      	push	{r5, r6, r7, lr}
 8001368:	001f      	movs	r7, r3
 800136a:	030b      	lsls	r3, r1, #12
 800136c:	0b1b      	lsrs	r3, r3, #12
 800136e:	469b      	mov	fp, r3
 8001370:	004d      	lsls	r5, r1, #1
 8001372:	0fcb      	lsrs	r3, r1, #31
 8001374:	0004      	movs	r4, r0
 8001376:	4691      	mov	r9, r2
 8001378:	4698      	mov	r8, r3
 800137a:	b087      	sub	sp, #28
 800137c:	0d6d      	lsrs	r5, r5, #21
 800137e:	d100      	bne.n	8001382 <__aeabi_dmul+0x26>
 8001380:	e1cd      	b.n	800171e <__aeabi_dmul+0x3c2>
 8001382:	4bce      	ldr	r3, [pc, #824]	; (80016bc <__aeabi_dmul+0x360>)
 8001384:	429d      	cmp	r5, r3
 8001386:	d100      	bne.n	800138a <__aeabi_dmul+0x2e>
 8001388:	e1e9      	b.n	800175e <__aeabi_dmul+0x402>
 800138a:	465a      	mov	r2, fp
 800138c:	0f43      	lsrs	r3, r0, #29
 800138e:	00d2      	lsls	r2, r2, #3
 8001390:	4313      	orrs	r3, r2
 8001392:	2280      	movs	r2, #128	; 0x80
 8001394:	0412      	lsls	r2, r2, #16
 8001396:	431a      	orrs	r2, r3
 8001398:	00c3      	lsls	r3, r0, #3
 800139a:	469a      	mov	sl, r3
 800139c:	4bc8      	ldr	r3, [pc, #800]	; (80016c0 <__aeabi_dmul+0x364>)
 800139e:	4693      	mov	fp, r2
 80013a0:	469c      	mov	ip, r3
 80013a2:	2300      	movs	r3, #0
 80013a4:	2600      	movs	r6, #0
 80013a6:	4465      	add	r5, ip
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	033c      	lsls	r4, r7, #12
 80013ac:	007b      	lsls	r3, r7, #1
 80013ae:	4648      	mov	r0, r9
 80013b0:	0b24      	lsrs	r4, r4, #12
 80013b2:	0d5b      	lsrs	r3, r3, #21
 80013b4:	0fff      	lsrs	r7, r7, #31
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d100      	bne.n	80013bc <__aeabi_dmul+0x60>
 80013ba:	e189      	b.n	80016d0 <__aeabi_dmul+0x374>
 80013bc:	4abf      	ldr	r2, [pc, #764]	; (80016bc <__aeabi_dmul+0x360>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d019      	beq.n	80013f6 <__aeabi_dmul+0x9a>
 80013c2:	0f42      	lsrs	r2, r0, #29
 80013c4:	00e4      	lsls	r4, r4, #3
 80013c6:	4322      	orrs	r2, r4
 80013c8:	2480      	movs	r4, #128	; 0x80
 80013ca:	0424      	lsls	r4, r4, #16
 80013cc:	4314      	orrs	r4, r2
 80013ce:	4abc      	ldr	r2, [pc, #752]	; (80016c0 <__aeabi_dmul+0x364>)
 80013d0:	2100      	movs	r1, #0
 80013d2:	4694      	mov	ip, r2
 80013d4:	4642      	mov	r2, r8
 80013d6:	4463      	add	r3, ip
 80013d8:	195b      	adds	r3, r3, r5
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	9b01      	ldr	r3, [sp, #4]
 80013de:	407a      	eors	r2, r7
 80013e0:	3301      	adds	r3, #1
 80013e2:	00c0      	lsls	r0, r0, #3
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	9302      	str	r3, [sp, #8]
 80013e8:	2e0a      	cmp	r6, #10
 80013ea:	dd1c      	ble.n	8001426 <__aeabi_dmul+0xca>
 80013ec:	003a      	movs	r2, r7
 80013ee:	2e0b      	cmp	r6, #11
 80013f0:	d05e      	beq.n	80014b0 <__aeabi_dmul+0x154>
 80013f2:	4647      	mov	r7, r8
 80013f4:	e056      	b.n	80014a4 <__aeabi_dmul+0x148>
 80013f6:	4649      	mov	r1, r9
 80013f8:	4bb0      	ldr	r3, [pc, #704]	; (80016bc <__aeabi_dmul+0x360>)
 80013fa:	4321      	orrs	r1, r4
 80013fc:	18eb      	adds	r3, r5, r3
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	2900      	cmp	r1, #0
 8001402:	d12a      	bne.n	800145a <__aeabi_dmul+0xfe>
 8001404:	2080      	movs	r0, #128	; 0x80
 8001406:	2202      	movs	r2, #2
 8001408:	0100      	lsls	r0, r0, #4
 800140a:	002b      	movs	r3, r5
 800140c:	4684      	mov	ip, r0
 800140e:	4316      	orrs	r6, r2
 8001410:	4642      	mov	r2, r8
 8001412:	4463      	add	r3, ip
 8001414:	407a      	eors	r2, r7
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	9302      	str	r3, [sp, #8]
 800141a:	2e0a      	cmp	r6, #10
 800141c:	dd00      	ble.n	8001420 <__aeabi_dmul+0xc4>
 800141e:	e231      	b.n	8001884 <__aeabi_dmul+0x528>
 8001420:	2000      	movs	r0, #0
 8001422:	2400      	movs	r4, #0
 8001424:	2102      	movs	r1, #2
 8001426:	2e02      	cmp	r6, #2
 8001428:	dc26      	bgt.n	8001478 <__aeabi_dmul+0x11c>
 800142a:	3e01      	subs	r6, #1
 800142c:	2e01      	cmp	r6, #1
 800142e:	d852      	bhi.n	80014d6 <__aeabi_dmul+0x17a>
 8001430:	2902      	cmp	r1, #2
 8001432:	d04c      	beq.n	80014ce <__aeabi_dmul+0x172>
 8001434:	2901      	cmp	r1, #1
 8001436:	d000      	beq.n	800143a <__aeabi_dmul+0xde>
 8001438:	e118      	b.n	800166c <__aeabi_dmul+0x310>
 800143a:	2300      	movs	r3, #0
 800143c:	2400      	movs	r4, #0
 800143e:	2500      	movs	r5, #0
 8001440:	051b      	lsls	r3, r3, #20
 8001442:	4323      	orrs	r3, r4
 8001444:	07d2      	lsls	r2, r2, #31
 8001446:	4313      	orrs	r3, r2
 8001448:	0028      	movs	r0, r5
 800144a:	0019      	movs	r1, r3
 800144c:	b007      	add	sp, #28
 800144e:	bcf0      	pop	{r4, r5, r6, r7}
 8001450:	46bb      	mov	fp, r7
 8001452:	46b2      	mov	sl, r6
 8001454:	46a9      	mov	r9, r5
 8001456:	46a0      	mov	r8, r4
 8001458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145a:	2180      	movs	r1, #128	; 0x80
 800145c:	2203      	movs	r2, #3
 800145e:	0109      	lsls	r1, r1, #4
 8001460:	002b      	movs	r3, r5
 8001462:	468c      	mov	ip, r1
 8001464:	4316      	orrs	r6, r2
 8001466:	4642      	mov	r2, r8
 8001468:	4463      	add	r3, ip
 800146a:	407a      	eors	r2, r7
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	9302      	str	r3, [sp, #8]
 8001470:	2e0a      	cmp	r6, #10
 8001472:	dd00      	ble.n	8001476 <__aeabi_dmul+0x11a>
 8001474:	e228      	b.n	80018c8 <__aeabi_dmul+0x56c>
 8001476:	2103      	movs	r1, #3
 8001478:	2501      	movs	r5, #1
 800147a:	40b5      	lsls	r5, r6
 800147c:	46ac      	mov	ip, r5
 800147e:	26a6      	movs	r6, #166	; 0xa6
 8001480:	4663      	mov	r3, ip
 8001482:	00f6      	lsls	r6, r6, #3
 8001484:	4035      	ands	r5, r6
 8001486:	4233      	tst	r3, r6
 8001488:	d10b      	bne.n	80014a2 <__aeabi_dmul+0x146>
 800148a:	2690      	movs	r6, #144	; 0x90
 800148c:	00b6      	lsls	r6, r6, #2
 800148e:	4233      	tst	r3, r6
 8001490:	d118      	bne.n	80014c4 <__aeabi_dmul+0x168>
 8001492:	3eb9      	subs	r6, #185	; 0xb9
 8001494:	3eff      	subs	r6, #255	; 0xff
 8001496:	421e      	tst	r6, r3
 8001498:	d01d      	beq.n	80014d6 <__aeabi_dmul+0x17a>
 800149a:	46a3      	mov	fp, r4
 800149c:	4682      	mov	sl, r0
 800149e:	9100      	str	r1, [sp, #0]
 80014a0:	e000      	b.n	80014a4 <__aeabi_dmul+0x148>
 80014a2:	0017      	movs	r7, r2
 80014a4:	9900      	ldr	r1, [sp, #0]
 80014a6:	003a      	movs	r2, r7
 80014a8:	2902      	cmp	r1, #2
 80014aa:	d010      	beq.n	80014ce <__aeabi_dmul+0x172>
 80014ac:	465c      	mov	r4, fp
 80014ae:	4650      	mov	r0, sl
 80014b0:	2903      	cmp	r1, #3
 80014b2:	d1bf      	bne.n	8001434 <__aeabi_dmul+0xd8>
 80014b4:	2380      	movs	r3, #128	; 0x80
 80014b6:	031b      	lsls	r3, r3, #12
 80014b8:	431c      	orrs	r4, r3
 80014ba:	0324      	lsls	r4, r4, #12
 80014bc:	0005      	movs	r5, r0
 80014be:	4b7f      	ldr	r3, [pc, #508]	; (80016bc <__aeabi_dmul+0x360>)
 80014c0:	0b24      	lsrs	r4, r4, #12
 80014c2:	e7bd      	b.n	8001440 <__aeabi_dmul+0xe4>
 80014c4:	2480      	movs	r4, #128	; 0x80
 80014c6:	2200      	movs	r2, #0
 80014c8:	4b7c      	ldr	r3, [pc, #496]	; (80016bc <__aeabi_dmul+0x360>)
 80014ca:	0324      	lsls	r4, r4, #12
 80014cc:	e7b8      	b.n	8001440 <__aeabi_dmul+0xe4>
 80014ce:	2400      	movs	r4, #0
 80014d0:	2500      	movs	r5, #0
 80014d2:	4b7a      	ldr	r3, [pc, #488]	; (80016bc <__aeabi_dmul+0x360>)
 80014d4:	e7b4      	b.n	8001440 <__aeabi_dmul+0xe4>
 80014d6:	4653      	mov	r3, sl
 80014d8:	041e      	lsls	r6, r3, #16
 80014da:	0c36      	lsrs	r6, r6, #16
 80014dc:	0c1f      	lsrs	r7, r3, #16
 80014de:	0033      	movs	r3, r6
 80014e0:	0c01      	lsrs	r1, r0, #16
 80014e2:	0400      	lsls	r0, r0, #16
 80014e4:	0c00      	lsrs	r0, r0, #16
 80014e6:	4343      	muls	r3, r0
 80014e8:	4698      	mov	r8, r3
 80014ea:	0003      	movs	r3, r0
 80014ec:	437b      	muls	r3, r7
 80014ee:	4699      	mov	r9, r3
 80014f0:	0033      	movs	r3, r6
 80014f2:	434b      	muls	r3, r1
 80014f4:	469c      	mov	ip, r3
 80014f6:	4643      	mov	r3, r8
 80014f8:	000d      	movs	r5, r1
 80014fa:	0c1b      	lsrs	r3, r3, #16
 80014fc:	469a      	mov	sl, r3
 80014fe:	437d      	muls	r5, r7
 8001500:	44cc      	add	ip, r9
 8001502:	44d4      	add	ip, sl
 8001504:	9500      	str	r5, [sp, #0]
 8001506:	45e1      	cmp	r9, ip
 8001508:	d904      	bls.n	8001514 <__aeabi_dmul+0x1b8>
 800150a:	2380      	movs	r3, #128	; 0x80
 800150c:	025b      	lsls	r3, r3, #9
 800150e:	4699      	mov	r9, r3
 8001510:	444d      	add	r5, r9
 8001512:	9500      	str	r5, [sp, #0]
 8001514:	4663      	mov	r3, ip
 8001516:	0c1b      	lsrs	r3, r3, #16
 8001518:	001d      	movs	r5, r3
 800151a:	4663      	mov	r3, ip
 800151c:	041b      	lsls	r3, r3, #16
 800151e:	469c      	mov	ip, r3
 8001520:	4643      	mov	r3, r8
 8001522:	041b      	lsls	r3, r3, #16
 8001524:	0c1b      	lsrs	r3, r3, #16
 8001526:	4698      	mov	r8, r3
 8001528:	4663      	mov	r3, ip
 800152a:	4443      	add	r3, r8
 800152c:	9303      	str	r3, [sp, #12]
 800152e:	0c23      	lsrs	r3, r4, #16
 8001530:	4698      	mov	r8, r3
 8001532:	0033      	movs	r3, r6
 8001534:	0424      	lsls	r4, r4, #16
 8001536:	0c24      	lsrs	r4, r4, #16
 8001538:	4363      	muls	r3, r4
 800153a:	469c      	mov	ip, r3
 800153c:	0023      	movs	r3, r4
 800153e:	437b      	muls	r3, r7
 8001540:	4699      	mov	r9, r3
 8001542:	4643      	mov	r3, r8
 8001544:	435e      	muls	r6, r3
 8001546:	435f      	muls	r7, r3
 8001548:	444e      	add	r6, r9
 800154a:	4663      	mov	r3, ip
 800154c:	46b2      	mov	sl, r6
 800154e:	0c1e      	lsrs	r6, r3, #16
 8001550:	4456      	add	r6, sl
 8001552:	45b1      	cmp	r9, r6
 8001554:	d903      	bls.n	800155e <__aeabi_dmul+0x202>
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	025b      	lsls	r3, r3, #9
 800155a:	4699      	mov	r9, r3
 800155c:	444f      	add	r7, r9
 800155e:	0c33      	lsrs	r3, r6, #16
 8001560:	4699      	mov	r9, r3
 8001562:	003b      	movs	r3, r7
 8001564:	444b      	add	r3, r9
 8001566:	9305      	str	r3, [sp, #20]
 8001568:	4663      	mov	r3, ip
 800156a:	46ac      	mov	ip, r5
 800156c:	041f      	lsls	r7, r3, #16
 800156e:	0c3f      	lsrs	r7, r7, #16
 8001570:	0436      	lsls	r6, r6, #16
 8001572:	19f6      	adds	r6, r6, r7
 8001574:	44b4      	add	ip, r6
 8001576:	4663      	mov	r3, ip
 8001578:	9304      	str	r3, [sp, #16]
 800157a:	465b      	mov	r3, fp
 800157c:	0c1b      	lsrs	r3, r3, #16
 800157e:	469c      	mov	ip, r3
 8001580:	465b      	mov	r3, fp
 8001582:	041f      	lsls	r7, r3, #16
 8001584:	0c3f      	lsrs	r7, r7, #16
 8001586:	003b      	movs	r3, r7
 8001588:	4343      	muls	r3, r0
 800158a:	4699      	mov	r9, r3
 800158c:	4663      	mov	r3, ip
 800158e:	4343      	muls	r3, r0
 8001590:	469a      	mov	sl, r3
 8001592:	464b      	mov	r3, r9
 8001594:	4660      	mov	r0, ip
 8001596:	0c1b      	lsrs	r3, r3, #16
 8001598:	469b      	mov	fp, r3
 800159a:	4348      	muls	r0, r1
 800159c:	4379      	muls	r1, r7
 800159e:	4451      	add	r1, sl
 80015a0:	4459      	add	r1, fp
 80015a2:	458a      	cmp	sl, r1
 80015a4:	d903      	bls.n	80015ae <__aeabi_dmul+0x252>
 80015a6:	2380      	movs	r3, #128	; 0x80
 80015a8:	025b      	lsls	r3, r3, #9
 80015aa:	469a      	mov	sl, r3
 80015ac:	4450      	add	r0, sl
 80015ae:	0c0b      	lsrs	r3, r1, #16
 80015b0:	469a      	mov	sl, r3
 80015b2:	464b      	mov	r3, r9
 80015b4:	041b      	lsls	r3, r3, #16
 80015b6:	0c1b      	lsrs	r3, r3, #16
 80015b8:	4699      	mov	r9, r3
 80015ba:	003b      	movs	r3, r7
 80015bc:	4363      	muls	r3, r4
 80015be:	0409      	lsls	r1, r1, #16
 80015c0:	4645      	mov	r5, r8
 80015c2:	4449      	add	r1, r9
 80015c4:	4699      	mov	r9, r3
 80015c6:	4663      	mov	r3, ip
 80015c8:	435c      	muls	r4, r3
 80015ca:	436b      	muls	r3, r5
 80015cc:	469c      	mov	ip, r3
 80015ce:	464b      	mov	r3, r9
 80015d0:	0c1b      	lsrs	r3, r3, #16
 80015d2:	4698      	mov	r8, r3
 80015d4:	436f      	muls	r7, r5
 80015d6:	193f      	adds	r7, r7, r4
 80015d8:	4447      	add	r7, r8
 80015da:	4450      	add	r0, sl
 80015dc:	42bc      	cmp	r4, r7
 80015de:	d903      	bls.n	80015e8 <__aeabi_dmul+0x28c>
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	025b      	lsls	r3, r3, #9
 80015e4:	4698      	mov	r8, r3
 80015e6:	44c4      	add	ip, r8
 80015e8:	9b04      	ldr	r3, [sp, #16]
 80015ea:	9d00      	ldr	r5, [sp, #0]
 80015ec:	4698      	mov	r8, r3
 80015ee:	4445      	add	r5, r8
 80015f0:	42b5      	cmp	r5, r6
 80015f2:	41b6      	sbcs	r6, r6
 80015f4:	4273      	negs	r3, r6
 80015f6:	4698      	mov	r8, r3
 80015f8:	464b      	mov	r3, r9
 80015fa:	041e      	lsls	r6, r3, #16
 80015fc:	9b05      	ldr	r3, [sp, #20]
 80015fe:	043c      	lsls	r4, r7, #16
 8001600:	4699      	mov	r9, r3
 8001602:	0c36      	lsrs	r6, r6, #16
 8001604:	19a4      	adds	r4, r4, r6
 8001606:	444c      	add	r4, r9
 8001608:	46a1      	mov	r9, r4
 800160a:	4683      	mov	fp, r0
 800160c:	186e      	adds	r6, r5, r1
 800160e:	44c1      	add	r9, r8
 8001610:	428e      	cmp	r6, r1
 8001612:	4189      	sbcs	r1, r1
 8001614:	44cb      	add	fp, r9
 8001616:	465d      	mov	r5, fp
 8001618:	4249      	negs	r1, r1
 800161a:	186d      	adds	r5, r5, r1
 800161c:	429c      	cmp	r4, r3
 800161e:	41a4      	sbcs	r4, r4
 8001620:	45c1      	cmp	r9, r8
 8001622:	419b      	sbcs	r3, r3
 8001624:	4583      	cmp	fp, r0
 8001626:	4180      	sbcs	r0, r0
 8001628:	428d      	cmp	r5, r1
 800162a:	4189      	sbcs	r1, r1
 800162c:	425b      	negs	r3, r3
 800162e:	4264      	negs	r4, r4
 8001630:	431c      	orrs	r4, r3
 8001632:	4240      	negs	r0, r0
 8001634:	9b03      	ldr	r3, [sp, #12]
 8001636:	4249      	negs	r1, r1
 8001638:	4301      	orrs	r1, r0
 800163a:	0270      	lsls	r0, r6, #9
 800163c:	0c3f      	lsrs	r7, r7, #16
 800163e:	4318      	orrs	r0, r3
 8001640:	19e4      	adds	r4, r4, r7
 8001642:	1e47      	subs	r7, r0, #1
 8001644:	41b8      	sbcs	r0, r7
 8001646:	1864      	adds	r4, r4, r1
 8001648:	4464      	add	r4, ip
 800164a:	0df6      	lsrs	r6, r6, #23
 800164c:	0261      	lsls	r1, r4, #9
 800164e:	4330      	orrs	r0, r6
 8001650:	0dec      	lsrs	r4, r5, #23
 8001652:	026e      	lsls	r6, r5, #9
 8001654:	430c      	orrs	r4, r1
 8001656:	4330      	orrs	r0, r6
 8001658:	01c9      	lsls	r1, r1, #7
 800165a:	d400      	bmi.n	800165e <__aeabi_dmul+0x302>
 800165c:	e0f1      	b.n	8001842 <__aeabi_dmul+0x4e6>
 800165e:	2101      	movs	r1, #1
 8001660:	0843      	lsrs	r3, r0, #1
 8001662:	4001      	ands	r1, r0
 8001664:	430b      	orrs	r3, r1
 8001666:	07e0      	lsls	r0, r4, #31
 8001668:	4318      	orrs	r0, r3
 800166a:	0864      	lsrs	r4, r4, #1
 800166c:	4915      	ldr	r1, [pc, #84]	; (80016c4 <__aeabi_dmul+0x368>)
 800166e:	9b02      	ldr	r3, [sp, #8]
 8001670:	468c      	mov	ip, r1
 8001672:	4463      	add	r3, ip
 8001674:	2b00      	cmp	r3, #0
 8001676:	dc00      	bgt.n	800167a <__aeabi_dmul+0x31e>
 8001678:	e097      	b.n	80017aa <__aeabi_dmul+0x44e>
 800167a:	0741      	lsls	r1, r0, #29
 800167c:	d009      	beq.n	8001692 <__aeabi_dmul+0x336>
 800167e:	210f      	movs	r1, #15
 8001680:	4001      	ands	r1, r0
 8001682:	2904      	cmp	r1, #4
 8001684:	d005      	beq.n	8001692 <__aeabi_dmul+0x336>
 8001686:	1d01      	adds	r1, r0, #4
 8001688:	4281      	cmp	r1, r0
 800168a:	4180      	sbcs	r0, r0
 800168c:	4240      	negs	r0, r0
 800168e:	1824      	adds	r4, r4, r0
 8001690:	0008      	movs	r0, r1
 8001692:	01e1      	lsls	r1, r4, #7
 8001694:	d506      	bpl.n	80016a4 <__aeabi_dmul+0x348>
 8001696:	2180      	movs	r1, #128	; 0x80
 8001698:	00c9      	lsls	r1, r1, #3
 800169a:	468c      	mov	ip, r1
 800169c:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <__aeabi_dmul+0x36c>)
 800169e:	401c      	ands	r4, r3
 80016a0:	9b02      	ldr	r3, [sp, #8]
 80016a2:	4463      	add	r3, ip
 80016a4:	4909      	ldr	r1, [pc, #36]	; (80016cc <__aeabi_dmul+0x370>)
 80016a6:	428b      	cmp	r3, r1
 80016a8:	dd00      	ble.n	80016ac <__aeabi_dmul+0x350>
 80016aa:	e710      	b.n	80014ce <__aeabi_dmul+0x172>
 80016ac:	0761      	lsls	r1, r4, #29
 80016ae:	08c5      	lsrs	r5, r0, #3
 80016b0:	0264      	lsls	r4, r4, #9
 80016b2:	055b      	lsls	r3, r3, #21
 80016b4:	430d      	orrs	r5, r1
 80016b6:	0b24      	lsrs	r4, r4, #12
 80016b8:	0d5b      	lsrs	r3, r3, #21
 80016ba:	e6c1      	b.n	8001440 <__aeabi_dmul+0xe4>
 80016bc:	000007ff 	.word	0x000007ff
 80016c0:	fffffc01 	.word	0xfffffc01
 80016c4:	000003ff 	.word	0x000003ff
 80016c8:	feffffff 	.word	0xfeffffff
 80016cc:	000007fe 	.word	0x000007fe
 80016d0:	464b      	mov	r3, r9
 80016d2:	4323      	orrs	r3, r4
 80016d4:	d059      	beq.n	800178a <__aeabi_dmul+0x42e>
 80016d6:	2c00      	cmp	r4, #0
 80016d8:	d100      	bne.n	80016dc <__aeabi_dmul+0x380>
 80016da:	e0a3      	b.n	8001824 <__aeabi_dmul+0x4c8>
 80016dc:	0020      	movs	r0, r4
 80016de:	f000 fd2b 	bl	8002138 <__clzsi2>
 80016e2:	0001      	movs	r1, r0
 80016e4:	0003      	movs	r3, r0
 80016e6:	390b      	subs	r1, #11
 80016e8:	221d      	movs	r2, #29
 80016ea:	1a52      	subs	r2, r2, r1
 80016ec:	4649      	mov	r1, r9
 80016ee:	0018      	movs	r0, r3
 80016f0:	40d1      	lsrs	r1, r2
 80016f2:	464a      	mov	r2, r9
 80016f4:	3808      	subs	r0, #8
 80016f6:	4082      	lsls	r2, r0
 80016f8:	4084      	lsls	r4, r0
 80016fa:	0010      	movs	r0, r2
 80016fc:	430c      	orrs	r4, r1
 80016fe:	4a74      	ldr	r2, [pc, #464]	; (80018d0 <__aeabi_dmul+0x574>)
 8001700:	1aeb      	subs	r3, r5, r3
 8001702:	4694      	mov	ip, r2
 8001704:	4642      	mov	r2, r8
 8001706:	4463      	add	r3, ip
 8001708:	9301      	str	r3, [sp, #4]
 800170a:	9b01      	ldr	r3, [sp, #4]
 800170c:	407a      	eors	r2, r7
 800170e:	3301      	adds	r3, #1
 8001710:	2100      	movs	r1, #0
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	9302      	str	r3, [sp, #8]
 8001716:	2e0a      	cmp	r6, #10
 8001718:	dd00      	ble.n	800171c <__aeabi_dmul+0x3c0>
 800171a:	e667      	b.n	80013ec <__aeabi_dmul+0x90>
 800171c:	e683      	b.n	8001426 <__aeabi_dmul+0xca>
 800171e:	465b      	mov	r3, fp
 8001720:	4303      	orrs	r3, r0
 8001722:	469a      	mov	sl, r3
 8001724:	d02a      	beq.n	800177c <__aeabi_dmul+0x420>
 8001726:	465b      	mov	r3, fp
 8001728:	2b00      	cmp	r3, #0
 800172a:	d06d      	beq.n	8001808 <__aeabi_dmul+0x4ac>
 800172c:	4658      	mov	r0, fp
 800172e:	f000 fd03 	bl	8002138 <__clzsi2>
 8001732:	0001      	movs	r1, r0
 8001734:	0003      	movs	r3, r0
 8001736:	390b      	subs	r1, #11
 8001738:	221d      	movs	r2, #29
 800173a:	1a52      	subs	r2, r2, r1
 800173c:	0021      	movs	r1, r4
 800173e:	0018      	movs	r0, r3
 8001740:	465d      	mov	r5, fp
 8001742:	40d1      	lsrs	r1, r2
 8001744:	3808      	subs	r0, #8
 8001746:	4085      	lsls	r5, r0
 8001748:	000a      	movs	r2, r1
 800174a:	4084      	lsls	r4, r0
 800174c:	432a      	orrs	r2, r5
 800174e:	4693      	mov	fp, r2
 8001750:	46a2      	mov	sl, r4
 8001752:	4d5f      	ldr	r5, [pc, #380]	; (80018d0 <__aeabi_dmul+0x574>)
 8001754:	2600      	movs	r6, #0
 8001756:	1aed      	subs	r5, r5, r3
 8001758:	2300      	movs	r3, #0
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	e625      	b.n	80013aa <__aeabi_dmul+0x4e>
 800175e:	465b      	mov	r3, fp
 8001760:	4303      	orrs	r3, r0
 8001762:	469a      	mov	sl, r3
 8001764:	d105      	bne.n	8001772 <__aeabi_dmul+0x416>
 8001766:	2300      	movs	r3, #0
 8001768:	469b      	mov	fp, r3
 800176a:	3302      	adds	r3, #2
 800176c:	2608      	movs	r6, #8
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	e61b      	b.n	80013aa <__aeabi_dmul+0x4e>
 8001772:	2303      	movs	r3, #3
 8001774:	4682      	mov	sl, r0
 8001776:	260c      	movs	r6, #12
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	e616      	b.n	80013aa <__aeabi_dmul+0x4e>
 800177c:	2300      	movs	r3, #0
 800177e:	469b      	mov	fp, r3
 8001780:	3301      	adds	r3, #1
 8001782:	2604      	movs	r6, #4
 8001784:	2500      	movs	r5, #0
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	e60f      	b.n	80013aa <__aeabi_dmul+0x4e>
 800178a:	4642      	mov	r2, r8
 800178c:	3301      	adds	r3, #1
 800178e:	9501      	str	r5, [sp, #4]
 8001790:	431e      	orrs	r6, r3
 8001792:	9b01      	ldr	r3, [sp, #4]
 8001794:	407a      	eors	r2, r7
 8001796:	3301      	adds	r3, #1
 8001798:	2400      	movs	r4, #0
 800179a:	2000      	movs	r0, #0
 800179c:	2101      	movs	r1, #1
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	9302      	str	r3, [sp, #8]
 80017a2:	2e0a      	cmp	r6, #10
 80017a4:	dd00      	ble.n	80017a8 <__aeabi_dmul+0x44c>
 80017a6:	e621      	b.n	80013ec <__aeabi_dmul+0x90>
 80017a8:	e63d      	b.n	8001426 <__aeabi_dmul+0xca>
 80017aa:	2101      	movs	r1, #1
 80017ac:	1ac9      	subs	r1, r1, r3
 80017ae:	2938      	cmp	r1, #56	; 0x38
 80017b0:	dd00      	ble.n	80017b4 <__aeabi_dmul+0x458>
 80017b2:	e642      	b.n	800143a <__aeabi_dmul+0xde>
 80017b4:	291f      	cmp	r1, #31
 80017b6:	dd47      	ble.n	8001848 <__aeabi_dmul+0x4ec>
 80017b8:	261f      	movs	r6, #31
 80017ba:	0025      	movs	r5, r4
 80017bc:	4276      	negs	r6, r6
 80017be:	1af3      	subs	r3, r6, r3
 80017c0:	40dd      	lsrs	r5, r3
 80017c2:	002b      	movs	r3, r5
 80017c4:	2920      	cmp	r1, #32
 80017c6:	d005      	beq.n	80017d4 <__aeabi_dmul+0x478>
 80017c8:	4942      	ldr	r1, [pc, #264]	; (80018d4 <__aeabi_dmul+0x578>)
 80017ca:	9d02      	ldr	r5, [sp, #8]
 80017cc:	468c      	mov	ip, r1
 80017ce:	4465      	add	r5, ip
 80017d0:	40ac      	lsls	r4, r5
 80017d2:	4320      	orrs	r0, r4
 80017d4:	1e41      	subs	r1, r0, #1
 80017d6:	4188      	sbcs	r0, r1
 80017d8:	4318      	orrs	r0, r3
 80017da:	2307      	movs	r3, #7
 80017dc:	001d      	movs	r5, r3
 80017de:	2400      	movs	r4, #0
 80017e0:	4005      	ands	r5, r0
 80017e2:	4203      	tst	r3, r0
 80017e4:	d04a      	beq.n	800187c <__aeabi_dmul+0x520>
 80017e6:	230f      	movs	r3, #15
 80017e8:	2400      	movs	r4, #0
 80017ea:	4003      	ands	r3, r0
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d042      	beq.n	8001876 <__aeabi_dmul+0x51a>
 80017f0:	1d03      	adds	r3, r0, #4
 80017f2:	4283      	cmp	r3, r0
 80017f4:	4180      	sbcs	r0, r0
 80017f6:	4240      	negs	r0, r0
 80017f8:	1824      	adds	r4, r4, r0
 80017fa:	0018      	movs	r0, r3
 80017fc:	0223      	lsls	r3, r4, #8
 80017fe:	d53a      	bpl.n	8001876 <__aeabi_dmul+0x51a>
 8001800:	2301      	movs	r3, #1
 8001802:	2400      	movs	r4, #0
 8001804:	2500      	movs	r5, #0
 8001806:	e61b      	b.n	8001440 <__aeabi_dmul+0xe4>
 8001808:	f000 fc96 	bl	8002138 <__clzsi2>
 800180c:	0001      	movs	r1, r0
 800180e:	0003      	movs	r3, r0
 8001810:	3115      	adds	r1, #21
 8001812:	3320      	adds	r3, #32
 8001814:	291c      	cmp	r1, #28
 8001816:	dd8f      	ble.n	8001738 <__aeabi_dmul+0x3dc>
 8001818:	3808      	subs	r0, #8
 800181a:	2200      	movs	r2, #0
 800181c:	4084      	lsls	r4, r0
 800181e:	4692      	mov	sl, r2
 8001820:	46a3      	mov	fp, r4
 8001822:	e796      	b.n	8001752 <__aeabi_dmul+0x3f6>
 8001824:	f000 fc88 	bl	8002138 <__clzsi2>
 8001828:	0001      	movs	r1, r0
 800182a:	0003      	movs	r3, r0
 800182c:	3115      	adds	r1, #21
 800182e:	3320      	adds	r3, #32
 8001830:	291c      	cmp	r1, #28
 8001832:	dc00      	bgt.n	8001836 <__aeabi_dmul+0x4da>
 8001834:	e758      	b.n	80016e8 <__aeabi_dmul+0x38c>
 8001836:	0002      	movs	r2, r0
 8001838:	464c      	mov	r4, r9
 800183a:	3a08      	subs	r2, #8
 800183c:	2000      	movs	r0, #0
 800183e:	4094      	lsls	r4, r2
 8001840:	e75d      	b.n	80016fe <__aeabi_dmul+0x3a2>
 8001842:	9b01      	ldr	r3, [sp, #4]
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	e711      	b.n	800166c <__aeabi_dmul+0x310>
 8001848:	4b23      	ldr	r3, [pc, #140]	; (80018d8 <__aeabi_dmul+0x57c>)
 800184a:	0026      	movs	r6, r4
 800184c:	469c      	mov	ip, r3
 800184e:	0003      	movs	r3, r0
 8001850:	9d02      	ldr	r5, [sp, #8]
 8001852:	40cb      	lsrs	r3, r1
 8001854:	4465      	add	r5, ip
 8001856:	40ae      	lsls	r6, r5
 8001858:	431e      	orrs	r6, r3
 800185a:	0003      	movs	r3, r0
 800185c:	40ab      	lsls	r3, r5
 800185e:	1e58      	subs	r0, r3, #1
 8001860:	4183      	sbcs	r3, r0
 8001862:	0030      	movs	r0, r6
 8001864:	4318      	orrs	r0, r3
 8001866:	40cc      	lsrs	r4, r1
 8001868:	0743      	lsls	r3, r0, #29
 800186a:	d0c7      	beq.n	80017fc <__aeabi_dmul+0x4a0>
 800186c:	230f      	movs	r3, #15
 800186e:	4003      	ands	r3, r0
 8001870:	2b04      	cmp	r3, #4
 8001872:	d1bd      	bne.n	80017f0 <__aeabi_dmul+0x494>
 8001874:	e7c2      	b.n	80017fc <__aeabi_dmul+0x4a0>
 8001876:	0765      	lsls	r5, r4, #29
 8001878:	0264      	lsls	r4, r4, #9
 800187a:	0b24      	lsrs	r4, r4, #12
 800187c:	08c0      	lsrs	r0, r0, #3
 800187e:	2300      	movs	r3, #0
 8001880:	4305      	orrs	r5, r0
 8001882:	e5dd      	b.n	8001440 <__aeabi_dmul+0xe4>
 8001884:	2500      	movs	r5, #0
 8001886:	2302      	movs	r3, #2
 8001888:	2e0f      	cmp	r6, #15
 800188a:	d10c      	bne.n	80018a6 <__aeabi_dmul+0x54a>
 800188c:	2480      	movs	r4, #128	; 0x80
 800188e:	465b      	mov	r3, fp
 8001890:	0324      	lsls	r4, r4, #12
 8001892:	4223      	tst	r3, r4
 8001894:	d00e      	beq.n	80018b4 <__aeabi_dmul+0x558>
 8001896:	4221      	tst	r1, r4
 8001898:	d10c      	bne.n	80018b4 <__aeabi_dmul+0x558>
 800189a:	430c      	orrs	r4, r1
 800189c:	0324      	lsls	r4, r4, #12
 800189e:	003a      	movs	r2, r7
 80018a0:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <__aeabi_dmul+0x580>)
 80018a2:	0b24      	lsrs	r4, r4, #12
 80018a4:	e5cc      	b.n	8001440 <__aeabi_dmul+0xe4>
 80018a6:	2e0b      	cmp	r6, #11
 80018a8:	d000      	beq.n	80018ac <__aeabi_dmul+0x550>
 80018aa:	e5a2      	b.n	80013f2 <__aeabi_dmul+0x96>
 80018ac:	468b      	mov	fp, r1
 80018ae:	46aa      	mov	sl, r5
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	e5f7      	b.n	80014a4 <__aeabi_dmul+0x148>
 80018b4:	2480      	movs	r4, #128	; 0x80
 80018b6:	465b      	mov	r3, fp
 80018b8:	0324      	lsls	r4, r4, #12
 80018ba:	431c      	orrs	r4, r3
 80018bc:	0324      	lsls	r4, r4, #12
 80018be:	4642      	mov	r2, r8
 80018c0:	4655      	mov	r5, sl
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <__aeabi_dmul+0x580>)
 80018c4:	0b24      	lsrs	r4, r4, #12
 80018c6:	e5bb      	b.n	8001440 <__aeabi_dmul+0xe4>
 80018c8:	464d      	mov	r5, r9
 80018ca:	0021      	movs	r1, r4
 80018cc:	2303      	movs	r3, #3
 80018ce:	e7db      	b.n	8001888 <__aeabi_dmul+0x52c>
 80018d0:	fffffc0d 	.word	0xfffffc0d
 80018d4:	0000043e 	.word	0x0000043e
 80018d8:	0000041e 	.word	0x0000041e
 80018dc:	000007ff 	.word	0x000007ff

080018e0 <__aeabi_dsub>:
 80018e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e2:	4657      	mov	r7, sl
 80018e4:	464e      	mov	r6, r9
 80018e6:	4645      	mov	r5, r8
 80018e8:	46de      	mov	lr, fp
 80018ea:	b5e0      	push	{r5, r6, r7, lr}
 80018ec:	000d      	movs	r5, r1
 80018ee:	0004      	movs	r4, r0
 80018f0:	0019      	movs	r1, r3
 80018f2:	0010      	movs	r0, r2
 80018f4:	032b      	lsls	r3, r5, #12
 80018f6:	0a5b      	lsrs	r3, r3, #9
 80018f8:	0f62      	lsrs	r2, r4, #29
 80018fa:	431a      	orrs	r2, r3
 80018fc:	00e3      	lsls	r3, r4, #3
 80018fe:	030c      	lsls	r4, r1, #12
 8001900:	0a64      	lsrs	r4, r4, #9
 8001902:	0f47      	lsrs	r7, r0, #29
 8001904:	4327      	orrs	r7, r4
 8001906:	4cd0      	ldr	r4, [pc, #832]	; (8001c48 <__aeabi_dsub+0x368>)
 8001908:	006e      	lsls	r6, r5, #1
 800190a:	4691      	mov	r9, r2
 800190c:	b083      	sub	sp, #12
 800190e:	004a      	lsls	r2, r1, #1
 8001910:	00c0      	lsls	r0, r0, #3
 8001912:	4698      	mov	r8, r3
 8001914:	46a2      	mov	sl, r4
 8001916:	0d76      	lsrs	r6, r6, #21
 8001918:	0fed      	lsrs	r5, r5, #31
 800191a:	0d52      	lsrs	r2, r2, #21
 800191c:	0fc9      	lsrs	r1, r1, #31
 800191e:	9001      	str	r0, [sp, #4]
 8001920:	42a2      	cmp	r2, r4
 8001922:	d100      	bne.n	8001926 <__aeabi_dsub+0x46>
 8001924:	e0b9      	b.n	8001a9a <__aeabi_dsub+0x1ba>
 8001926:	2401      	movs	r4, #1
 8001928:	4061      	eors	r1, r4
 800192a:	468b      	mov	fp, r1
 800192c:	428d      	cmp	r5, r1
 800192e:	d100      	bne.n	8001932 <__aeabi_dsub+0x52>
 8001930:	e08d      	b.n	8001a4e <__aeabi_dsub+0x16e>
 8001932:	1ab4      	subs	r4, r6, r2
 8001934:	46a4      	mov	ip, r4
 8001936:	2c00      	cmp	r4, #0
 8001938:	dc00      	bgt.n	800193c <__aeabi_dsub+0x5c>
 800193a:	e0b7      	b.n	8001aac <__aeabi_dsub+0x1cc>
 800193c:	2a00      	cmp	r2, #0
 800193e:	d100      	bne.n	8001942 <__aeabi_dsub+0x62>
 8001940:	e0cb      	b.n	8001ada <__aeabi_dsub+0x1fa>
 8001942:	4ac1      	ldr	r2, [pc, #772]	; (8001c48 <__aeabi_dsub+0x368>)
 8001944:	4296      	cmp	r6, r2
 8001946:	d100      	bne.n	800194a <__aeabi_dsub+0x6a>
 8001948:	e186      	b.n	8001c58 <__aeabi_dsub+0x378>
 800194a:	2280      	movs	r2, #128	; 0x80
 800194c:	0412      	lsls	r2, r2, #16
 800194e:	4317      	orrs	r7, r2
 8001950:	4662      	mov	r2, ip
 8001952:	2a38      	cmp	r2, #56	; 0x38
 8001954:	dd00      	ble.n	8001958 <__aeabi_dsub+0x78>
 8001956:	e1a4      	b.n	8001ca2 <__aeabi_dsub+0x3c2>
 8001958:	2a1f      	cmp	r2, #31
 800195a:	dd00      	ble.n	800195e <__aeabi_dsub+0x7e>
 800195c:	e21d      	b.n	8001d9a <__aeabi_dsub+0x4ba>
 800195e:	4661      	mov	r1, ip
 8001960:	2220      	movs	r2, #32
 8001962:	003c      	movs	r4, r7
 8001964:	1a52      	subs	r2, r2, r1
 8001966:	0001      	movs	r1, r0
 8001968:	4090      	lsls	r0, r2
 800196a:	4094      	lsls	r4, r2
 800196c:	1e42      	subs	r2, r0, #1
 800196e:	4190      	sbcs	r0, r2
 8001970:	4662      	mov	r2, ip
 8001972:	46a0      	mov	r8, r4
 8001974:	4664      	mov	r4, ip
 8001976:	40d7      	lsrs	r7, r2
 8001978:	464a      	mov	r2, r9
 800197a:	40e1      	lsrs	r1, r4
 800197c:	4644      	mov	r4, r8
 800197e:	1bd2      	subs	r2, r2, r7
 8001980:	4691      	mov	r9, r2
 8001982:	430c      	orrs	r4, r1
 8001984:	4304      	orrs	r4, r0
 8001986:	1b1c      	subs	r4, r3, r4
 8001988:	42a3      	cmp	r3, r4
 800198a:	4192      	sbcs	r2, r2
 800198c:	464b      	mov	r3, r9
 800198e:	4252      	negs	r2, r2
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	469a      	mov	sl, r3
 8001994:	4653      	mov	r3, sl
 8001996:	021b      	lsls	r3, r3, #8
 8001998:	d400      	bmi.n	800199c <__aeabi_dsub+0xbc>
 800199a:	e12b      	b.n	8001bf4 <__aeabi_dsub+0x314>
 800199c:	4653      	mov	r3, sl
 800199e:	025a      	lsls	r2, r3, #9
 80019a0:	0a53      	lsrs	r3, r2, #9
 80019a2:	469a      	mov	sl, r3
 80019a4:	4653      	mov	r3, sl
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d100      	bne.n	80019ac <__aeabi_dsub+0xcc>
 80019aa:	e166      	b.n	8001c7a <__aeabi_dsub+0x39a>
 80019ac:	4650      	mov	r0, sl
 80019ae:	f000 fbc3 	bl	8002138 <__clzsi2>
 80019b2:	0003      	movs	r3, r0
 80019b4:	3b08      	subs	r3, #8
 80019b6:	2220      	movs	r2, #32
 80019b8:	0020      	movs	r0, r4
 80019ba:	1ad2      	subs	r2, r2, r3
 80019bc:	4651      	mov	r1, sl
 80019be:	40d0      	lsrs	r0, r2
 80019c0:	4099      	lsls	r1, r3
 80019c2:	0002      	movs	r2, r0
 80019c4:	409c      	lsls	r4, r3
 80019c6:	430a      	orrs	r2, r1
 80019c8:	429e      	cmp	r6, r3
 80019ca:	dd00      	ble.n	80019ce <__aeabi_dsub+0xee>
 80019cc:	e164      	b.n	8001c98 <__aeabi_dsub+0x3b8>
 80019ce:	1b9b      	subs	r3, r3, r6
 80019d0:	1c59      	adds	r1, r3, #1
 80019d2:	291f      	cmp	r1, #31
 80019d4:	dd00      	ble.n	80019d8 <__aeabi_dsub+0xf8>
 80019d6:	e0fe      	b.n	8001bd6 <__aeabi_dsub+0x2f6>
 80019d8:	2320      	movs	r3, #32
 80019da:	0010      	movs	r0, r2
 80019dc:	0026      	movs	r6, r4
 80019de:	1a5b      	subs	r3, r3, r1
 80019e0:	409c      	lsls	r4, r3
 80019e2:	4098      	lsls	r0, r3
 80019e4:	40ce      	lsrs	r6, r1
 80019e6:	40ca      	lsrs	r2, r1
 80019e8:	1e63      	subs	r3, r4, #1
 80019ea:	419c      	sbcs	r4, r3
 80019ec:	4330      	orrs	r0, r6
 80019ee:	4692      	mov	sl, r2
 80019f0:	2600      	movs	r6, #0
 80019f2:	4304      	orrs	r4, r0
 80019f4:	0763      	lsls	r3, r4, #29
 80019f6:	d009      	beq.n	8001a0c <__aeabi_dsub+0x12c>
 80019f8:	230f      	movs	r3, #15
 80019fa:	4023      	ands	r3, r4
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d005      	beq.n	8001a0c <__aeabi_dsub+0x12c>
 8001a00:	1d23      	adds	r3, r4, #4
 8001a02:	42a3      	cmp	r3, r4
 8001a04:	41a4      	sbcs	r4, r4
 8001a06:	4264      	negs	r4, r4
 8001a08:	44a2      	add	sl, r4
 8001a0a:	001c      	movs	r4, r3
 8001a0c:	4653      	mov	r3, sl
 8001a0e:	021b      	lsls	r3, r3, #8
 8001a10:	d400      	bmi.n	8001a14 <__aeabi_dsub+0x134>
 8001a12:	e0f2      	b.n	8001bfa <__aeabi_dsub+0x31a>
 8001a14:	4b8c      	ldr	r3, [pc, #560]	; (8001c48 <__aeabi_dsub+0x368>)
 8001a16:	3601      	adds	r6, #1
 8001a18:	429e      	cmp	r6, r3
 8001a1a:	d100      	bne.n	8001a1e <__aeabi_dsub+0x13e>
 8001a1c:	e10f      	b.n	8001c3e <__aeabi_dsub+0x35e>
 8001a1e:	4653      	mov	r3, sl
 8001a20:	498a      	ldr	r1, [pc, #552]	; (8001c4c <__aeabi_dsub+0x36c>)
 8001a22:	08e4      	lsrs	r4, r4, #3
 8001a24:	400b      	ands	r3, r1
 8001a26:	0019      	movs	r1, r3
 8001a28:	075b      	lsls	r3, r3, #29
 8001a2a:	4323      	orrs	r3, r4
 8001a2c:	0572      	lsls	r2, r6, #21
 8001a2e:	024c      	lsls	r4, r1, #9
 8001a30:	0b24      	lsrs	r4, r4, #12
 8001a32:	0d52      	lsrs	r2, r2, #21
 8001a34:	0512      	lsls	r2, r2, #20
 8001a36:	4322      	orrs	r2, r4
 8001a38:	07ed      	lsls	r5, r5, #31
 8001a3a:	432a      	orrs	r2, r5
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	0011      	movs	r1, r2
 8001a40:	b003      	add	sp, #12
 8001a42:	bcf0      	pop	{r4, r5, r6, r7}
 8001a44:	46bb      	mov	fp, r7
 8001a46:	46b2      	mov	sl, r6
 8001a48:	46a9      	mov	r9, r5
 8001a4a:	46a0      	mov	r8, r4
 8001a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a4e:	1ab4      	subs	r4, r6, r2
 8001a50:	46a4      	mov	ip, r4
 8001a52:	2c00      	cmp	r4, #0
 8001a54:	dd59      	ble.n	8001b0a <__aeabi_dsub+0x22a>
 8001a56:	2a00      	cmp	r2, #0
 8001a58:	d100      	bne.n	8001a5c <__aeabi_dsub+0x17c>
 8001a5a:	e0b0      	b.n	8001bbe <__aeabi_dsub+0x2de>
 8001a5c:	4556      	cmp	r6, sl
 8001a5e:	d100      	bne.n	8001a62 <__aeabi_dsub+0x182>
 8001a60:	e0fa      	b.n	8001c58 <__aeabi_dsub+0x378>
 8001a62:	2280      	movs	r2, #128	; 0x80
 8001a64:	0412      	lsls	r2, r2, #16
 8001a66:	4317      	orrs	r7, r2
 8001a68:	4662      	mov	r2, ip
 8001a6a:	2a38      	cmp	r2, #56	; 0x38
 8001a6c:	dd00      	ble.n	8001a70 <__aeabi_dsub+0x190>
 8001a6e:	e0d4      	b.n	8001c1a <__aeabi_dsub+0x33a>
 8001a70:	2a1f      	cmp	r2, #31
 8001a72:	dc00      	bgt.n	8001a76 <__aeabi_dsub+0x196>
 8001a74:	e1c0      	b.n	8001df8 <__aeabi_dsub+0x518>
 8001a76:	0039      	movs	r1, r7
 8001a78:	3a20      	subs	r2, #32
 8001a7a:	40d1      	lsrs	r1, r2
 8001a7c:	4662      	mov	r2, ip
 8001a7e:	2a20      	cmp	r2, #32
 8001a80:	d006      	beq.n	8001a90 <__aeabi_dsub+0x1b0>
 8001a82:	4664      	mov	r4, ip
 8001a84:	2240      	movs	r2, #64	; 0x40
 8001a86:	1b12      	subs	r2, r2, r4
 8001a88:	003c      	movs	r4, r7
 8001a8a:	4094      	lsls	r4, r2
 8001a8c:	4304      	orrs	r4, r0
 8001a8e:	9401      	str	r4, [sp, #4]
 8001a90:	9c01      	ldr	r4, [sp, #4]
 8001a92:	1e62      	subs	r2, r4, #1
 8001a94:	4194      	sbcs	r4, r2
 8001a96:	430c      	orrs	r4, r1
 8001a98:	e0c3      	b.n	8001c22 <__aeabi_dsub+0x342>
 8001a9a:	003c      	movs	r4, r7
 8001a9c:	4304      	orrs	r4, r0
 8001a9e:	d02b      	beq.n	8001af8 <__aeabi_dsub+0x218>
 8001aa0:	468b      	mov	fp, r1
 8001aa2:	428d      	cmp	r5, r1
 8001aa4:	d02e      	beq.n	8001b04 <__aeabi_dsub+0x224>
 8001aa6:	4c6a      	ldr	r4, [pc, #424]	; (8001c50 <__aeabi_dsub+0x370>)
 8001aa8:	46a4      	mov	ip, r4
 8001aaa:	44b4      	add	ip, r6
 8001aac:	4664      	mov	r4, ip
 8001aae:	2c00      	cmp	r4, #0
 8001ab0:	d05f      	beq.n	8001b72 <__aeabi_dsub+0x292>
 8001ab2:	1b94      	subs	r4, r2, r6
 8001ab4:	46a4      	mov	ip, r4
 8001ab6:	2e00      	cmp	r6, #0
 8001ab8:	d000      	beq.n	8001abc <__aeabi_dsub+0x1dc>
 8001aba:	e120      	b.n	8001cfe <__aeabi_dsub+0x41e>
 8001abc:	464c      	mov	r4, r9
 8001abe:	431c      	orrs	r4, r3
 8001ac0:	d100      	bne.n	8001ac4 <__aeabi_dsub+0x1e4>
 8001ac2:	e1c7      	b.n	8001e54 <__aeabi_dsub+0x574>
 8001ac4:	4661      	mov	r1, ip
 8001ac6:	1e4c      	subs	r4, r1, #1
 8001ac8:	2901      	cmp	r1, #1
 8001aca:	d100      	bne.n	8001ace <__aeabi_dsub+0x1ee>
 8001acc:	e223      	b.n	8001f16 <__aeabi_dsub+0x636>
 8001ace:	4d5e      	ldr	r5, [pc, #376]	; (8001c48 <__aeabi_dsub+0x368>)
 8001ad0:	45ac      	cmp	ip, r5
 8001ad2:	d100      	bne.n	8001ad6 <__aeabi_dsub+0x1f6>
 8001ad4:	e1d8      	b.n	8001e88 <__aeabi_dsub+0x5a8>
 8001ad6:	46a4      	mov	ip, r4
 8001ad8:	e11a      	b.n	8001d10 <__aeabi_dsub+0x430>
 8001ada:	003a      	movs	r2, r7
 8001adc:	4302      	orrs	r2, r0
 8001ade:	d100      	bne.n	8001ae2 <__aeabi_dsub+0x202>
 8001ae0:	e0e4      	b.n	8001cac <__aeabi_dsub+0x3cc>
 8001ae2:	0022      	movs	r2, r4
 8001ae4:	3a01      	subs	r2, #1
 8001ae6:	2c01      	cmp	r4, #1
 8001ae8:	d100      	bne.n	8001aec <__aeabi_dsub+0x20c>
 8001aea:	e1c3      	b.n	8001e74 <__aeabi_dsub+0x594>
 8001aec:	4956      	ldr	r1, [pc, #344]	; (8001c48 <__aeabi_dsub+0x368>)
 8001aee:	428c      	cmp	r4, r1
 8001af0:	d100      	bne.n	8001af4 <__aeabi_dsub+0x214>
 8001af2:	e0b1      	b.n	8001c58 <__aeabi_dsub+0x378>
 8001af4:	4694      	mov	ip, r2
 8001af6:	e72b      	b.n	8001950 <__aeabi_dsub+0x70>
 8001af8:	2401      	movs	r4, #1
 8001afa:	4061      	eors	r1, r4
 8001afc:	468b      	mov	fp, r1
 8001afe:	428d      	cmp	r5, r1
 8001b00:	d000      	beq.n	8001b04 <__aeabi_dsub+0x224>
 8001b02:	e716      	b.n	8001932 <__aeabi_dsub+0x52>
 8001b04:	4952      	ldr	r1, [pc, #328]	; (8001c50 <__aeabi_dsub+0x370>)
 8001b06:	468c      	mov	ip, r1
 8001b08:	44b4      	add	ip, r6
 8001b0a:	4664      	mov	r4, ip
 8001b0c:	2c00      	cmp	r4, #0
 8001b0e:	d100      	bne.n	8001b12 <__aeabi_dsub+0x232>
 8001b10:	e0d3      	b.n	8001cba <__aeabi_dsub+0x3da>
 8001b12:	1b91      	subs	r1, r2, r6
 8001b14:	468c      	mov	ip, r1
 8001b16:	2e00      	cmp	r6, #0
 8001b18:	d100      	bne.n	8001b1c <__aeabi_dsub+0x23c>
 8001b1a:	e15e      	b.n	8001dda <__aeabi_dsub+0x4fa>
 8001b1c:	494a      	ldr	r1, [pc, #296]	; (8001c48 <__aeabi_dsub+0x368>)
 8001b1e:	428a      	cmp	r2, r1
 8001b20:	d100      	bne.n	8001b24 <__aeabi_dsub+0x244>
 8001b22:	e1be      	b.n	8001ea2 <__aeabi_dsub+0x5c2>
 8001b24:	2180      	movs	r1, #128	; 0x80
 8001b26:	464c      	mov	r4, r9
 8001b28:	0409      	lsls	r1, r1, #16
 8001b2a:	430c      	orrs	r4, r1
 8001b2c:	46a1      	mov	r9, r4
 8001b2e:	4661      	mov	r1, ip
 8001b30:	2938      	cmp	r1, #56	; 0x38
 8001b32:	dd00      	ble.n	8001b36 <__aeabi_dsub+0x256>
 8001b34:	e1ba      	b.n	8001eac <__aeabi_dsub+0x5cc>
 8001b36:	291f      	cmp	r1, #31
 8001b38:	dd00      	ble.n	8001b3c <__aeabi_dsub+0x25c>
 8001b3a:	e227      	b.n	8001f8c <__aeabi_dsub+0x6ac>
 8001b3c:	2420      	movs	r4, #32
 8001b3e:	1a64      	subs	r4, r4, r1
 8001b40:	4649      	mov	r1, r9
 8001b42:	40a1      	lsls	r1, r4
 8001b44:	001e      	movs	r6, r3
 8001b46:	4688      	mov	r8, r1
 8001b48:	4661      	mov	r1, ip
 8001b4a:	40a3      	lsls	r3, r4
 8001b4c:	40ce      	lsrs	r6, r1
 8001b4e:	4641      	mov	r1, r8
 8001b50:	1e5c      	subs	r4, r3, #1
 8001b52:	41a3      	sbcs	r3, r4
 8001b54:	4331      	orrs	r1, r6
 8001b56:	4319      	orrs	r1, r3
 8001b58:	000c      	movs	r4, r1
 8001b5a:	4663      	mov	r3, ip
 8001b5c:	4649      	mov	r1, r9
 8001b5e:	40d9      	lsrs	r1, r3
 8001b60:	187f      	adds	r7, r7, r1
 8001b62:	1824      	adds	r4, r4, r0
 8001b64:	4284      	cmp	r4, r0
 8001b66:	419b      	sbcs	r3, r3
 8001b68:	425b      	negs	r3, r3
 8001b6a:	469a      	mov	sl, r3
 8001b6c:	0016      	movs	r6, r2
 8001b6e:	44ba      	add	sl, r7
 8001b70:	e05d      	b.n	8001c2e <__aeabi_dsub+0x34e>
 8001b72:	4c38      	ldr	r4, [pc, #224]	; (8001c54 <__aeabi_dsub+0x374>)
 8001b74:	1c72      	adds	r2, r6, #1
 8001b76:	4222      	tst	r2, r4
 8001b78:	d000      	beq.n	8001b7c <__aeabi_dsub+0x29c>
 8001b7a:	e0df      	b.n	8001d3c <__aeabi_dsub+0x45c>
 8001b7c:	464a      	mov	r2, r9
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	2e00      	cmp	r6, #0
 8001b82:	d000      	beq.n	8001b86 <__aeabi_dsub+0x2a6>
 8001b84:	e15c      	b.n	8001e40 <__aeabi_dsub+0x560>
 8001b86:	2a00      	cmp	r2, #0
 8001b88:	d100      	bne.n	8001b8c <__aeabi_dsub+0x2ac>
 8001b8a:	e1cf      	b.n	8001f2c <__aeabi_dsub+0x64c>
 8001b8c:	003a      	movs	r2, r7
 8001b8e:	4302      	orrs	r2, r0
 8001b90:	d100      	bne.n	8001b94 <__aeabi_dsub+0x2b4>
 8001b92:	e17f      	b.n	8001e94 <__aeabi_dsub+0x5b4>
 8001b94:	1a1c      	subs	r4, r3, r0
 8001b96:	464a      	mov	r2, r9
 8001b98:	42a3      	cmp	r3, r4
 8001b9a:	4189      	sbcs	r1, r1
 8001b9c:	1bd2      	subs	r2, r2, r7
 8001b9e:	4249      	negs	r1, r1
 8001ba0:	1a52      	subs	r2, r2, r1
 8001ba2:	4692      	mov	sl, r2
 8001ba4:	0212      	lsls	r2, r2, #8
 8001ba6:	d400      	bmi.n	8001baa <__aeabi_dsub+0x2ca>
 8001ba8:	e20a      	b.n	8001fc0 <__aeabi_dsub+0x6e0>
 8001baa:	1ac4      	subs	r4, r0, r3
 8001bac:	42a0      	cmp	r0, r4
 8001bae:	4180      	sbcs	r0, r0
 8001bb0:	464b      	mov	r3, r9
 8001bb2:	4240      	negs	r0, r0
 8001bb4:	1aff      	subs	r7, r7, r3
 8001bb6:	1a3b      	subs	r3, r7, r0
 8001bb8:	469a      	mov	sl, r3
 8001bba:	465d      	mov	r5, fp
 8001bbc:	e71a      	b.n	80019f4 <__aeabi_dsub+0x114>
 8001bbe:	003a      	movs	r2, r7
 8001bc0:	4302      	orrs	r2, r0
 8001bc2:	d073      	beq.n	8001cac <__aeabi_dsub+0x3cc>
 8001bc4:	0022      	movs	r2, r4
 8001bc6:	3a01      	subs	r2, #1
 8001bc8:	2c01      	cmp	r4, #1
 8001bca:	d100      	bne.n	8001bce <__aeabi_dsub+0x2ee>
 8001bcc:	e0cb      	b.n	8001d66 <__aeabi_dsub+0x486>
 8001bce:	4554      	cmp	r4, sl
 8001bd0:	d042      	beq.n	8001c58 <__aeabi_dsub+0x378>
 8001bd2:	4694      	mov	ip, r2
 8001bd4:	e748      	b.n	8001a68 <__aeabi_dsub+0x188>
 8001bd6:	0010      	movs	r0, r2
 8001bd8:	3b1f      	subs	r3, #31
 8001bda:	40d8      	lsrs	r0, r3
 8001bdc:	2920      	cmp	r1, #32
 8001bde:	d003      	beq.n	8001be8 <__aeabi_dsub+0x308>
 8001be0:	2340      	movs	r3, #64	; 0x40
 8001be2:	1a5b      	subs	r3, r3, r1
 8001be4:	409a      	lsls	r2, r3
 8001be6:	4314      	orrs	r4, r2
 8001be8:	1e63      	subs	r3, r4, #1
 8001bea:	419c      	sbcs	r4, r3
 8001bec:	2300      	movs	r3, #0
 8001bee:	2600      	movs	r6, #0
 8001bf0:	469a      	mov	sl, r3
 8001bf2:	4304      	orrs	r4, r0
 8001bf4:	0763      	lsls	r3, r4, #29
 8001bf6:	d000      	beq.n	8001bfa <__aeabi_dsub+0x31a>
 8001bf8:	e6fe      	b.n	80019f8 <__aeabi_dsub+0x118>
 8001bfa:	4652      	mov	r2, sl
 8001bfc:	08e3      	lsrs	r3, r4, #3
 8001bfe:	0752      	lsls	r2, r2, #29
 8001c00:	4313      	orrs	r3, r2
 8001c02:	4652      	mov	r2, sl
 8001c04:	46b4      	mov	ip, r6
 8001c06:	08d2      	lsrs	r2, r2, #3
 8001c08:	490f      	ldr	r1, [pc, #60]	; (8001c48 <__aeabi_dsub+0x368>)
 8001c0a:	458c      	cmp	ip, r1
 8001c0c:	d02a      	beq.n	8001c64 <__aeabi_dsub+0x384>
 8001c0e:	0312      	lsls	r2, r2, #12
 8001c10:	0b14      	lsrs	r4, r2, #12
 8001c12:	4662      	mov	r2, ip
 8001c14:	0552      	lsls	r2, r2, #21
 8001c16:	0d52      	lsrs	r2, r2, #21
 8001c18:	e70c      	b.n	8001a34 <__aeabi_dsub+0x154>
 8001c1a:	003c      	movs	r4, r7
 8001c1c:	4304      	orrs	r4, r0
 8001c1e:	1e62      	subs	r2, r4, #1
 8001c20:	4194      	sbcs	r4, r2
 8001c22:	18e4      	adds	r4, r4, r3
 8001c24:	429c      	cmp	r4, r3
 8001c26:	4192      	sbcs	r2, r2
 8001c28:	4252      	negs	r2, r2
 8001c2a:	444a      	add	r2, r9
 8001c2c:	4692      	mov	sl, r2
 8001c2e:	4653      	mov	r3, sl
 8001c30:	021b      	lsls	r3, r3, #8
 8001c32:	d5df      	bpl.n	8001bf4 <__aeabi_dsub+0x314>
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <__aeabi_dsub+0x368>)
 8001c36:	3601      	adds	r6, #1
 8001c38:	429e      	cmp	r6, r3
 8001c3a:	d000      	beq.n	8001c3e <__aeabi_dsub+0x35e>
 8001c3c:	e0a0      	b.n	8001d80 <__aeabi_dsub+0x4a0>
 8001c3e:	0032      	movs	r2, r6
 8001c40:	2400      	movs	r4, #0
 8001c42:	2300      	movs	r3, #0
 8001c44:	e6f6      	b.n	8001a34 <__aeabi_dsub+0x154>
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	000007ff 	.word	0x000007ff
 8001c4c:	ff7fffff 	.word	0xff7fffff
 8001c50:	fffff801 	.word	0xfffff801
 8001c54:	000007fe 	.word	0x000007fe
 8001c58:	08db      	lsrs	r3, r3, #3
 8001c5a:	464a      	mov	r2, r9
 8001c5c:	0752      	lsls	r2, r2, #29
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	464a      	mov	r2, r9
 8001c62:	08d2      	lsrs	r2, r2, #3
 8001c64:	0019      	movs	r1, r3
 8001c66:	4311      	orrs	r1, r2
 8001c68:	d100      	bne.n	8001c6c <__aeabi_dsub+0x38c>
 8001c6a:	e1b5      	b.n	8001fd8 <__aeabi_dsub+0x6f8>
 8001c6c:	2480      	movs	r4, #128	; 0x80
 8001c6e:	0324      	lsls	r4, r4, #12
 8001c70:	4314      	orrs	r4, r2
 8001c72:	0324      	lsls	r4, r4, #12
 8001c74:	4ad5      	ldr	r2, [pc, #852]	; (8001fcc <__aeabi_dsub+0x6ec>)
 8001c76:	0b24      	lsrs	r4, r4, #12
 8001c78:	e6dc      	b.n	8001a34 <__aeabi_dsub+0x154>
 8001c7a:	0020      	movs	r0, r4
 8001c7c:	f000 fa5c 	bl	8002138 <__clzsi2>
 8001c80:	0003      	movs	r3, r0
 8001c82:	3318      	adds	r3, #24
 8001c84:	2b1f      	cmp	r3, #31
 8001c86:	dc00      	bgt.n	8001c8a <__aeabi_dsub+0x3aa>
 8001c88:	e695      	b.n	80019b6 <__aeabi_dsub+0xd6>
 8001c8a:	0022      	movs	r2, r4
 8001c8c:	3808      	subs	r0, #8
 8001c8e:	4082      	lsls	r2, r0
 8001c90:	2400      	movs	r4, #0
 8001c92:	429e      	cmp	r6, r3
 8001c94:	dc00      	bgt.n	8001c98 <__aeabi_dsub+0x3b8>
 8001c96:	e69a      	b.n	80019ce <__aeabi_dsub+0xee>
 8001c98:	1af6      	subs	r6, r6, r3
 8001c9a:	4bcd      	ldr	r3, [pc, #820]	; (8001fd0 <__aeabi_dsub+0x6f0>)
 8001c9c:	401a      	ands	r2, r3
 8001c9e:	4692      	mov	sl, r2
 8001ca0:	e6a8      	b.n	80019f4 <__aeabi_dsub+0x114>
 8001ca2:	003c      	movs	r4, r7
 8001ca4:	4304      	orrs	r4, r0
 8001ca6:	1e62      	subs	r2, r4, #1
 8001ca8:	4194      	sbcs	r4, r2
 8001caa:	e66c      	b.n	8001986 <__aeabi_dsub+0xa6>
 8001cac:	464a      	mov	r2, r9
 8001cae:	08db      	lsrs	r3, r3, #3
 8001cb0:	0752      	lsls	r2, r2, #29
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	464a      	mov	r2, r9
 8001cb6:	08d2      	lsrs	r2, r2, #3
 8001cb8:	e7a6      	b.n	8001c08 <__aeabi_dsub+0x328>
 8001cba:	4cc6      	ldr	r4, [pc, #792]	; (8001fd4 <__aeabi_dsub+0x6f4>)
 8001cbc:	1c72      	adds	r2, r6, #1
 8001cbe:	4222      	tst	r2, r4
 8001cc0:	d000      	beq.n	8001cc4 <__aeabi_dsub+0x3e4>
 8001cc2:	e0ac      	b.n	8001e1e <__aeabi_dsub+0x53e>
 8001cc4:	464a      	mov	r2, r9
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	2e00      	cmp	r6, #0
 8001cca:	d000      	beq.n	8001cce <__aeabi_dsub+0x3ee>
 8001ccc:	e105      	b.n	8001eda <__aeabi_dsub+0x5fa>
 8001cce:	2a00      	cmp	r2, #0
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_dsub+0x3f4>
 8001cd2:	e156      	b.n	8001f82 <__aeabi_dsub+0x6a2>
 8001cd4:	003a      	movs	r2, r7
 8001cd6:	4302      	orrs	r2, r0
 8001cd8:	d100      	bne.n	8001cdc <__aeabi_dsub+0x3fc>
 8001cda:	e0db      	b.n	8001e94 <__aeabi_dsub+0x5b4>
 8001cdc:	181c      	adds	r4, r3, r0
 8001cde:	429c      	cmp	r4, r3
 8001ce0:	419b      	sbcs	r3, r3
 8001ce2:	444f      	add	r7, r9
 8001ce4:	46ba      	mov	sl, r7
 8001ce6:	425b      	negs	r3, r3
 8001ce8:	449a      	add	sl, r3
 8001cea:	4653      	mov	r3, sl
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	d400      	bmi.n	8001cf2 <__aeabi_dsub+0x412>
 8001cf0:	e780      	b.n	8001bf4 <__aeabi_dsub+0x314>
 8001cf2:	4652      	mov	r2, sl
 8001cf4:	4bb6      	ldr	r3, [pc, #728]	; (8001fd0 <__aeabi_dsub+0x6f0>)
 8001cf6:	2601      	movs	r6, #1
 8001cf8:	401a      	ands	r2, r3
 8001cfa:	4692      	mov	sl, r2
 8001cfc:	e77a      	b.n	8001bf4 <__aeabi_dsub+0x314>
 8001cfe:	4cb3      	ldr	r4, [pc, #716]	; (8001fcc <__aeabi_dsub+0x6ec>)
 8001d00:	42a2      	cmp	r2, r4
 8001d02:	d100      	bne.n	8001d06 <__aeabi_dsub+0x426>
 8001d04:	e0c0      	b.n	8001e88 <__aeabi_dsub+0x5a8>
 8001d06:	2480      	movs	r4, #128	; 0x80
 8001d08:	464d      	mov	r5, r9
 8001d0a:	0424      	lsls	r4, r4, #16
 8001d0c:	4325      	orrs	r5, r4
 8001d0e:	46a9      	mov	r9, r5
 8001d10:	4664      	mov	r4, ip
 8001d12:	2c38      	cmp	r4, #56	; 0x38
 8001d14:	dc53      	bgt.n	8001dbe <__aeabi_dsub+0x4de>
 8001d16:	4661      	mov	r1, ip
 8001d18:	2c1f      	cmp	r4, #31
 8001d1a:	dd00      	ble.n	8001d1e <__aeabi_dsub+0x43e>
 8001d1c:	e0cd      	b.n	8001eba <__aeabi_dsub+0x5da>
 8001d1e:	2520      	movs	r5, #32
 8001d20:	001e      	movs	r6, r3
 8001d22:	1b2d      	subs	r5, r5, r4
 8001d24:	464c      	mov	r4, r9
 8001d26:	40ab      	lsls	r3, r5
 8001d28:	40ac      	lsls	r4, r5
 8001d2a:	40ce      	lsrs	r6, r1
 8001d2c:	1e5d      	subs	r5, r3, #1
 8001d2e:	41ab      	sbcs	r3, r5
 8001d30:	4334      	orrs	r4, r6
 8001d32:	4323      	orrs	r3, r4
 8001d34:	464c      	mov	r4, r9
 8001d36:	40cc      	lsrs	r4, r1
 8001d38:	1b3f      	subs	r7, r7, r4
 8001d3a:	e045      	b.n	8001dc8 <__aeabi_dsub+0x4e8>
 8001d3c:	464a      	mov	r2, r9
 8001d3e:	1a1c      	subs	r4, r3, r0
 8001d40:	1bd1      	subs	r1, r2, r7
 8001d42:	42a3      	cmp	r3, r4
 8001d44:	4192      	sbcs	r2, r2
 8001d46:	4252      	negs	r2, r2
 8001d48:	4692      	mov	sl, r2
 8001d4a:	000a      	movs	r2, r1
 8001d4c:	4651      	mov	r1, sl
 8001d4e:	1a52      	subs	r2, r2, r1
 8001d50:	4692      	mov	sl, r2
 8001d52:	0212      	lsls	r2, r2, #8
 8001d54:	d500      	bpl.n	8001d58 <__aeabi_dsub+0x478>
 8001d56:	e083      	b.n	8001e60 <__aeabi_dsub+0x580>
 8001d58:	4653      	mov	r3, sl
 8001d5a:	4323      	orrs	r3, r4
 8001d5c:	d000      	beq.n	8001d60 <__aeabi_dsub+0x480>
 8001d5e:	e621      	b.n	80019a4 <__aeabi_dsub+0xc4>
 8001d60:	2200      	movs	r2, #0
 8001d62:	2500      	movs	r5, #0
 8001d64:	e753      	b.n	8001c0e <__aeabi_dsub+0x32e>
 8001d66:	181c      	adds	r4, r3, r0
 8001d68:	429c      	cmp	r4, r3
 8001d6a:	419b      	sbcs	r3, r3
 8001d6c:	444f      	add	r7, r9
 8001d6e:	46ba      	mov	sl, r7
 8001d70:	425b      	negs	r3, r3
 8001d72:	449a      	add	sl, r3
 8001d74:	4653      	mov	r3, sl
 8001d76:	2601      	movs	r6, #1
 8001d78:	021b      	lsls	r3, r3, #8
 8001d7a:	d400      	bmi.n	8001d7e <__aeabi_dsub+0x49e>
 8001d7c:	e73a      	b.n	8001bf4 <__aeabi_dsub+0x314>
 8001d7e:	2602      	movs	r6, #2
 8001d80:	4652      	mov	r2, sl
 8001d82:	4b93      	ldr	r3, [pc, #588]	; (8001fd0 <__aeabi_dsub+0x6f0>)
 8001d84:	2101      	movs	r1, #1
 8001d86:	401a      	ands	r2, r3
 8001d88:	0013      	movs	r3, r2
 8001d8a:	4021      	ands	r1, r4
 8001d8c:	0862      	lsrs	r2, r4, #1
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	07dc      	lsls	r4, r3, #31
 8001d92:	085b      	lsrs	r3, r3, #1
 8001d94:	469a      	mov	sl, r3
 8001d96:	4314      	orrs	r4, r2
 8001d98:	e62c      	b.n	80019f4 <__aeabi_dsub+0x114>
 8001d9a:	0039      	movs	r1, r7
 8001d9c:	3a20      	subs	r2, #32
 8001d9e:	40d1      	lsrs	r1, r2
 8001da0:	4662      	mov	r2, ip
 8001da2:	2a20      	cmp	r2, #32
 8001da4:	d006      	beq.n	8001db4 <__aeabi_dsub+0x4d4>
 8001da6:	4664      	mov	r4, ip
 8001da8:	2240      	movs	r2, #64	; 0x40
 8001daa:	1b12      	subs	r2, r2, r4
 8001dac:	003c      	movs	r4, r7
 8001dae:	4094      	lsls	r4, r2
 8001db0:	4304      	orrs	r4, r0
 8001db2:	9401      	str	r4, [sp, #4]
 8001db4:	9c01      	ldr	r4, [sp, #4]
 8001db6:	1e62      	subs	r2, r4, #1
 8001db8:	4194      	sbcs	r4, r2
 8001dba:	430c      	orrs	r4, r1
 8001dbc:	e5e3      	b.n	8001986 <__aeabi_dsub+0xa6>
 8001dbe:	4649      	mov	r1, r9
 8001dc0:	4319      	orrs	r1, r3
 8001dc2:	000b      	movs	r3, r1
 8001dc4:	1e5c      	subs	r4, r3, #1
 8001dc6:	41a3      	sbcs	r3, r4
 8001dc8:	1ac4      	subs	r4, r0, r3
 8001dca:	42a0      	cmp	r0, r4
 8001dcc:	419b      	sbcs	r3, r3
 8001dce:	425b      	negs	r3, r3
 8001dd0:	1afb      	subs	r3, r7, r3
 8001dd2:	469a      	mov	sl, r3
 8001dd4:	465d      	mov	r5, fp
 8001dd6:	0016      	movs	r6, r2
 8001dd8:	e5dc      	b.n	8001994 <__aeabi_dsub+0xb4>
 8001dda:	4649      	mov	r1, r9
 8001ddc:	4319      	orrs	r1, r3
 8001dde:	d100      	bne.n	8001de2 <__aeabi_dsub+0x502>
 8001de0:	e0ae      	b.n	8001f40 <__aeabi_dsub+0x660>
 8001de2:	4661      	mov	r1, ip
 8001de4:	4664      	mov	r4, ip
 8001de6:	3901      	subs	r1, #1
 8001de8:	2c01      	cmp	r4, #1
 8001dea:	d100      	bne.n	8001dee <__aeabi_dsub+0x50e>
 8001dec:	e0e0      	b.n	8001fb0 <__aeabi_dsub+0x6d0>
 8001dee:	4c77      	ldr	r4, [pc, #476]	; (8001fcc <__aeabi_dsub+0x6ec>)
 8001df0:	45a4      	cmp	ip, r4
 8001df2:	d056      	beq.n	8001ea2 <__aeabi_dsub+0x5c2>
 8001df4:	468c      	mov	ip, r1
 8001df6:	e69a      	b.n	8001b2e <__aeabi_dsub+0x24e>
 8001df8:	4661      	mov	r1, ip
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	003c      	movs	r4, r7
 8001dfe:	1a52      	subs	r2, r2, r1
 8001e00:	4094      	lsls	r4, r2
 8001e02:	0001      	movs	r1, r0
 8001e04:	4090      	lsls	r0, r2
 8001e06:	46a0      	mov	r8, r4
 8001e08:	4664      	mov	r4, ip
 8001e0a:	1e42      	subs	r2, r0, #1
 8001e0c:	4190      	sbcs	r0, r2
 8001e0e:	4662      	mov	r2, ip
 8001e10:	40e1      	lsrs	r1, r4
 8001e12:	4644      	mov	r4, r8
 8001e14:	40d7      	lsrs	r7, r2
 8001e16:	430c      	orrs	r4, r1
 8001e18:	4304      	orrs	r4, r0
 8001e1a:	44b9      	add	r9, r7
 8001e1c:	e701      	b.n	8001c22 <__aeabi_dsub+0x342>
 8001e1e:	496b      	ldr	r1, [pc, #428]	; (8001fcc <__aeabi_dsub+0x6ec>)
 8001e20:	428a      	cmp	r2, r1
 8001e22:	d100      	bne.n	8001e26 <__aeabi_dsub+0x546>
 8001e24:	e70c      	b.n	8001c40 <__aeabi_dsub+0x360>
 8001e26:	1818      	adds	r0, r3, r0
 8001e28:	4298      	cmp	r0, r3
 8001e2a:	419b      	sbcs	r3, r3
 8001e2c:	444f      	add	r7, r9
 8001e2e:	425b      	negs	r3, r3
 8001e30:	18fb      	adds	r3, r7, r3
 8001e32:	07dc      	lsls	r4, r3, #31
 8001e34:	0840      	lsrs	r0, r0, #1
 8001e36:	085b      	lsrs	r3, r3, #1
 8001e38:	469a      	mov	sl, r3
 8001e3a:	0016      	movs	r6, r2
 8001e3c:	4304      	orrs	r4, r0
 8001e3e:	e6d9      	b.n	8001bf4 <__aeabi_dsub+0x314>
 8001e40:	2a00      	cmp	r2, #0
 8001e42:	d000      	beq.n	8001e46 <__aeabi_dsub+0x566>
 8001e44:	e081      	b.n	8001f4a <__aeabi_dsub+0x66a>
 8001e46:	003b      	movs	r3, r7
 8001e48:	4303      	orrs	r3, r0
 8001e4a:	d11d      	bne.n	8001e88 <__aeabi_dsub+0x5a8>
 8001e4c:	2280      	movs	r2, #128	; 0x80
 8001e4e:	2500      	movs	r5, #0
 8001e50:	0312      	lsls	r2, r2, #12
 8001e52:	e70b      	b.n	8001c6c <__aeabi_dsub+0x38c>
 8001e54:	08c0      	lsrs	r0, r0, #3
 8001e56:	077b      	lsls	r3, r7, #29
 8001e58:	465d      	mov	r5, fp
 8001e5a:	4303      	orrs	r3, r0
 8001e5c:	08fa      	lsrs	r2, r7, #3
 8001e5e:	e6d3      	b.n	8001c08 <__aeabi_dsub+0x328>
 8001e60:	1ac4      	subs	r4, r0, r3
 8001e62:	42a0      	cmp	r0, r4
 8001e64:	4180      	sbcs	r0, r0
 8001e66:	464b      	mov	r3, r9
 8001e68:	4240      	negs	r0, r0
 8001e6a:	1aff      	subs	r7, r7, r3
 8001e6c:	1a3b      	subs	r3, r7, r0
 8001e6e:	469a      	mov	sl, r3
 8001e70:	465d      	mov	r5, fp
 8001e72:	e597      	b.n	80019a4 <__aeabi_dsub+0xc4>
 8001e74:	1a1c      	subs	r4, r3, r0
 8001e76:	464a      	mov	r2, r9
 8001e78:	42a3      	cmp	r3, r4
 8001e7a:	419b      	sbcs	r3, r3
 8001e7c:	1bd7      	subs	r7, r2, r7
 8001e7e:	425b      	negs	r3, r3
 8001e80:	1afb      	subs	r3, r7, r3
 8001e82:	469a      	mov	sl, r3
 8001e84:	2601      	movs	r6, #1
 8001e86:	e585      	b.n	8001994 <__aeabi_dsub+0xb4>
 8001e88:	08c0      	lsrs	r0, r0, #3
 8001e8a:	077b      	lsls	r3, r7, #29
 8001e8c:	465d      	mov	r5, fp
 8001e8e:	4303      	orrs	r3, r0
 8001e90:	08fa      	lsrs	r2, r7, #3
 8001e92:	e6e7      	b.n	8001c64 <__aeabi_dsub+0x384>
 8001e94:	464a      	mov	r2, r9
 8001e96:	08db      	lsrs	r3, r3, #3
 8001e98:	0752      	lsls	r2, r2, #29
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	464a      	mov	r2, r9
 8001e9e:	08d2      	lsrs	r2, r2, #3
 8001ea0:	e6b5      	b.n	8001c0e <__aeabi_dsub+0x32e>
 8001ea2:	08c0      	lsrs	r0, r0, #3
 8001ea4:	077b      	lsls	r3, r7, #29
 8001ea6:	4303      	orrs	r3, r0
 8001ea8:	08fa      	lsrs	r2, r7, #3
 8001eaa:	e6db      	b.n	8001c64 <__aeabi_dsub+0x384>
 8001eac:	4649      	mov	r1, r9
 8001eae:	4319      	orrs	r1, r3
 8001eb0:	000b      	movs	r3, r1
 8001eb2:	1e59      	subs	r1, r3, #1
 8001eb4:	418b      	sbcs	r3, r1
 8001eb6:	001c      	movs	r4, r3
 8001eb8:	e653      	b.n	8001b62 <__aeabi_dsub+0x282>
 8001eba:	464d      	mov	r5, r9
 8001ebc:	3c20      	subs	r4, #32
 8001ebe:	40e5      	lsrs	r5, r4
 8001ec0:	2920      	cmp	r1, #32
 8001ec2:	d005      	beq.n	8001ed0 <__aeabi_dsub+0x5f0>
 8001ec4:	2440      	movs	r4, #64	; 0x40
 8001ec6:	1a64      	subs	r4, r4, r1
 8001ec8:	4649      	mov	r1, r9
 8001eca:	40a1      	lsls	r1, r4
 8001ecc:	430b      	orrs	r3, r1
 8001ece:	4698      	mov	r8, r3
 8001ed0:	4643      	mov	r3, r8
 8001ed2:	1e5c      	subs	r4, r3, #1
 8001ed4:	41a3      	sbcs	r3, r4
 8001ed6:	432b      	orrs	r3, r5
 8001ed8:	e776      	b.n	8001dc8 <__aeabi_dsub+0x4e8>
 8001eda:	2a00      	cmp	r2, #0
 8001edc:	d0e1      	beq.n	8001ea2 <__aeabi_dsub+0x5c2>
 8001ede:	003a      	movs	r2, r7
 8001ee0:	08db      	lsrs	r3, r3, #3
 8001ee2:	4302      	orrs	r2, r0
 8001ee4:	d100      	bne.n	8001ee8 <__aeabi_dsub+0x608>
 8001ee6:	e6b8      	b.n	8001c5a <__aeabi_dsub+0x37a>
 8001ee8:	464a      	mov	r2, r9
 8001eea:	0752      	lsls	r2, r2, #29
 8001eec:	2480      	movs	r4, #128	; 0x80
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	464a      	mov	r2, r9
 8001ef2:	0324      	lsls	r4, r4, #12
 8001ef4:	08d2      	lsrs	r2, r2, #3
 8001ef6:	4222      	tst	r2, r4
 8001ef8:	d007      	beq.n	8001f0a <__aeabi_dsub+0x62a>
 8001efa:	08fe      	lsrs	r6, r7, #3
 8001efc:	4226      	tst	r6, r4
 8001efe:	d104      	bne.n	8001f0a <__aeabi_dsub+0x62a>
 8001f00:	465d      	mov	r5, fp
 8001f02:	0032      	movs	r2, r6
 8001f04:	08c3      	lsrs	r3, r0, #3
 8001f06:	077f      	lsls	r7, r7, #29
 8001f08:	433b      	orrs	r3, r7
 8001f0a:	0f59      	lsrs	r1, r3, #29
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	0749      	lsls	r1, r1, #29
 8001f10:	08db      	lsrs	r3, r3, #3
 8001f12:	430b      	orrs	r3, r1
 8001f14:	e6a6      	b.n	8001c64 <__aeabi_dsub+0x384>
 8001f16:	1ac4      	subs	r4, r0, r3
 8001f18:	42a0      	cmp	r0, r4
 8001f1a:	4180      	sbcs	r0, r0
 8001f1c:	464b      	mov	r3, r9
 8001f1e:	4240      	negs	r0, r0
 8001f20:	1aff      	subs	r7, r7, r3
 8001f22:	1a3b      	subs	r3, r7, r0
 8001f24:	469a      	mov	sl, r3
 8001f26:	465d      	mov	r5, fp
 8001f28:	2601      	movs	r6, #1
 8001f2a:	e533      	b.n	8001994 <__aeabi_dsub+0xb4>
 8001f2c:	003b      	movs	r3, r7
 8001f2e:	4303      	orrs	r3, r0
 8001f30:	d100      	bne.n	8001f34 <__aeabi_dsub+0x654>
 8001f32:	e715      	b.n	8001d60 <__aeabi_dsub+0x480>
 8001f34:	08c0      	lsrs	r0, r0, #3
 8001f36:	077b      	lsls	r3, r7, #29
 8001f38:	465d      	mov	r5, fp
 8001f3a:	4303      	orrs	r3, r0
 8001f3c:	08fa      	lsrs	r2, r7, #3
 8001f3e:	e666      	b.n	8001c0e <__aeabi_dsub+0x32e>
 8001f40:	08c0      	lsrs	r0, r0, #3
 8001f42:	077b      	lsls	r3, r7, #29
 8001f44:	4303      	orrs	r3, r0
 8001f46:	08fa      	lsrs	r2, r7, #3
 8001f48:	e65e      	b.n	8001c08 <__aeabi_dsub+0x328>
 8001f4a:	003a      	movs	r2, r7
 8001f4c:	08db      	lsrs	r3, r3, #3
 8001f4e:	4302      	orrs	r2, r0
 8001f50:	d100      	bne.n	8001f54 <__aeabi_dsub+0x674>
 8001f52:	e682      	b.n	8001c5a <__aeabi_dsub+0x37a>
 8001f54:	464a      	mov	r2, r9
 8001f56:	0752      	lsls	r2, r2, #29
 8001f58:	2480      	movs	r4, #128	; 0x80
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	464a      	mov	r2, r9
 8001f5e:	0324      	lsls	r4, r4, #12
 8001f60:	08d2      	lsrs	r2, r2, #3
 8001f62:	4222      	tst	r2, r4
 8001f64:	d007      	beq.n	8001f76 <__aeabi_dsub+0x696>
 8001f66:	08fe      	lsrs	r6, r7, #3
 8001f68:	4226      	tst	r6, r4
 8001f6a:	d104      	bne.n	8001f76 <__aeabi_dsub+0x696>
 8001f6c:	465d      	mov	r5, fp
 8001f6e:	0032      	movs	r2, r6
 8001f70:	08c3      	lsrs	r3, r0, #3
 8001f72:	077f      	lsls	r7, r7, #29
 8001f74:	433b      	orrs	r3, r7
 8001f76:	0f59      	lsrs	r1, r3, #29
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	08db      	lsrs	r3, r3, #3
 8001f7c:	0749      	lsls	r1, r1, #29
 8001f7e:	430b      	orrs	r3, r1
 8001f80:	e670      	b.n	8001c64 <__aeabi_dsub+0x384>
 8001f82:	08c0      	lsrs	r0, r0, #3
 8001f84:	077b      	lsls	r3, r7, #29
 8001f86:	4303      	orrs	r3, r0
 8001f88:	08fa      	lsrs	r2, r7, #3
 8001f8a:	e640      	b.n	8001c0e <__aeabi_dsub+0x32e>
 8001f8c:	464c      	mov	r4, r9
 8001f8e:	3920      	subs	r1, #32
 8001f90:	40cc      	lsrs	r4, r1
 8001f92:	4661      	mov	r1, ip
 8001f94:	2920      	cmp	r1, #32
 8001f96:	d006      	beq.n	8001fa6 <__aeabi_dsub+0x6c6>
 8001f98:	4666      	mov	r6, ip
 8001f9a:	2140      	movs	r1, #64	; 0x40
 8001f9c:	1b89      	subs	r1, r1, r6
 8001f9e:	464e      	mov	r6, r9
 8001fa0:	408e      	lsls	r6, r1
 8001fa2:	4333      	orrs	r3, r6
 8001fa4:	4698      	mov	r8, r3
 8001fa6:	4643      	mov	r3, r8
 8001fa8:	1e59      	subs	r1, r3, #1
 8001faa:	418b      	sbcs	r3, r1
 8001fac:	431c      	orrs	r4, r3
 8001fae:	e5d8      	b.n	8001b62 <__aeabi_dsub+0x282>
 8001fb0:	181c      	adds	r4, r3, r0
 8001fb2:	4284      	cmp	r4, r0
 8001fb4:	4180      	sbcs	r0, r0
 8001fb6:	444f      	add	r7, r9
 8001fb8:	46ba      	mov	sl, r7
 8001fba:	4240      	negs	r0, r0
 8001fbc:	4482      	add	sl, r0
 8001fbe:	e6d9      	b.n	8001d74 <__aeabi_dsub+0x494>
 8001fc0:	4653      	mov	r3, sl
 8001fc2:	4323      	orrs	r3, r4
 8001fc4:	d100      	bne.n	8001fc8 <__aeabi_dsub+0x6e8>
 8001fc6:	e6cb      	b.n	8001d60 <__aeabi_dsub+0x480>
 8001fc8:	e614      	b.n	8001bf4 <__aeabi_dsub+0x314>
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	000007ff 	.word	0x000007ff
 8001fd0:	ff7fffff 	.word	0xff7fffff
 8001fd4:	000007fe 	.word	0x000007fe
 8001fd8:	2300      	movs	r3, #0
 8001fda:	4a01      	ldr	r2, [pc, #4]	; (8001fe0 <__aeabi_dsub+0x700>)
 8001fdc:	001c      	movs	r4, r3
 8001fde:	e529      	b.n	8001a34 <__aeabi_dsub+0x154>
 8001fe0:	000007ff 	.word	0x000007ff

08001fe4 <__aeabi_dcmpun>:
 8001fe4:	b570      	push	{r4, r5, r6, lr}
 8001fe6:	0005      	movs	r5, r0
 8001fe8:	480c      	ldr	r0, [pc, #48]	; (800201c <__aeabi_dcmpun+0x38>)
 8001fea:	031c      	lsls	r4, r3, #12
 8001fec:	0016      	movs	r6, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	030a      	lsls	r2, r1, #12
 8001ff2:	0049      	lsls	r1, r1, #1
 8001ff4:	0b12      	lsrs	r2, r2, #12
 8001ff6:	0d49      	lsrs	r1, r1, #21
 8001ff8:	0b24      	lsrs	r4, r4, #12
 8001ffa:	0d5b      	lsrs	r3, r3, #21
 8001ffc:	4281      	cmp	r1, r0
 8001ffe:	d008      	beq.n	8002012 <__aeabi_dcmpun+0x2e>
 8002000:	4a06      	ldr	r2, [pc, #24]	; (800201c <__aeabi_dcmpun+0x38>)
 8002002:	2000      	movs	r0, #0
 8002004:	4293      	cmp	r3, r2
 8002006:	d103      	bne.n	8002010 <__aeabi_dcmpun+0x2c>
 8002008:	0020      	movs	r0, r4
 800200a:	4330      	orrs	r0, r6
 800200c:	1e43      	subs	r3, r0, #1
 800200e:	4198      	sbcs	r0, r3
 8002010:	bd70      	pop	{r4, r5, r6, pc}
 8002012:	2001      	movs	r0, #1
 8002014:	432a      	orrs	r2, r5
 8002016:	d1fb      	bne.n	8002010 <__aeabi_dcmpun+0x2c>
 8002018:	e7f2      	b.n	8002000 <__aeabi_dcmpun+0x1c>
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	000007ff 	.word	0x000007ff

08002020 <__aeabi_d2iz>:
 8002020:	000a      	movs	r2, r1
 8002022:	b530      	push	{r4, r5, lr}
 8002024:	4c13      	ldr	r4, [pc, #76]	; (8002074 <__aeabi_d2iz+0x54>)
 8002026:	0053      	lsls	r3, r2, #1
 8002028:	0309      	lsls	r1, r1, #12
 800202a:	0005      	movs	r5, r0
 800202c:	0b09      	lsrs	r1, r1, #12
 800202e:	2000      	movs	r0, #0
 8002030:	0d5b      	lsrs	r3, r3, #21
 8002032:	0fd2      	lsrs	r2, r2, #31
 8002034:	42a3      	cmp	r3, r4
 8002036:	dd04      	ble.n	8002042 <__aeabi_d2iz+0x22>
 8002038:	480f      	ldr	r0, [pc, #60]	; (8002078 <__aeabi_d2iz+0x58>)
 800203a:	4283      	cmp	r3, r0
 800203c:	dd02      	ble.n	8002044 <__aeabi_d2iz+0x24>
 800203e:	4b0f      	ldr	r3, [pc, #60]	; (800207c <__aeabi_d2iz+0x5c>)
 8002040:	18d0      	adds	r0, r2, r3
 8002042:	bd30      	pop	{r4, r5, pc}
 8002044:	2080      	movs	r0, #128	; 0x80
 8002046:	0340      	lsls	r0, r0, #13
 8002048:	4301      	orrs	r1, r0
 800204a:	480d      	ldr	r0, [pc, #52]	; (8002080 <__aeabi_d2iz+0x60>)
 800204c:	1ac0      	subs	r0, r0, r3
 800204e:	281f      	cmp	r0, #31
 8002050:	dd08      	ble.n	8002064 <__aeabi_d2iz+0x44>
 8002052:	480c      	ldr	r0, [pc, #48]	; (8002084 <__aeabi_d2iz+0x64>)
 8002054:	1ac3      	subs	r3, r0, r3
 8002056:	40d9      	lsrs	r1, r3
 8002058:	000b      	movs	r3, r1
 800205a:	4258      	negs	r0, r3
 800205c:	2a00      	cmp	r2, #0
 800205e:	d1f0      	bne.n	8002042 <__aeabi_d2iz+0x22>
 8002060:	0018      	movs	r0, r3
 8002062:	e7ee      	b.n	8002042 <__aeabi_d2iz+0x22>
 8002064:	4c08      	ldr	r4, [pc, #32]	; (8002088 <__aeabi_d2iz+0x68>)
 8002066:	40c5      	lsrs	r5, r0
 8002068:	46a4      	mov	ip, r4
 800206a:	4463      	add	r3, ip
 800206c:	4099      	lsls	r1, r3
 800206e:	000b      	movs	r3, r1
 8002070:	432b      	orrs	r3, r5
 8002072:	e7f2      	b.n	800205a <__aeabi_d2iz+0x3a>
 8002074:	000003fe 	.word	0x000003fe
 8002078:	0000041d 	.word	0x0000041d
 800207c:	7fffffff 	.word	0x7fffffff
 8002080:	00000433 	.word	0x00000433
 8002084:	00000413 	.word	0x00000413
 8002088:	fffffbed 	.word	0xfffffbed

0800208c <__aeabi_i2d>:
 800208c:	b570      	push	{r4, r5, r6, lr}
 800208e:	2800      	cmp	r0, #0
 8002090:	d016      	beq.n	80020c0 <__aeabi_i2d+0x34>
 8002092:	17c3      	asrs	r3, r0, #31
 8002094:	18c5      	adds	r5, r0, r3
 8002096:	405d      	eors	r5, r3
 8002098:	0fc4      	lsrs	r4, r0, #31
 800209a:	0028      	movs	r0, r5
 800209c:	f000 f84c 	bl	8002138 <__clzsi2>
 80020a0:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <__aeabi_i2d+0x5c>)
 80020a2:	1a1b      	subs	r3, r3, r0
 80020a4:	280a      	cmp	r0, #10
 80020a6:	dc16      	bgt.n	80020d6 <__aeabi_i2d+0x4a>
 80020a8:	0002      	movs	r2, r0
 80020aa:	002e      	movs	r6, r5
 80020ac:	3215      	adds	r2, #21
 80020ae:	4096      	lsls	r6, r2
 80020b0:	220b      	movs	r2, #11
 80020b2:	1a12      	subs	r2, r2, r0
 80020b4:	40d5      	lsrs	r5, r2
 80020b6:	055b      	lsls	r3, r3, #21
 80020b8:	032d      	lsls	r5, r5, #12
 80020ba:	0b2d      	lsrs	r5, r5, #12
 80020bc:	0d5b      	lsrs	r3, r3, #21
 80020be:	e003      	b.n	80020c8 <__aeabi_i2d+0x3c>
 80020c0:	2400      	movs	r4, #0
 80020c2:	2300      	movs	r3, #0
 80020c4:	2500      	movs	r5, #0
 80020c6:	2600      	movs	r6, #0
 80020c8:	051b      	lsls	r3, r3, #20
 80020ca:	432b      	orrs	r3, r5
 80020cc:	07e4      	lsls	r4, r4, #31
 80020ce:	4323      	orrs	r3, r4
 80020d0:	0030      	movs	r0, r6
 80020d2:	0019      	movs	r1, r3
 80020d4:	bd70      	pop	{r4, r5, r6, pc}
 80020d6:	380b      	subs	r0, #11
 80020d8:	4085      	lsls	r5, r0
 80020da:	055b      	lsls	r3, r3, #21
 80020dc:	032d      	lsls	r5, r5, #12
 80020de:	2600      	movs	r6, #0
 80020e0:	0b2d      	lsrs	r5, r5, #12
 80020e2:	0d5b      	lsrs	r3, r3, #21
 80020e4:	e7f0      	b.n	80020c8 <__aeabi_i2d+0x3c>
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	0000041e 	.word	0x0000041e

080020ec <__aeabi_ui2d>:
 80020ec:	b510      	push	{r4, lr}
 80020ee:	1e04      	subs	r4, r0, #0
 80020f0:	d010      	beq.n	8002114 <__aeabi_ui2d+0x28>
 80020f2:	f000 f821 	bl	8002138 <__clzsi2>
 80020f6:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <__aeabi_ui2d+0x48>)
 80020f8:	1a1b      	subs	r3, r3, r0
 80020fa:	280a      	cmp	r0, #10
 80020fc:	dc11      	bgt.n	8002122 <__aeabi_ui2d+0x36>
 80020fe:	220b      	movs	r2, #11
 8002100:	0021      	movs	r1, r4
 8002102:	1a12      	subs	r2, r2, r0
 8002104:	40d1      	lsrs	r1, r2
 8002106:	3015      	adds	r0, #21
 8002108:	030a      	lsls	r2, r1, #12
 800210a:	055b      	lsls	r3, r3, #21
 800210c:	4084      	lsls	r4, r0
 800210e:	0b12      	lsrs	r2, r2, #12
 8002110:	0d5b      	lsrs	r3, r3, #21
 8002112:	e001      	b.n	8002118 <__aeabi_ui2d+0x2c>
 8002114:	2300      	movs	r3, #0
 8002116:	2200      	movs	r2, #0
 8002118:	051b      	lsls	r3, r3, #20
 800211a:	4313      	orrs	r3, r2
 800211c:	0020      	movs	r0, r4
 800211e:	0019      	movs	r1, r3
 8002120:	bd10      	pop	{r4, pc}
 8002122:	0022      	movs	r2, r4
 8002124:	380b      	subs	r0, #11
 8002126:	4082      	lsls	r2, r0
 8002128:	055b      	lsls	r3, r3, #21
 800212a:	0312      	lsls	r2, r2, #12
 800212c:	2400      	movs	r4, #0
 800212e:	0b12      	lsrs	r2, r2, #12
 8002130:	0d5b      	lsrs	r3, r3, #21
 8002132:	e7f1      	b.n	8002118 <__aeabi_ui2d+0x2c>
 8002134:	0000041e 	.word	0x0000041e

08002138 <__clzsi2>:
 8002138:	211c      	movs	r1, #28
 800213a:	2301      	movs	r3, #1
 800213c:	041b      	lsls	r3, r3, #16
 800213e:	4298      	cmp	r0, r3
 8002140:	d301      	bcc.n	8002146 <__clzsi2+0xe>
 8002142:	0c00      	lsrs	r0, r0, #16
 8002144:	3910      	subs	r1, #16
 8002146:	0a1b      	lsrs	r3, r3, #8
 8002148:	4298      	cmp	r0, r3
 800214a:	d301      	bcc.n	8002150 <__clzsi2+0x18>
 800214c:	0a00      	lsrs	r0, r0, #8
 800214e:	3908      	subs	r1, #8
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	4298      	cmp	r0, r3
 8002154:	d301      	bcc.n	800215a <__clzsi2+0x22>
 8002156:	0900      	lsrs	r0, r0, #4
 8002158:	3904      	subs	r1, #4
 800215a:	a202      	add	r2, pc, #8	; (adr r2, 8002164 <__clzsi2+0x2c>)
 800215c:	5c10      	ldrb	r0, [r2, r0]
 800215e:	1840      	adds	r0, r0, r1
 8002160:	4770      	bx	lr
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	02020304 	.word	0x02020304
 8002168:	01010101 	.word	0x01010101
	...

08002174 <main>:
  return Response;
}


int main(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  HAL_Init();
 8002178:	f000 ff74 	bl	8003064 <HAL_Init>
  SystemClock_Config();
 800217c:	f000 f846 	bl	800220c <SystemClock_Config>
  MX_GPIO_Init();
 8002180:	f000 fa76 	bl	8002670 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002184:	f000 fa44 	bl	8002610 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8002188:	f000 f8b8 	bl	80022fc <MX_I2C2_Init>
  MX_TIM6_Init();
 800218c:	f000 f9c8 	bl	8002520 <MX_TIM6_Init>
  MX_TIM14_Init();
 8002190:	f000 f9e8 	bl	8002564 <MX_TIM14_Init>
  MX_CRC_Init();
 8002194:	f000 f892 	bl	80022bc <MX_CRC_Init>
  MX_TIM3_Init();
 8002198:	f000 f948 	bl	800242c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800219c:	f000 fa08 	bl	80025b0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80021a0:	f000 f8ec 	bl	800237c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
      HAL_TIM_Base_Start(&htim1);
 80021a4:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <main+0x84>)
 80021a6:	0018      	movs	r0, r3
 80021a8:	f002 ffdc 	bl	8005164 <HAL_TIM_Base_Start>


      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80021ac:	4b13      	ldr	r3, [pc, #76]	; (80021fc <main+0x88>)
 80021ae:	2104      	movs	r1, #4
 80021b0:	0018      	movs	r0, r3
 80021b2:	f003 f873 	bl	800529c <HAL_TIM_PWM_Start>
          HAL_TIM_Base_Start(&htim6);
 80021b6:	4b12      	ldr	r3, [pc, #72]	; (8002200 <main+0x8c>)
 80021b8:	0018      	movs	r0, r3
 80021ba:	f002 ffd3 	bl	8005164 <HAL_TIM_Base_Start>
          HAL_TIM_Base_Start(&htim14);
 80021be:	4b11      	ldr	r3, [pc, #68]	; (8002204 <main+0x90>)
 80021c0:	0018      	movs	r0, r3
 80021c2:	f002 ffcf 	bl	8005164 <HAL_TIM_Base_Start>

          //We wrote 1 the compare counting for being %50 rate of the (Duty Cycle Duty Cycle oranını %50 olmasi icin compare sayimini 1 olarak yazdik).
            //Counter Period Index is 1 that means this value divides the clock signal by 2( Counter Period indexi 1 yani Clock sinyalini 2 ye bölüyor.)
            //Pwm clock value is = 48 / 2 = 24 MHz (Su anki clock degeri = 48 / 2 = 24MHz osiloskopsuz degeri(para yok olcemedik))
            __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_2,1);
 80021c6:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <main+0x88>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2201      	movs	r2, #1
 80021cc:	639a      	str	r2, [r3, #56]	; 0x38
            // Allumer la LED
              HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80021ce:	2380      	movs	r3, #128	; 0x80
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	480d      	ldr	r0, [pc, #52]	; (8002208 <main+0x94>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	0019      	movs	r1, r3
 80021d8:	f001 fa7f 	bl	80036da <HAL_GPIO_WritePin>

            //OV Camera Settings
            ConfigurePWDNandRESETpins();
 80021dc:	f000 fc04 	bl	80029e8 <ConfigurePWDNandRESETpins>
            //Make little delay for healthy process
            HAL_Delay(1);
 80021e0:	2001      	movs	r0, #1
 80021e2:	f000 ffa3 	bl	800312c <HAL_Delay>
            //Reset all registers
                  ov7670_init();
 80021e6:	f000 faec 	bl	80027c2 <ov7670_init>
                  //Make little delay for healthy process
                  HAL_Delay(1);
 80021ea:	2001      	movs	r0, #1
 80021ec:	f000 ff9e 	bl	800312c <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  GetFramesFromOvCam();
 80021f0:	f000 fb2e 	bl	8002850 <GetFramesFromOvCam>
 80021f4:	e7fc      	b.n	80021f0 <main+0x7c>
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	20000260 	.word	0x20000260
 80021fc:	200002a8 	.word	0x200002a8
 8002200:	200002f0 	.word	0x200002f0
 8002204:	20000338 	.word	0x20000338
 8002208:	48000800 	.word	0x48000800

0800220c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800220c:	b590      	push	{r4, r7, lr}
 800220e:	b095      	sub	sp, #84	; 0x54
 8002210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002212:	2420      	movs	r4, #32
 8002214:	193b      	adds	r3, r7, r4
 8002216:	0018      	movs	r0, r3
 8002218:	2330      	movs	r3, #48	; 0x30
 800221a:	001a      	movs	r2, r3
 800221c:	2100      	movs	r1, #0
 800221e:	f004 ffeb 	bl	80071f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002222:	2310      	movs	r3, #16
 8002224:	18fb      	adds	r3, r7, r3
 8002226:	0018      	movs	r0, r3
 8002228:	2310      	movs	r3, #16
 800222a:	001a      	movs	r2, r3
 800222c:	2100      	movs	r1, #0
 800222e:	f004 ffe3 	bl	80071f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002232:	003b      	movs	r3, r7
 8002234:	0018      	movs	r0, r3
 8002236:	2310      	movs	r3, #16
 8002238:	001a      	movs	r2, r3
 800223a:	2100      	movs	r1, #0
 800223c:	f004 ffdc 	bl	80071f8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002240:	0021      	movs	r1, r4
 8002242:	187b      	adds	r3, r7, r1
 8002244:	2202      	movs	r2, #2
 8002246:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002248:	187b      	adds	r3, r7, r1
 800224a:	2201      	movs	r2, #1
 800224c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800224e:	187b      	adds	r3, r7, r1
 8002250:	2210      	movs	r2, #16
 8002252:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002254:	187b      	adds	r3, r7, r1
 8002256:	2200      	movs	r2, #0
 8002258:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800225a:	187b      	adds	r3, r7, r1
 800225c:	0018      	movs	r0, r3
 800225e:	f002 fa05 	bl	800466c <HAL_RCC_OscConfig>
 8002262:	1e03      	subs	r3, r0, #0
 8002264:	d001      	beq.n	800226a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002266:	f000 faa7 	bl	80027b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800226a:	2110      	movs	r1, #16
 800226c:	187b      	adds	r3, r7, r1
 800226e:	2207      	movs	r2, #7
 8002270:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002272:	187b      	adds	r3, r7, r1
 8002274:	2200      	movs	r2, #0
 8002276:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002278:	187b      	adds	r3, r7, r1
 800227a:	2200      	movs	r2, #0
 800227c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800227e:	187b      	adds	r3, r7, r1
 8002280:	2200      	movs	r2, #0
 8002282:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002284:	187b      	adds	r3, r7, r1
 8002286:	2100      	movs	r1, #0
 8002288:	0018      	movs	r0, r3
 800228a:	f002 fd09 	bl	8004ca0 <HAL_RCC_ClockConfig>
 800228e:	1e03      	subs	r3, r0, #0
 8002290:	d001      	beq.n	8002296 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002292:	f000 fa91 	bl	80027b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002296:	003b      	movs	r3, r7
 8002298:	2201      	movs	r2, #1
 800229a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800229c:	003b      	movs	r3, r7
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022a2:	003b      	movs	r3, r7
 80022a4:	0018      	movs	r0, r3
 80022a6:	f002 fe3f 	bl	8004f28 <HAL_RCCEx_PeriphCLKConfig>
 80022aa:	1e03      	subs	r3, r0, #0
 80022ac:	d001      	beq.n	80022b2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80022ae:	f000 fa83 	bl	80027b8 <Error_Handler>
  }
}
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	46bd      	mov	sp, r7
 80022b6:	b015      	add	sp, #84	; 0x54
 80022b8:	bd90      	pop	{r4, r7, pc}
	...

080022bc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80022c0:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <MX_CRC_Init+0x38>)
 80022c2:	4a0d      	ldr	r2, [pc, #52]	; (80022f8 <MX_CRC_Init+0x3c>)
 80022c4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80022c6:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <MX_CRC_Init+0x38>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	711a      	strb	r2, [r3, #4]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80022cc:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <MX_CRC_Init+0x38>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	60da      	str	r2, [r3, #12]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80022d2:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <MX_CRC_Init+0x38>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	611a      	str	r2, [r3, #16]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80022d8:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <MX_CRC_Init+0x38>)
 80022da:	2201      	movs	r2, #1
 80022dc:	619a      	str	r2, [r3, #24]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80022de:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <MX_CRC_Init+0x38>)
 80022e0:	0018      	movs	r0, r3
 80022e2:	f001 f825 	bl	8003330 <HAL_CRC_Init>
 80022e6:	1e03      	subs	r3, r0, #0
 80022e8:	d001      	beq.n	80022ee <MX_CRC_Init+0x32>
  {
    Error_Handler();
 80022ea:	f000 fa65 	bl	80027b8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	200001f0 	.word	0x200001f0
 80022f8:	40023000 	.word	0x40023000

080022fc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002300:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <MX_I2C2_Init+0x74>)
 8002302:	4a1c      	ldr	r2, [pc, #112]	; (8002374 <MX_I2C2_Init+0x78>)
 8002304:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8002306:	4b1a      	ldr	r3, [pc, #104]	; (8002370 <MX_I2C2_Init+0x74>)
 8002308:	4a1b      	ldr	r2, [pc, #108]	; (8002378 <MX_I2C2_Init+0x7c>)
 800230a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800230c:	4b18      	ldr	r3, [pc, #96]	; (8002370 <MX_I2C2_Init+0x74>)
 800230e:	2200      	movs	r2, #0
 8002310:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002312:	4b17      	ldr	r3, [pc, #92]	; (8002370 <MX_I2C2_Init+0x74>)
 8002314:	2201      	movs	r2, #1
 8002316:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002318:	4b15      	ldr	r3, [pc, #84]	; (8002370 <MX_I2C2_Init+0x74>)
 800231a:	2200      	movs	r2, #0
 800231c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800231e:	4b14      	ldr	r3, [pc, #80]	; (8002370 <MX_I2C2_Init+0x74>)
 8002320:	2200      	movs	r2, #0
 8002322:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002324:	4b12      	ldr	r3, [pc, #72]	; (8002370 <MX_I2C2_Init+0x74>)
 8002326:	2200      	movs	r2, #0
 8002328:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800232a:	4b11      	ldr	r3, [pc, #68]	; (8002370 <MX_I2C2_Init+0x74>)
 800232c:	2200      	movs	r2, #0
 800232e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002330:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <MX_I2C2_Init+0x74>)
 8002332:	2200      	movs	r2, #0
 8002334:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <MX_I2C2_Init+0x74>)
 8002338:	0018      	movs	r0, r3
 800233a:	f001 fa11 	bl	8003760 <HAL_I2C_Init>
 800233e:	1e03      	subs	r3, r0, #0
 8002340:	d001      	beq.n	8002346 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002342:	f000 fa39 	bl	80027b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002346:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <MX_I2C2_Init+0x74>)
 8002348:	2100      	movs	r1, #0
 800234a:	0018      	movs	r0, r3
 800234c:	f002 f8f6 	bl	800453c <HAL_I2CEx_ConfigAnalogFilter>
 8002350:	1e03      	subs	r3, r0, #0
 8002352:	d001      	beq.n	8002358 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002354:	f000 fa30 	bl	80027b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002358:	4b05      	ldr	r3, [pc, #20]	; (8002370 <MX_I2C2_Init+0x74>)
 800235a:	2100      	movs	r1, #0
 800235c:	0018      	movs	r0, r3
 800235e:	f002 f939 	bl	80045d4 <HAL_I2CEx_ConfigDigitalFilter>
 8002362:	1e03      	subs	r3, r0, #0
 8002364:	d001      	beq.n	800236a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002366:	f000 fa27 	bl	80027b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	2000020c 	.word	0x2000020c
 8002374:	40005800 	.word	0x40005800
 8002378:	2000090e 	.word	0x2000090e

0800237c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002382:	2308      	movs	r3, #8
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	0018      	movs	r0, r3
 8002388:	2310      	movs	r3, #16
 800238a:	001a      	movs	r2, r3
 800238c:	2100      	movs	r1, #0
 800238e:	f004 ff33 	bl	80071f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002392:	003b      	movs	r3, r7
 8002394:	0018      	movs	r0, r3
 8002396:	2308      	movs	r3, #8
 8002398:	001a      	movs	r2, r3
 800239a:	2100      	movs	r1, #0
 800239c:	f004 ff2c 	bl	80071f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023a0:	4b1f      	ldr	r3, [pc, #124]	; (8002420 <MX_TIM1_Init+0xa4>)
 80023a2:	4a20      	ldr	r2, [pc, #128]	; (8002424 <MX_TIM1_Init+0xa8>)
 80023a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80023a6:	4b1e      	ldr	r3, [pc, #120]	; (8002420 <MX_TIM1_Init+0xa4>)
 80023a8:	2247      	movs	r2, #71	; 0x47
 80023aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ac:	4b1c      	ldr	r3, [pc, #112]	; (8002420 <MX_TIM1_Init+0xa4>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80023b2:	4b1b      	ldr	r3, [pc, #108]	; (8002420 <MX_TIM1_Init+0xa4>)
 80023b4:	4a1c      	ldr	r2, [pc, #112]	; (8002428 <MX_TIM1_Init+0xac>)
 80023b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023b8:	4b19      	ldr	r3, [pc, #100]	; (8002420 <MX_TIM1_Init+0xa4>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023be:	4b18      	ldr	r3, [pc, #96]	; (8002420 <MX_TIM1_Init+0xa4>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023c4:	4b16      	ldr	r3, [pc, #88]	; (8002420 <MX_TIM1_Init+0xa4>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023ca:	4b15      	ldr	r3, [pc, #84]	; (8002420 <MX_TIM1_Init+0xa4>)
 80023cc:	0018      	movs	r0, r3
 80023ce:	f002 fe79 	bl	80050c4 <HAL_TIM_Base_Init>
 80023d2:	1e03      	subs	r3, r0, #0
 80023d4:	d001      	beq.n	80023da <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80023d6:	f000 f9ef 	bl	80027b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023da:	2108      	movs	r1, #8
 80023dc:	187b      	adds	r3, r7, r1
 80023de:	2280      	movs	r2, #128	; 0x80
 80023e0:	0152      	lsls	r2, r2, #5
 80023e2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80023e4:	187a      	adds	r2, r7, r1
 80023e6:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <MX_TIM1_Init+0xa4>)
 80023e8:	0011      	movs	r1, r2
 80023ea:	0018      	movs	r0, r3
 80023ec:	f003 f8ce 	bl	800558c <HAL_TIM_ConfigClockSource>
 80023f0:	1e03      	subs	r3, r0, #0
 80023f2:	d001      	beq.n	80023f8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80023f4:	f000 f9e0 	bl	80027b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023f8:	003b      	movs	r3, r7
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023fe:	003b      	movs	r3, r7
 8002400:	2200      	movs	r2, #0
 8002402:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002404:	003a      	movs	r2, r7
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <MX_TIM1_Init+0xa4>)
 8002408:	0011      	movs	r1, r2
 800240a:	0018      	movs	r0, r3
 800240c:	f003 fcc2 	bl	8005d94 <HAL_TIMEx_MasterConfigSynchronization>
 8002410:	1e03      	subs	r3, r0, #0
 8002412:	d001      	beq.n	8002418 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002414:	f000 f9d0 	bl	80027b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002418:	46c0      	nop			; (mov r8, r8)
 800241a:	46bd      	mov	sp, r7
 800241c:	b006      	add	sp, #24
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20000260 	.word	0x20000260
 8002424:	40012c00 	.word	0x40012c00
 8002428:	0000ffff 	.word	0x0000ffff

0800242c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08e      	sub	sp, #56	; 0x38
 8002430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002432:	2328      	movs	r3, #40	; 0x28
 8002434:	18fb      	adds	r3, r7, r3
 8002436:	0018      	movs	r0, r3
 8002438:	2310      	movs	r3, #16
 800243a:	001a      	movs	r2, r3
 800243c:	2100      	movs	r1, #0
 800243e:	f004 fedb 	bl	80071f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002442:	2320      	movs	r3, #32
 8002444:	18fb      	adds	r3, r7, r3
 8002446:	0018      	movs	r0, r3
 8002448:	2308      	movs	r3, #8
 800244a:	001a      	movs	r2, r3
 800244c:	2100      	movs	r1, #0
 800244e:	f004 fed3 	bl	80071f8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002452:	1d3b      	adds	r3, r7, #4
 8002454:	0018      	movs	r0, r3
 8002456:	231c      	movs	r3, #28
 8002458:	001a      	movs	r2, r3
 800245a:	2100      	movs	r1, #0
 800245c:	f004 fecc 	bl	80071f8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002460:	4b2d      	ldr	r3, [pc, #180]	; (8002518 <MX_TIM3_Init+0xec>)
 8002462:	4a2e      	ldr	r2, [pc, #184]	; (800251c <MX_TIM3_Init+0xf0>)
 8002464:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8002466:	4b2c      	ldr	r3, [pc, #176]	; (8002518 <MX_TIM3_Init+0xec>)
 8002468:	2201      	movs	r2, #1
 800246a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800246c:	4b2a      	ldr	r3, [pc, #168]	; (8002518 <MX_TIM3_Init+0xec>)
 800246e:	2200      	movs	r2, #0
 8002470:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8002472:	4b29      	ldr	r3, [pc, #164]	; (8002518 <MX_TIM3_Init+0xec>)
 8002474:	2201      	movs	r2, #1
 8002476:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002478:	4b27      	ldr	r3, [pc, #156]	; (8002518 <MX_TIM3_Init+0xec>)
 800247a:	2200      	movs	r2, #0
 800247c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800247e:	4b26      	ldr	r3, [pc, #152]	; (8002518 <MX_TIM3_Init+0xec>)
 8002480:	2200      	movs	r2, #0
 8002482:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002484:	4b24      	ldr	r3, [pc, #144]	; (8002518 <MX_TIM3_Init+0xec>)
 8002486:	0018      	movs	r0, r3
 8002488:	f002 fe1c 	bl	80050c4 <HAL_TIM_Base_Init>
 800248c:	1e03      	subs	r3, r0, #0
 800248e:	d001      	beq.n	8002494 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002490:	f000 f992 	bl	80027b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002494:	2128      	movs	r1, #40	; 0x28
 8002496:	187b      	adds	r3, r7, r1
 8002498:	2280      	movs	r2, #128	; 0x80
 800249a:	0152      	lsls	r2, r2, #5
 800249c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800249e:	187a      	adds	r2, r7, r1
 80024a0:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <MX_TIM3_Init+0xec>)
 80024a2:	0011      	movs	r1, r2
 80024a4:	0018      	movs	r0, r3
 80024a6:	f003 f871 	bl	800558c <HAL_TIM_ConfigClockSource>
 80024aa:	1e03      	subs	r3, r0, #0
 80024ac:	d001      	beq.n	80024b2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80024ae:	f000 f983 	bl	80027b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80024b2:	4b19      	ldr	r3, [pc, #100]	; (8002518 <MX_TIM3_Init+0xec>)
 80024b4:	0018      	movs	r0, r3
 80024b6:	f002 fe99 	bl	80051ec <HAL_TIM_PWM_Init>
 80024ba:	1e03      	subs	r3, r0, #0
 80024bc:	d001      	beq.n	80024c2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80024be:	f000 f97b 	bl	80027b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024c2:	2120      	movs	r1, #32
 80024c4:	187b      	adds	r3, r7, r1
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ca:	187b      	adds	r3, r7, r1
 80024cc:	2200      	movs	r2, #0
 80024ce:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024d0:	187a      	adds	r2, r7, r1
 80024d2:	4b11      	ldr	r3, [pc, #68]	; (8002518 <MX_TIM3_Init+0xec>)
 80024d4:	0011      	movs	r1, r2
 80024d6:	0018      	movs	r0, r3
 80024d8:	f003 fc5c 	bl	8005d94 <HAL_TIMEx_MasterConfigSynchronization>
 80024dc:	1e03      	subs	r3, r0, #0
 80024de:	d001      	beq.n	80024e4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80024e0:	f000 f96a 	bl	80027b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024e4:	1d3b      	adds	r3, r7, #4
 80024e6:	2260      	movs	r2, #96	; 0x60
 80024e8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80024ea:	1d3b      	adds	r3, r7, #4
 80024ec:	2200      	movs	r2, #0
 80024ee:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024f0:	1d3b      	adds	r3, r7, #4
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024f6:	1d3b      	adds	r3, r7, #4
 80024f8:	2200      	movs	r2, #0
 80024fa:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024fc:	1d39      	adds	r1, r7, #4
 80024fe:	4b06      	ldr	r3, [pc, #24]	; (8002518 <MX_TIM3_Init+0xec>)
 8002500:	2204      	movs	r2, #4
 8002502:	0018      	movs	r0, r3
 8002504:	f002 ff7c 	bl	8005400 <HAL_TIM_PWM_ConfigChannel>
 8002508:	1e03      	subs	r3, r0, #0
 800250a:	d001      	beq.n	8002510 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 800250c:	f000 f954 	bl	80027b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002510:	46c0      	nop			; (mov r8, r8)
 8002512:	46bd      	mov	sp, r7
 8002514:	b00e      	add	sp, #56	; 0x38
 8002516:	bd80      	pop	{r7, pc}
 8002518:	200002a8 	.word	0x200002a8
 800251c:	40000400 	.word	0x40000400

08002520 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002524:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <MX_TIM6_Init+0x38>)
 8002526:	4a0d      	ldr	r2, [pc, #52]	; (800255c <MX_TIM6_Init+0x3c>)
 8002528:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 47;
 800252a:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <MX_TIM6_Init+0x38>)
 800252c:	222f      	movs	r2, #47	; 0x2f
 800252e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002530:	4b09      	ldr	r3, [pc, #36]	; (8002558 <MX_TIM6_Init+0x38>)
 8002532:	2200      	movs	r2, #0
 8002534:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002536:	4b08      	ldr	r3, [pc, #32]	; (8002558 <MX_TIM6_Init+0x38>)
 8002538:	4a09      	ldr	r2, [pc, #36]	; (8002560 <MX_TIM6_Init+0x40>)
 800253a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <MX_TIM6_Init+0x38>)
 800253e:	2200      	movs	r2, #0
 8002540:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002542:	4b05      	ldr	r3, [pc, #20]	; (8002558 <MX_TIM6_Init+0x38>)
 8002544:	0018      	movs	r0, r3
 8002546:	f002 fdbd 	bl	80050c4 <HAL_TIM_Base_Init>
 800254a:	1e03      	subs	r3, r0, #0
 800254c:	d001      	beq.n	8002552 <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 800254e:	f000 f933 	bl	80027b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	200002f0 	.word	0x200002f0
 800255c:	40001000 	.word	0x40001000
 8002560:	0000ffff 	.word	0x0000ffff

08002564 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002568:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <MX_TIM14_Init+0x40>)
 800256a:	4a0f      	ldr	r2, [pc, #60]	; (80025a8 <MX_TIM14_Init+0x44>)
 800256c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 47;
 800256e:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <MX_TIM14_Init+0x40>)
 8002570:	222f      	movs	r2, #47	; 0x2f
 8002572:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002574:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <MX_TIM14_Init+0x40>)
 8002576:	2200      	movs	r2, #0
 8002578:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800257a:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <MX_TIM14_Init+0x40>)
 800257c:	4a0b      	ldr	r2, [pc, #44]	; (80025ac <MX_TIM14_Init+0x48>)
 800257e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002580:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <MX_TIM14_Init+0x40>)
 8002582:	2200      	movs	r2, #0
 8002584:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002586:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <MX_TIM14_Init+0x40>)
 8002588:	2200      	movs	r2, #0
 800258a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800258c:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <MX_TIM14_Init+0x40>)
 800258e:	0018      	movs	r0, r3
 8002590:	f002 fd98 	bl	80050c4 <HAL_TIM_Base_Init>
 8002594:	1e03      	subs	r3, r0, #0
 8002596:	d001      	beq.n	800259c <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8002598:	f000 f90e 	bl	80027b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800259c:	46c0      	nop			; (mov r8, r8)
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	20000338 	.word	0x20000338
 80025a8:	40002000 	.word	0x40002000
 80025ac:	0000ffff 	.word	0x0000ffff

080025b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025b4:	4b14      	ldr	r3, [pc, #80]	; (8002608 <MX_USART1_UART_Init+0x58>)
 80025b6:	4a15      	ldr	r2, [pc, #84]	; (800260c <MX_USART1_UART_Init+0x5c>)
 80025b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80025ba:	4b13      	ldr	r3, [pc, #76]	; (8002608 <MX_USART1_UART_Init+0x58>)
 80025bc:	22e1      	movs	r2, #225	; 0xe1
 80025be:	0252      	lsls	r2, r2, #9
 80025c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025c2:	4b11      	ldr	r3, [pc, #68]	; (8002608 <MX_USART1_UART_Init+0x58>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025c8:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <MX_USART1_UART_Init+0x58>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025ce:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <MX_USART1_UART_Init+0x58>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <MX_USART1_UART_Init+0x58>)
 80025d6:	220c      	movs	r2, #12
 80025d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025da:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <MX_USART1_UART_Init+0x58>)
 80025dc:	2200      	movs	r2, #0
 80025de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025e0:	4b09      	ldr	r3, [pc, #36]	; (8002608 <MX_USART1_UART_Init+0x58>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025e6:	4b08      	ldr	r3, [pc, #32]	; (8002608 <MX_USART1_UART_Init+0x58>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025ec:	4b06      	ldr	r3, [pc, #24]	; (8002608 <MX_USART1_UART_Init+0x58>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025f2:	4b05      	ldr	r3, [pc, #20]	; (8002608 <MX_USART1_UART_Init+0x58>)
 80025f4:	0018      	movs	r0, r3
 80025f6:	f003 fc25 	bl	8005e44 <HAL_UART_Init>
 80025fa:	1e03      	subs	r3, r0, #0
 80025fc:	d001      	beq.n	8002602 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80025fe:	f000 f8db 	bl	80027b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20000380 	.word	0x20000380
 800260c:	40013800 	.word	0x40013800

08002610 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002614:	4b14      	ldr	r3, [pc, #80]	; (8002668 <MX_USART2_UART_Init+0x58>)
 8002616:	4a15      	ldr	r2, [pc, #84]	; (800266c <MX_USART2_UART_Init+0x5c>)
 8002618:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800261a:	4b13      	ldr	r3, [pc, #76]	; (8002668 <MX_USART2_UART_Init+0x58>)
 800261c:	22e1      	movs	r2, #225	; 0xe1
 800261e:	0252      	lsls	r2, r2, #9
 8002620:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002622:	4b11      	ldr	r3, [pc, #68]	; (8002668 <MX_USART2_UART_Init+0x58>)
 8002624:	2200      	movs	r2, #0
 8002626:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002628:	4b0f      	ldr	r3, [pc, #60]	; (8002668 <MX_USART2_UART_Init+0x58>)
 800262a:	2200      	movs	r2, #0
 800262c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800262e:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <MX_USART2_UART_Init+0x58>)
 8002630:	2200      	movs	r2, #0
 8002632:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002634:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <MX_USART2_UART_Init+0x58>)
 8002636:	220c      	movs	r2, #12
 8002638:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800263a:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <MX_USART2_UART_Init+0x58>)
 800263c:	2200      	movs	r2, #0
 800263e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002640:	4b09      	ldr	r3, [pc, #36]	; (8002668 <MX_USART2_UART_Init+0x58>)
 8002642:	2200      	movs	r2, #0
 8002644:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002646:	4b08      	ldr	r3, [pc, #32]	; (8002668 <MX_USART2_UART_Init+0x58>)
 8002648:	2200      	movs	r2, #0
 800264a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <MX_USART2_UART_Init+0x58>)
 800264e:	2200      	movs	r2, #0
 8002650:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002652:	4b05      	ldr	r3, [pc, #20]	; (8002668 <MX_USART2_UART_Init+0x58>)
 8002654:	0018      	movs	r0, r3
 8002656:	f003 fbf5 	bl	8005e44 <HAL_UART_Init>
 800265a:	1e03      	subs	r3, r0, #0
 800265c:	d001      	beq.n	8002662 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800265e:	f000 f8ab 	bl	80027b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20000408 	.word	0x20000408
 800266c:	40004400 	.word	0x40004400

08002670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002670:	b590      	push	{r4, r7, lr}
 8002672:	b08b      	sub	sp, #44	; 0x2c
 8002674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002676:	2414      	movs	r4, #20
 8002678:	193b      	adds	r3, r7, r4
 800267a:	0018      	movs	r0, r3
 800267c:	2314      	movs	r3, #20
 800267e:	001a      	movs	r2, r3
 8002680:	2100      	movs	r1, #0
 8002682:	f004 fdb9 	bl	80071f8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002686:	4b47      	ldr	r3, [pc, #284]	; (80027a4 <MX_GPIO_Init+0x134>)
 8002688:	695a      	ldr	r2, [r3, #20]
 800268a:	4b46      	ldr	r3, [pc, #280]	; (80027a4 <MX_GPIO_Init+0x134>)
 800268c:	2180      	movs	r1, #128	; 0x80
 800268e:	0309      	lsls	r1, r1, #12
 8002690:	430a      	orrs	r2, r1
 8002692:	615a      	str	r2, [r3, #20]
 8002694:	4b43      	ldr	r3, [pc, #268]	; (80027a4 <MX_GPIO_Init+0x134>)
 8002696:	695a      	ldr	r2, [r3, #20]
 8002698:	2380      	movs	r3, #128	; 0x80
 800269a:	031b      	lsls	r3, r3, #12
 800269c:	4013      	ands	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026a2:	4b40      	ldr	r3, [pc, #256]	; (80027a4 <MX_GPIO_Init+0x134>)
 80026a4:	695a      	ldr	r2, [r3, #20]
 80026a6:	4b3f      	ldr	r3, [pc, #252]	; (80027a4 <MX_GPIO_Init+0x134>)
 80026a8:	2180      	movs	r1, #128	; 0x80
 80026aa:	03c9      	lsls	r1, r1, #15
 80026ac:	430a      	orrs	r2, r1
 80026ae:	615a      	str	r2, [r3, #20]
 80026b0:	4b3c      	ldr	r3, [pc, #240]	; (80027a4 <MX_GPIO_Init+0x134>)
 80026b2:	695a      	ldr	r2, [r3, #20]
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	03db      	lsls	r3, r3, #15
 80026b8:	4013      	ands	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026be:	4b39      	ldr	r3, [pc, #228]	; (80027a4 <MX_GPIO_Init+0x134>)
 80026c0:	695a      	ldr	r2, [r3, #20]
 80026c2:	4b38      	ldr	r3, [pc, #224]	; (80027a4 <MX_GPIO_Init+0x134>)
 80026c4:	2180      	movs	r1, #128	; 0x80
 80026c6:	0289      	lsls	r1, r1, #10
 80026c8:	430a      	orrs	r2, r1
 80026ca:	615a      	str	r2, [r3, #20]
 80026cc:	4b35      	ldr	r3, [pc, #212]	; (80027a4 <MX_GPIO_Init+0x134>)
 80026ce:	695a      	ldr	r2, [r3, #20]
 80026d0:	2380      	movs	r3, #128	; 0x80
 80026d2:	029b      	lsls	r3, r3, #10
 80026d4:	4013      	ands	r3, r2
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026da:	4b32      	ldr	r3, [pc, #200]	; (80027a4 <MX_GPIO_Init+0x134>)
 80026dc:	695a      	ldr	r2, [r3, #20]
 80026de:	4b31      	ldr	r3, [pc, #196]	; (80027a4 <MX_GPIO_Init+0x134>)
 80026e0:	2180      	movs	r1, #128	; 0x80
 80026e2:	02c9      	lsls	r1, r1, #11
 80026e4:	430a      	orrs	r2, r1
 80026e6:	615a      	str	r2, [r3, #20]
 80026e8:	4b2e      	ldr	r3, [pc, #184]	; (80027a4 <MX_GPIO_Init+0x134>)
 80026ea:	695a      	ldr	r2, [r3, #20]
 80026ec:	2380      	movs	r3, #128	; 0x80
 80026ee:	02db      	lsls	r3, r3, #11
 80026f0:	4013      	ands	r3, r2
 80026f2:	607b      	str	r3, [r7, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ResetCam_Pin|pwdn_Pin|LED_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 80026f6:	492c      	ldr	r1, [pc, #176]	; (80027a8 <MX_GPIO_Init+0x138>)
 80026f8:	4b2c      	ldr	r3, [pc, #176]	; (80027ac <MX_GPIO_Init+0x13c>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	0018      	movs	r0, r3
 80026fe:	f000 ffec 	bl	80036da <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ResetCam_Pin pwdn_Pin LED_Pin PC10 */
  GPIO_InitStruct.Pin = ResetCam_Pin|pwdn_Pin|LED_Pin|GPIO_PIN_10;
 8002702:	193b      	adds	r3, r7, r4
 8002704:	4a28      	ldr	r2, [pc, #160]	; (80027a8 <MX_GPIO_Init+0x138>)
 8002706:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002708:	193b      	adds	r3, r7, r4
 800270a:	2201      	movs	r2, #1
 800270c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	193b      	adds	r3, r7, r4
 8002710:	2200      	movs	r2, #0
 8002712:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002714:	193b      	adds	r3, r7, r4
 8002716:	2200      	movs	r2, #0
 8002718:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800271a:	193b      	adds	r3, r7, r4
 800271c:	4a23      	ldr	r2, [pc, #140]	; (80027ac <MX_GPIO_Init+0x13c>)
 800271e:	0019      	movs	r1, r3
 8002720:	0010      	movs	r0, r2
 8002722:	f000 fe4d 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : pclk_Pin PA8 */
  GPIO_InitStruct.Pin = pclk_Pin|GPIO_PIN_8;
 8002726:	193b      	adds	r3, r7, r4
 8002728:	2288      	movs	r2, #136	; 0x88
 800272a:	0052      	lsls	r2, r2, #1
 800272c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800272e:	193b      	adds	r3, r7, r4
 8002730:	2200      	movs	r2, #0
 8002732:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002734:	193b      	adds	r3, r7, r4
 8002736:	2200      	movs	r2, #0
 8002738:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273a:	193a      	adds	r2, r7, r4
 800273c:	2390      	movs	r3, #144	; 0x90
 800273e:	05db      	lsls	r3, r3, #23
 8002740:	0011      	movs	r1, r2
 8002742:	0018      	movs	r0, r3
 8002744:	f000 fe3c 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin href_Pin
                           D3_Pin D4_Pin D5_Pin D6_Pin
                           D7_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|href_Pin
 8002748:	193b      	adds	r3, r7, r4
 800274a:	4a19      	ldr	r2, [pc, #100]	; (80027b0 <MX_GPIO_Init+0x140>)
 800274c:	601a      	str	r2, [r3, #0]
                          |D3_Pin|D4_Pin|D5_Pin|D6_Pin
                          |D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800274e:	193b      	adds	r3, r7, r4
 8002750:	2200      	movs	r2, #0
 8002752:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	193b      	adds	r3, r7, r4
 8002756:	2200      	movs	r2, #0
 8002758:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275a:	193b      	adds	r3, r7, r4
 800275c:	4a15      	ldr	r2, [pc, #84]	; (80027b4 <MX_GPIO_Init+0x144>)
 800275e:	0019      	movs	r1, r3
 8002760:	0010      	movs	r0, r2
 8002762:	f000 fe2d 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : vsyncEXTI13_Pin */
  GPIO_InitStruct.Pin = vsyncEXTI13_Pin;
 8002766:	0021      	movs	r1, r4
 8002768:	187b      	adds	r3, r7, r1
 800276a:	2280      	movs	r2, #128	; 0x80
 800276c:	0192      	lsls	r2, r2, #6
 800276e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002770:	187b      	adds	r3, r7, r1
 8002772:	2288      	movs	r2, #136	; 0x88
 8002774:	0352      	lsls	r2, r2, #13
 8002776:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	187b      	adds	r3, r7, r1
 800277a:	2200      	movs	r2, #0
 800277c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(vsyncEXTI13_GPIO_Port, &GPIO_InitStruct);
 800277e:	187b      	adds	r3, r7, r1
 8002780:	4a0c      	ldr	r2, [pc, #48]	; (80027b4 <MX_GPIO_Init+0x144>)
 8002782:	0019      	movs	r1, r3
 8002784:	0010      	movs	r0, r2
 8002786:	f000 fe1b 	bl	80033c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800278a:	2200      	movs	r2, #0
 800278c:	2100      	movs	r1, #0
 800278e:	2007      	movs	r0, #7
 8002790:	f000 fd9c 	bl	80032cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002794:	2007      	movs	r0, #7
 8002796:	f000 fdae 	bl	80032f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	46bd      	mov	sp, r7
 800279e:	b00b      	add	sp, #44	; 0x2c
 80027a0:	bd90      	pop	{r4, r7, pc}
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	40021000 	.word	0x40021000
 80027a8:	0000050c 	.word	0x0000050c
 80027ac:	48000800 	.word	0x48000800
 80027b0:	000010ff 	.word	0x000010ff
 80027b4:	48000400 	.word	0x48000400

080027b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027bc:	b672      	cpsid	i
}
 80027be:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027c0:	e7fe      	b.n	80027c0 <Error_Handler+0x8>

080027c2 <ov7670_init>:
uint8_t vsync =0;



char ov7670_init(void)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
	  ResetRegisterForOvCam();
 80027c8:	f000 f922 	bl	8002a10 <ResetRegisterForOvCam>
	  HAL_Delay(30);
 80027cc:	201e      	movs	r0, #30
 80027ce:	f000 fcad 	bl	800312c <HAL_Delay>

	  uint8_t buffer[4];
	ReadOperationOVCam(REG_VER, buffer);
 80027d2:	1d3b      	adds	r3, r7, #4
 80027d4:	0019      	movs	r1, r3
 80027d6:	200b      	movs	r0, #11
 80027d8:	f000 f950 	bl	8002a7c <ReadOperationOVCam>
	  if ( buffer[0] != 0x73)
 80027dc:	1d3b      	adds	r3, r7, #4
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b73      	cmp	r3, #115	; 0x73
 80027e2:	d001      	beq.n	80027e8 <ov7670_init+0x26>
	  {
		  return 0;
 80027e4:	2300      	movs	r3, #0
 80027e6:	e002      	b.n	80027ee <ov7670_init+0x2c>
	  }
	  else
	  {
		  ov7670_config();
 80027e8:	f000 f806 	bl	80027f8 <ov7670_config>
	  }

	  return 1;
 80027ec:	2301      	movs	r3, #1
}
 80027ee:	0018      	movs	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	b002      	add	sp, #8
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <ov7670_config>:

char ov7670_config()
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
	ResetRegisterForOvCam();
 80027fe:	f000 f907 	bl	8002a10 <ResetRegisterForOvCam>
    HAL_Delay(30);
 8002802:	201e      	movs	r0, #30
 8002804:	f000 fc92 	bl	800312c <HAL_Delay>

  for(int i = 0; OV7670_reg[i][0]!=0xFF; i++) {
 8002808:	2300      	movs	r3, #0
 800280a:	607b      	str	r3, [r7, #4]
 800280c:	e013      	b.n	8002836 <ov7670_config+0x3e>
    WriteOperationOVCam(OV7670_reg[i][0], OV7670_reg[i][1]);
 800280e:	4b0f      	ldr	r3, [pc, #60]	; (800284c <ov7670_config+0x54>)
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	0052      	lsls	r2, r2, #1
 8002814:	5cd3      	ldrb	r3, [r2, r3]
 8002816:	b298      	uxth	r0, r3
 8002818:	4a0c      	ldr	r2, [pc, #48]	; (800284c <ov7670_config+0x54>)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	18d3      	adds	r3, r2, r3
 8002820:	3301      	adds	r3, #1
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	0019      	movs	r1, r3
 8002826:	f000 f90d 	bl	8002a44 <WriteOperationOVCam>
    HAL_Delay(1);
 800282a:	2001      	movs	r0, #1
 800282c:	f000 fc7e 	bl	800312c <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0]!=0xFF; i++) {
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3301      	adds	r3, #1
 8002834:	607b      	str	r3, [r7, #4]
 8002836:	4b05      	ldr	r3, [pc, #20]	; (800284c <ov7670_config+0x54>)
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	0052      	lsls	r2, r2, #1
 800283c:	5cd3      	ldrb	r3, [r2, r3]
 800283e:	2bff      	cmp	r3, #255	; 0xff
 8002840:	d1e5      	bne.n	800280e <ov7670_config+0x16>
  }
  return 0;
 8002842:	2300      	movs	r3, #0
}
 8002844:	0018      	movs	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	b002      	add	sp, #8
 800284a:	bd80      	pop	{r7, pc}
 800284c:	08009214 	.word	0x08009214

08002850 <GetFramesFromOvCam>:
void GetFramesFromOvCam()
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
	 * PB3 = D3	    PB4 = D4		PB5 = D5
	 * PB6 = D6	    PB7 = D7
	 *
	 */

	uint16_t microCounter =0;
 8002856:	230a      	movs	r3, #10
 8002858:	18fb      	adds	r3, r7, r3
 800285a:	2200      	movs	r2, #0
 800285c:	801a      	strh	r2, [r3, #0]
	uint16_t microCountertwo =0;
 800285e:	2308      	movs	r3, #8
 8002860:	18fb      	adds	r3, r7, r3
 8002862:	2200      	movs	r2, #0
 8002864:	801a      	strh	r2, [r3, #0]
	//This definition also needed for pixel sync or you can define
	//unused value instead this value...
	uint8_t currentRowHorizantalData =0;
 8002866:	1dfb      	adds	r3, r7, #7
 8002868:	2200      	movs	r2, #0
 800286a:	701a      	strb	r2, [r3, #0]


	//RGB565 format is 16bit format and OV7670 is supported it.
	//In order to obtain 160 horizantel pixel for LCD you need to catch 320 pixel
	//(8 bit = 1 pixel for Camera)
	const uint16_t horizantelPixel = 320;//320
 800286c:	1d3b      	adds	r3, r7, #4
 800286e:	22a0      	movs	r2, #160	; 0xa0
 8002870:	0052      	lsls	r2, r2, #1
 8002872:	801a      	strh	r2, [r3, #0]
	const uint8_t verticalPixel = 120;//120
 8002874:	1cfb      	adds	r3, r7, #3
 8002876:	2278      	movs	r2, #120	; 0x78
 8002878:	701a      	strb	r2, [r3, #0]


	if(needForHalfMicroDelay == 0)
 800287a:	2300      	movs	r3, #0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d000      	beq.n	8002882 <GetFramesFromOvCam+0x32>
 8002880:	e09e      	b.n	80029c0 <GetFramesFromOvCam+0x170>

	{


	if(vsync == 1)
 8002882:	4b51      	ldr	r3, [pc, #324]	; (80029c8 <GetFramesFromOvCam+0x178>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d000      	beq.n	800288c <GetFramesFromOvCam+0x3c>
 800288a:	e099      	b.n	80029c0 <GetFramesFromOvCam+0x170>
	{
		//In order to catch the second Interrupt at the right time
		//I added this delay(It is measured with Logic Analyzer with cheap one :)
		delayUsec(vsyncLowTime);
 800288c:	4b4f      	ldr	r3, [pc, #316]	; (80029cc <GetFramesFromOvCam+0x17c>)
 800288e:	0018      	movs	r0, r3
 8002890:	f000 f914 	bl	8002abc <delayUsec>

		while(vsync == 2)
 8002894:	e08f      	b.n	80029b6 <GetFramesFromOvCam+0x166>
		{

			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) )//mclk
 8002896:	2380      	movs	r3, #128	; 0x80
 8002898:	005a      	lsls	r2, r3, #1
 800289a:	2390      	movs	r3, #144	; 0x90
 800289c:	05db      	lsls	r3, r3, #23
 800289e:	0011      	movs	r1, r2
 80028a0:	0018      	movs	r0, r3
 80028a2:	f000 fefd 	bl	80036a0 <HAL_GPIO_ReadPin>
 80028a6:	1e03      	subs	r3, r0, #0
 80028a8:	d100      	bne.n	80028ac <GetFramesFromOvCam+0x5c>
 80028aa:	e084      	b.n	80029b6 <GetFramesFromOvCam+0x166>

			{
				for(uint16_t verticalCount =0; verticalCount < verticalPixel; verticalCount++)
 80028ac:	230e      	movs	r3, #14
 80028ae:	18fb      	adds	r3, r7, r3
 80028b0:	2200      	movs	r2, #0
 80028b2:	801a      	strh	r2, [r3, #0]
 80028b4:	e076      	b.n	80029a4 <GetFramesFromOvCam+0x154>
				{

					__HAL_TIM_SET_COUNTER(&htim6,0);
 80028b6:	4b46      	ldr	r3, [pc, #280]	; (80029d0 <GetFramesFromOvCam+0x180>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2200      	movs	r2, #0
 80028bc:	625a      	str	r2, [r3, #36]	; 0x24
					__HAL_TIM_SET_COUNTER(&htim14,0);
 80028be:	4b45      	ldr	r3, [pc, #276]	; (80029d4 <GetFramesFromOvCam+0x184>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2200      	movs	r2, #0
 80028c4:	625a      	str	r2, [r3, #36]	; 0x24

					for(uint16_t horizCount =0; horizCount < horizantelPixel ; horizCount++)
 80028c6:	230c      	movs	r3, #12
 80028c8:	18fb      	adds	r3, r7, r3
 80028ca:	2200      	movs	r2, #0
 80028cc:	801a      	strh	r2, [r3, #0]
 80028ce:	e047      	b.n	8002960 <GetFramesFromOvCam+0x110>
					{

						if(HAL_GPIO_ReadPin(GPIOA, pclk_Pin) == 0 )
 80028d0:	2390      	movs	r3, #144	; 0x90
 80028d2:	05db      	lsls	r3, r3, #23
 80028d4:	2110      	movs	r1, #16
 80028d6:	0018      	movs	r0, r3
 80028d8:	f000 fee2 	bl	80036a0 <HAL_GPIO_ReadPin>
 80028dc:	1e03      	subs	r3, r0, #0
 80028de:	d119      	bne.n	8002914 <GetFramesFromOvCam+0xc4>
						{
							/*
							 * This part when PCLK is
							 */
							currentRowHorizantalData = ((0x00FF) & (GPIOB->IDR));
 80028e0:	4b3d      	ldr	r3, [pc, #244]	; (80029d8 <GetFramesFromOvCam+0x188>)
 80028e2:	691a      	ldr	r2, [r3, #16]
 80028e4:	1dfb      	adds	r3, r7, #7
 80028e6:	701a      	strb	r2, [r3, #0]
							horizArray[horizCount] = currentRowHorizantalData;
 80028e8:	230c      	movs	r3, #12
 80028ea:	18fb      	adds	r3, r7, r3
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	4a3b      	ldr	r2, [pc, #236]	; (80029dc <GetFramesFromOvCam+0x18c>)
 80028f0:	1df9      	adds	r1, r7, #7
 80028f2:	7809      	ldrb	r1, [r1, #0]
 80028f4:	54d1      	strb	r1, [r2, r3]
							microCountertwo = pclkHighPixSynTime -  __HAL_TIM_GET_COUNTER(&htim14) ;
 80028f6:	2106      	movs	r1, #6
 80028f8:	4b36      	ldr	r3, [pc, #216]	; (80029d4 <GetFramesFromOvCam+0x184>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	b29a      	uxth	r2, r3
 8002900:	2008      	movs	r0, #8
 8002902:	183b      	adds	r3, r7, r0
 8002904:	1a8a      	subs	r2, r1, r2
 8002906:	801a      	strh	r2, [r3, #0]
							delayUsecForTimSeven(microCountertwo);
 8002908:	183b      	adds	r3, r7, r0
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	0018      	movs	r0, r3
 800290e:	f000 f8ef 	bl	8002af0 <delayUsecForTimSeven>
 8002912:	e01b      	b.n	800294c <GetFramesFromOvCam+0xfc>


						}else
						{
							currentRowHorizantalData = ((0x00FF) & (GPIOB->IDR));
 8002914:	4b30      	ldr	r3, [pc, #192]	; (80029d8 <GetFramesFromOvCam+0x188>)
 8002916:	691a      	ldr	r2, [r3, #16]
 8002918:	1dfb      	adds	r3, r7, #7
 800291a:	701a      	strb	r2, [r3, #0]
							horizArray[horizCount] = currentRowHorizantalData;
 800291c:	230c      	movs	r3, #12
 800291e:	18fb      	adds	r3, r7, r3
 8002920:	881b      	ldrh	r3, [r3, #0]
 8002922:	4a2e      	ldr	r2, [pc, #184]	; (80029dc <GetFramesFromOvCam+0x18c>)
 8002924:	1df9      	adds	r1, r7, #7
 8002926:	7809      	ldrb	r1, [r1, #0]
 8002928:	54d1      	strb	r1, [r2, r3]
							//This unused variable needed for very little pixel spikes
							//If you try delete this value, you can understand :)
							uint8_t forNanoSecDelay =0;
 800292a:	1cbb      	adds	r3, r7, #2
 800292c:	2200      	movs	r2, #0
 800292e:	701a      	strb	r2, [r3, #0]
							microCountertwo = pclkLowPixSynTime -  __HAL_TIM_GET_COUNTER(&htim14) ;
 8002930:	2104      	movs	r1, #4
 8002932:	4b28      	ldr	r3, [pc, #160]	; (80029d4 <GetFramesFromOvCam+0x184>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	b29a      	uxth	r2, r3
 800293a:	2008      	movs	r0, #8
 800293c:	183b      	adds	r3, r7, r0
 800293e:	1a8a      	subs	r2, r1, r2
 8002940:	801a      	strh	r2, [r3, #0]
							delayUsecForTimSeven(microCountertwo);
 8002942:	183b      	adds	r3, r7, r0
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	0018      	movs	r0, r3
 8002948:	f000 f8d2 	bl	8002af0 <delayUsecForTimSeven>

						}

						__HAL_TIM_SET_COUNTER(&htim14,0);
 800294c:	4b21      	ldr	r3, [pc, #132]	; (80029d4 <GetFramesFromOvCam+0x184>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2200      	movs	r2, #0
 8002952:	625a      	str	r2, [r3, #36]	; 0x24
					for(uint16_t horizCount =0; horizCount < horizantelPixel ; horizCount++)
 8002954:	210c      	movs	r1, #12
 8002956:	187b      	adds	r3, r7, r1
 8002958:	881a      	ldrh	r2, [r3, #0]
 800295a:	187b      	adds	r3, r7, r1
 800295c:	3201      	adds	r2, #1
 800295e:	801a      	strh	r2, [r3, #0]
 8002960:	230c      	movs	r3, #12
 8002962:	18fa      	adds	r2, r7, r3
 8002964:	1d3b      	adds	r3, r7, #4
 8002966:	8812      	ldrh	r2, [r2, #0]
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	429a      	cmp	r2, r3
 800296c:	d3b0      	bcc.n	80028d0 <GetFramesFromOvCam+0x80>
					}
					//Elapsed Time for Data sending to led is 1900 - 2800  microSecond
					//sendImageBufferToLed(&hspi1, horizArray, verticalCount,horizantelPixel);

					HAL_UART_Transmit (&huart2, horizArray, horizantelPixel,100);
 800296e:	1d3b      	adds	r3, r7, #4
 8002970:	881a      	ldrh	r2, [r3, #0]
 8002972:	491a      	ldr	r1, [pc, #104]	; (80029dc <GetFramesFromOvCam+0x18c>)
 8002974:	481a      	ldr	r0, [pc, #104]	; (80029e0 <GetFramesFromOvCam+0x190>)
 8002976:	2364      	movs	r3, #100	; 0x64
 8002978:	f003 fab8 	bl	8005eec <HAL_UART_Transmit>
					microCounter = hrefPeriod -__HAL_TIM_GET_COUNTER(&htim6);
 800297c:	4919      	ldr	r1, [pc, #100]	; (80029e4 <GetFramesFromOvCam+0x194>)
 800297e:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <GetFramesFromOvCam+0x180>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	b29a      	uxth	r2, r3
 8002986:	200a      	movs	r0, #10
 8002988:	183b      	adds	r3, r7, r0
 800298a:	1a8a      	subs	r2, r1, r2
 800298c:	801a      	strh	r2, [r3, #0]

					//It need to wait to be HIGH of the HREF
					delayUsec(microCounter);
 800298e:	183b      	adds	r3, r7, r0
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	0018      	movs	r0, r3
 8002994:	f000 f892 	bl	8002abc <delayUsec>
				for(uint16_t verticalCount =0; verticalCount < verticalPixel; verticalCount++)
 8002998:	210e      	movs	r1, #14
 800299a:	187b      	adds	r3, r7, r1
 800299c:	881a      	ldrh	r2, [r3, #0]
 800299e:	187b      	adds	r3, r7, r1
 80029a0:	3201      	adds	r2, #1
 80029a2:	801a      	strh	r2, [r3, #0]
 80029a4:	1cfb      	adds	r3, r7, #3
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	220e      	movs	r2, #14
 80029ac:	18ba      	adds	r2, r7, r2
 80029ae:	8812      	ldrh	r2, [r2, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d200      	bcs.n	80029b6 <GetFramesFromOvCam+0x166>
 80029b4:	e77f      	b.n	80028b6 <GetFramesFromOvCam+0x66>
		while(vsync == 2)
 80029b6:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <GetFramesFromOvCam+0x178>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d100      	bne.n	80029c0 <GetFramesFromOvCam+0x170>
 80029be:	e76a      	b.n	8002896 <GetFramesFromOvCam+0x46>
		}
	}

}
	//delayUsec(38155);
}
 80029c0:	46c0      	nop			; (mov r8, r8)
 80029c2:	46bd      	mov	sp, r7
 80029c4:	b004      	add	sp, #16
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	200005d0 	.word	0x200005d0
 80029cc:	00001b8c 	.word	0x00001b8c
 80029d0:	200002f0 	.word	0x200002f0
 80029d4:	20000338 	.word	0x20000338
 80029d8:	48000400 	.word	0x48000400
 80029dc:	20000490 	.word	0x20000490
 80029e0:	20000408 	.word	0x20000408
 80029e4:	000024be 	.word	0x000024be

080029e8 <ConfigurePWDNandRESETpins>:

void ConfigurePWDNandRESETpins()
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
	//for pwdn configure as Reset state to PC3
	HAL_GPIO_WritePin(pwdn_GPIO_Port, pwdn_Pin, RESET);
 80029ec:	4b07      	ldr	r3, [pc, #28]	; (8002a0c <ConfigurePWDNandRESETpins+0x24>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	2108      	movs	r1, #8
 80029f2:	0018      	movs	r0, r3
 80029f4:	f000 fe71 	bl	80036da <HAL_GPIO_WritePin>

	//for RESET configure as Set state to PC2
	HAL_GPIO_WritePin(ResetCam_GPIO_Port, ResetCam_Pin, SET);
 80029f8:	4b04      	ldr	r3, [pc, #16]	; (8002a0c <ConfigurePWDNandRESETpins+0x24>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	2104      	movs	r1, #4
 80029fe:	0018      	movs	r0, r3
 8002a00:	f000 fe6b 	bl	80036da <HAL_GPIO_WritePin>
}
 8002a04:	46c0      	nop			; (mov r8, r8)
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	48000800 	.word	0x48000800

08002a10 <ResetRegisterForOvCam>:

void ResetRegisterForOvCam()
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af04      	add	r7, sp, #16
	uint8_t pData[] = {0x80};
 8002a16:	1d3b      	adds	r3, r7, #4
 8002a18:	4a08      	ldr	r2, [pc, #32]	; (8002a3c <ResetRegisterForOvCam+0x2c>)
 8002a1a:	7812      	ldrb	r2, [r2, #0]
 8002a1c:	701a      	strb	r2, [r3, #0]

	//You need to set of Bit[7] for 0x12 Register Address
	if( HAL_I2C_Mem_Write(&hi2c2, writeAddressSCCB, REG_COM7, I2C_MEMADD_SIZE_8BIT, pData, 1, 10) != HAL_OK)
 8002a1e:	4808      	ldr	r0, [pc, #32]	; (8002a40 <ResetRegisterForOvCam+0x30>)
 8002a20:	230a      	movs	r3, #10
 8002a22:	9302      	str	r3, [sp, #8]
 8002a24:	2301      	movs	r3, #1
 8002a26:	9301      	str	r3, [sp, #4]
 8002a28:	1d3b      	adds	r3, r7, #4
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	2212      	movs	r2, #18
 8002a30:	2142      	movs	r1, #66	; 0x42
 8002a32:	f001 f93b 	bl	8003cac <HAL_I2C_Mem_Write>
	{

		return;
	}
}
 8002a36:	46bd      	mov	sp, r7
 8002a38:	b002      	add	sp, #8
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	080091d0 	.word	0x080091d0
 8002a40:	2000020c 	.word	0x2000020c

08002a44 <WriteOperationOVCam>:

void WriteOperationOVCam(uint16_t memADdress, uint8_t  pData)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af04      	add	r7, sp, #16
 8002a4a:	0002      	movs	r2, r0
 8002a4c:	1dbb      	adds	r3, r7, #6
 8002a4e:	801a      	strh	r2, [r3, #0]
 8002a50:	1d7b      	adds	r3, r7, #5
 8002a52:	1c0a      	adds	r2, r1, #0
 8002a54:	701a      	strb	r2, [r3, #0]
	if( HAL_I2C_Mem_Write(&hi2c2, writeAddressSCCB, memADdress, I2C_MEMADD_SIZE_8BIT, &pData, 1, 10) != HAL_OK)
 8002a56:	1dbb      	adds	r3, r7, #6
 8002a58:	881a      	ldrh	r2, [r3, #0]
 8002a5a:	4807      	ldr	r0, [pc, #28]	; (8002a78 <WriteOperationOVCam+0x34>)
 8002a5c:	230a      	movs	r3, #10
 8002a5e:	9302      	str	r3, [sp, #8]
 8002a60:	2301      	movs	r3, #1
 8002a62:	9301      	str	r3, [sp, #4]
 8002a64:	1d7b      	adds	r3, r7, #5
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	2301      	movs	r3, #1
 8002a6a:	2142      	movs	r1, #66	; 0x42
 8002a6c:	f001 f91e 	bl	8003cac <HAL_I2C_Mem_Write>
	{

		return;
	}
}
 8002a70:	46bd      	mov	sp, r7
 8002a72:	b002      	add	sp, #8
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	2000020c 	.word	0x2000020c

08002a7c <ReadOperationOVCam>:

void ReadOperationOVCam(uint16_t memAddress, uint8_t* buffer)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af02      	add	r7, sp, #8
 8002a82:	0002      	movs	r2, r0
 8002a84:	6039      	str	r1, [r7, #0]
 8002a86:	1dbb      	adds	r3, r7, #6
 8002a88:	801a      	strh	r2, [r3, #0]

	if(HAL_I2C_Master_Transmit(&hi2c2, writeAddressSCCB, (uint8_t*)&memAddress, 1, 10) != HAL_OK)
 8002a8a:	1dba      	adds	r2, r7, #6
 8002a8c:	480a      	ldr	r0, [pc, #40]	; (8002ab8 <ReadOperationOVCam+0x3c>)
 8002a8e:	230a      	movs	r3, #10
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	2301      	movs	r3, #1
 8002a94:	2142      	movs	r1, #66	; 0x42
 8002a96:	f000 fef9 	bl	800388c <HAL_I2C_Master_Transmit>
 8002a9a:	1e03      	subs	r3, r0, #0
 8002a9c:	d108      	bne.n	8002ab0 <ReadOperationOVCam+0x34>
	{
		return ;
	}
   if(HAL_I2C_Master_Receive(&hi2c2, readAddressSCCB, buffer, 1, 10) != HAL_OK)
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	4805      	ldr	r0, [pc, #20]	; (8002ab8 <ReadOperationOVCam+0x3c>)
 8002aa2:	230a      	movs	r3, #10
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	2143      	movs	r1, #67	; 0x43
 8002aaa:	f000 fff7 	bl	8003a9c <HAL_I2C_Master_Receive>
 8002aae:	e000      	b.n	8002ab2 <ReadOperationOVCam+0x36>
		return ;
 8002ab0:	46c0      	nop			; (mov r8, r8)
   {
	   return;
   }
}
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	b002      	add	sp, #8
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	2000020c 	.word	0x2000020c

08002abc <delayUsec>:

//I defined timers separately for not changing the time sync
void delayUsec(uint16_t time)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	0002      	movs	r2, r0
 8002ac4:	1dbb      	adds	r3, r7, #6
 8002ac6:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim6,0);
 8002ac8:	4b08      	ldr	r3, [pc, #32]	; (8002aec <delayUsec+0x30>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2200      	movs	r2, #0
 8002ace:	625a      	str	r2, [r3, #36]	; 0x24
	while( __HAL_TIM_GET_COUNTER(&htim6) < time);
 8002ad0:	46c0      	nop			; (mov r8, r8)
 8002ad2:	4b06      	ldr	r3, [pc, #24]	; (8002aec <delayUsec+0x30>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ad8:	1dbb      	adds	r3, r7, #6
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d3f8      	bcc.n	8002ad2 <delayUsec+0x16>
}
 8002ae0:	46c0      	nop			; (mov r8, r8)
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	b002      	add	sp, #8
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	200002f0 	.word	0x200002f0

08002af0 <delayUsecForTimSeven>:

void delayUsecForTimSeven(uint16_t time)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	0002      	movs	r2, r0
 8002af8:	1dbb      	adds	r3, r7, #6
 8002afa:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim14,0);
 8002afc:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <delayUsecForTimSeven+0x30>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2200      	movs	r2, #0
 8002b02:	625a      	str	r2, [r3, #36]	; 0x24
	while( __HAL_TIM_GET_COUNTER(&htim14) < time);
 8002b04:	46c0      	nop			; (mov r8, r8)
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <delayUsecForTimSeven+0x30>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b0c:	1dbb      	adds	r3, r7, #6
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d3f8      	bcc.n	8002b06 <delayUsecForTimSeven+0x16>
}
 8002b14:	46c0      	nop			; (mov r8, r8)
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	b002      	add	sp, #8
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	20000338 	.word	0x20000338

08002b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b2a:	4b0f      	ldr	r3, [pc, #60]	; (8002b68 <HAL_MspInit+0x44>)
 8002b2c:	699a      	ldr	r2, [r3, #24]
 8002b2e:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <HAL_MspInit+0x44>)
 8002b30:	2101      	movs	r1, #1
 8002b32:	430a      	orrs	r2, r1
 8002b34:	619a      	str	r2, [r3, #24]
 8002b36:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <HAL_MspInit+0x44>)
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	607b      	str	r3, [r7, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b42:	4b09      	ldr	r3, [pc, #36]	; (8002b68 <HAL_MspInit+0x44>)
 8002b44:	69da      	ldr	r2, [r3, #28]
 8002b46:	4b08      	ldr	r3, [pc, #32]	; (8002b68 <HAL_MspInit+0x44>)
 8002b48:	2180      	movs	r1, #128	; 0x80
 8002b4a:	0549      	lsls	r1, r1, #21
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	61da      	str	r2, [r3, #28]
 8002b50:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <HAL_MspInit+0x44>)
 8002b52:	69da      	ldr	r2, [r3, #28]
 8002b54:	2380      	movs	r3, #128	; 0x80
 8002b56:	055b      	lsls	r3, r3, #21
 8002b58:	4013      	ands	r3, r2
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	46bd      	mov	sp, r7
 8002b62:	b002      	add	sp, #8
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	46c0      	nop			; (mov r8, r8)
 8002b68:	40021000 	.word	0x40021000

08002b6c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a09      	ldr	r2, [pc, #36]	; (8002ba0 <HAL_CRC_MspInit+0x34>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d10b      	bne.n	8002b96 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002b7e:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <HAL_CRC_MspInit+0x38>)
 8002b80:	695a      	ldr	r2, [r3, #20]
 8002b82:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <HAL_CRC_MspInit+0x38>)
 8002b84:	2140      	movs	r1, #64	; 0x40
 8002b86:	430a      	orrs	r2, r1
 8002b88:	615a      	str	r2, [r3, #20]
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <HAL_CRC_MspInit+0x38>)
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	2240      	movs	r2, #64	; 0x40
 8002b90:	4013      	ands	r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	b004      	add	sp, #16
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	40023000 	.word	0x40023000
 8002ba4:	40021000 	.word	0x40021000

08002ba8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ba8:	b590      	push	{r4, r7, lr}
 8002baa:	b08b      	sub	sp, #44	; 0x2c
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb0:	2414      	movs	r4, #20
 8002bb2:	193b      	adds	r3, r7, r4
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	2314      	movs	r3, #20
 8002bb8:	001a      	movs	r2, r3
 8002bba:	2100      	movs	r1, #0
 8002bbc:	f004 fb1c 	bl	80071f8 <memset>
  if(hi2c->Instance==I2C2)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a1c      	ldr	r2, [pc, #112]	; (8002c38 <HAL_I2C_MspInit+0x90>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d132      	bne.n	8002c30 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bca:	4b1c      	ldr	r3, [pc, #112]	; (8002c3c <HAL_I2C_MspInit+0x94>)
 8002bcc:	695a      	ldr	r2, [r3, #20]
 8002bce:	4b1b      	ldr	r3, [pc, #108]	; (8002c3c <HAL_I2C_MspInit+0x94>)
 8002bd0:	2180      	movs	r1, #128	; 0x80
 8002bd2:	02c9      	lsls	r1, r1, #11
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	615a      	str	r2, [r3, #20]
 8002bd8:	4b18      	ldr	r3, [pc, #96]	; (8002c3c <HAL_I2C_MspInit+0x94>)
 8002bda:	695a      	ldr	r2, [r3, #20]
 8002bdc:	2380      	movs	r3, #128	; 0x80
 8002bde:	02db      	lsls	r3, r3, #11
 8002be0:	4013      	ands	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]
 8002be4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002be6:	193b      	adds	r3, r7, r4
 8002be8:	22c0      	movs	r2, #192	; 0xc0
 8002bea:	0112      	lsls	r2, r2, #4
 8002bec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bee:	0021      	movs	r1, r4
 8002bf0:	187b      	adds	r3, r7, r1
 8002bf2:	2212      	movs	r2, #18
 8002bf4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	187b      	adds	r3, r7, r1
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bfc:	187b      	adds	r3, r7, r1
 8002bfe:	2203      	movs	r2, #3
 8002c00:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8002c02:	187b      	adds	r3, r7, r1
 8002c04:	2201      	movs	r2, #1
 8002c06:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c08:	187b      	adds	r3, r7, r1
 8002c0a:	4a0d      	ldr	r2, [pc, #52]	; (8002c40 <HAL_I2C_MspInit+0x98>)
 8002c0c:	0019      	movs	r1, r3
 8002c0e:	0010      	movs	r0, r2
 8002c10:	f000 fbd6 	bl	80033c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002c14:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <HAL_I2C_MspInit+0x94>)
 8002c16:	69da      	ldr	r2, [r3, #28]
 8002c18:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <HAL_I2C_MspInit+0x94>)
 8002c1a:	2180      	movs	r1, #128	; 0x80
 8002c1c:	03c9      	lsls	r1, r1, #15
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	61da      	str	r2, [r3, #28]
 8002c22:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <HAL_I2C_MspInit+0x94>)
 8002c24:	69da      	ldr	r2, [r3, #28]
 8002c26:	2380      	movs	r3, #128	; 0x80
 8002c28:	03db      	lsls	r3, r3, #15
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002c30:	46c0      	nop			; (mov r8, r8)
 8002c32:	46bd      	mov	sp, r7
 8002c34:	b00b      	add	sp, #44	; 0x2c
 8002c36:	bd90      	pop	{r4, r7, pc}
 8002c38:	40005800 	.word	0x40005800
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	48000400 	.word	0x48000400

08002c44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a26      	ldr	r2, [pc, #152]	; (8002cec <HAL_TIM_Base_MspInit+0xa8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d10e      	bne.n	8002c74 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c56:	4b26      	ldr	r3, [pc, #152]	; (8002cf0 <HAL_TIM_Base_MspInit+0xac>)
 8002c58:	699a      	ldr	r2, [r3, #24]
 8002c5a:	4b25      	ldr	r3, [pc, #148]	; (8002cf0 <HAL_TIM_Base_MspInit+0xac>)
 8002c5c:	2180      	movs	r1, #128	; 0x80
 8002c5e:	0109      	lsls	r1, r1, #4
 8002c60:	430a      	orrs	r2, r1
 8002c62:	619a      	str	r2, [r3, #24]
 8002c64:	4b22      	ldr	r3, [pc, #136]	; (8002cf0 <HAL_TIM_Base_MspInit+0xac>)
 8002c66:	699a      	ldr	r2, [r3, #24]
 8002c68:	2380      	movs	r3, #128	; 0x80
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002c72:	e036      	b.n	8002ce2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a1e      	ldr	r2, [pc, #120]	; (8002cf4 <HAL_TIM_Base_MspInit+0xb0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d10c      	bne.n	8002c98 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c7e:	4b1c      	ldr	r3, [pc, #112]	; (8002cf0 <HAL_TIM_Base_MspInit+0xac>)
 8002c80:	69da      	ldr	r2, [r3, #28]
 8002c82:	4b1b      	ldr	r3, [pc, #108]	; (8002cf0 <HAL_TIM_Base_MspInit+0xac>)
 8002c84:	2102      	movs	r1, #2
 8002c86:	430a      	orrs	r2, r1
 8002c88:	61da      	str	r2, [r3, #28]
 8002c8a:	4b19      	ldr	r3, [pc, #100]	; (8002cf0 <HAL_TIM_Base_MspInit+0xac>)
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	4013      	ands	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	693b      	ldr	r3, [r7, #16]
}
 8002c96:	e024      	b.n	8002ce2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM6)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a16      	ldr	r2, [pc, #88]	; (8002cf8 <HAL_TIM_Base_MspInit+0xb4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d10c      	bne.n	8002cbc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002ca2:	4b13      	ldr	r3, [pc, #76]	; (8002cf0 <HAL_TIM_Base_MspInit+0xac>)
 8002ca4:	69da      	ldr	r2, [r3, #28]
 8002ca6:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <HAL_TIM_Base_MspInit+0xac>)
 8002ca8:	2110      	movs	r1, #16
 8002caa:	430a      	orrs	r2, r1
 8002cac:	61da      	str	r2, [r3, #28]
 8002cae:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <HAL_TIM_Base_MspInit+0xac>)
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	2210      	movs	r2, #16
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
}
 8002cba:	e012      	b.n	8002ce2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM14)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a0e      	ldr	r2, [pc, #56]	; (8002cfc <HAL_TIM_Base_MspInit+0xb8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d10d      	bne.n	8002ce2 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002cc6:	4b0a      	ldr	r3, [pc, #40]	; (8002cf0 <HAL_TIM_Base_MspInit+0xac>)
 8002cc8:	69da      	ldr	r2, [r3, #28]
 8002cca:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <HAL_TIM_Base_MspInit+0xac>)
 8002ccc:	2180      	movs	r1, #128	; 0x80
 8002cce:	0049      	lsls	r1, r1, #1
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	61da      	str	r2, [r3, #28]
 8002cd4:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <HAL_TIM_Base_MspInit+0xac>)
 8002cd6:	69da      	ldr	r2, [r3, #28]
 8002cd8:	2380      	movs	r3, #128	; 0x80
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	4013      	ands	r3, r2
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
}
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	b006      	add	sp, #24
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	40012c00 	.word	0x40012c00
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40000400 	.word	0x40000400
 8002cf8:	40001000 	.word	0x40001000
 8002cfc:	40002000 	.word	0x40002000

08002d00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d00:	b590      	push	{r4, r7, lr}
 8002d02:	b08d      	sub	sp, #52	; 0x34
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d08:	241c      	movs	r4, #28
 8002d0a:	193b      	adds	r3, r7, r4
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	2314      	movs	r3, #20
 8002d10:	001a      	movs	r2, r3
 8002d12:	2100      	movs	r1, #0
 8002d14:	f004 fa70 	bl	80071f8 <memset>
  if(huart->Instance==USART1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a39      	ldr	r2, [pc, #228]	; (8002e04 <HAL_UART_MspInit+0x104>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d134      	bne.n	8002d8c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d22:	4b39      	ldr	r3, [pc, #228]	; (8002e08 <HAL_UART_MspInit+0x108>)
 8002d24:	699a      	ldr	r2, [r3, #24]
 8002d26:	4b38      	ldr	r3, [pc, #224]	; (8002e08 <HAL_UART_MspInit+0x108>)
 8002d28:	2180      	movs	r1, #128	; 0x80
 8002d2a:	01c9      	lsls	r1, r1, #7
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	619a      	str	r2, [r3, #24]
 8002d30:	4b35      	ldr	r3, [pc, #212]	; (8002e08 <HAL_UART_MspInit+0x108>)
 8002d32:	699a      	ldr	r2, [r3, #24]
 8002d34:	2380      	movs	r3, #128	; 0x80
 8002d36:	01db      	lsls	r3, r3, #7
 8002d38:	4013      	ands	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
 8002d3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d3e:	4b32      	ldr	r3, [pc, #200]	; (8002e08 <HAL_UART_MspInit+0x108>)
 8002d40:	695a      	ldr	r2, [r3, #20]
 8002d42:	4b31      	ldr	r3, [pc, #196]	; (8002e08 <HAL_UART_MspInit+0x108>)
 8002d44:	2180      	movs	r1, #128	; 0x80
 8002d46:	0289      	lsls	r1, r1, #10
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	615a      	str	r2, [r3, #20]
 8002d4c:	4b2e      	ldr	r3, [pc, #184]	; (8002e08 <HAL_UART_MspInit+0x108>)
 8002d4e:	695a      	ldr	r2, [r3, #20]
 8002d50:	2380      	movs	r3, #128	; 0x80
 8002d52:	029b      	lsls	r3, r3, #10
 8002d54:	4013      	ands	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d5a:	193b      	adds	r3, r7, r4
 8002d5c:	22c0      	movs	r2, #192	; 0xc0
 8002d5e:	00d2      	lsls	r2, r2, #3
 8002d60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d62:	0021      	movs	r1, r4
 8002d64:	187b      	adds	r3, r7, r1
 8002d66:	2202      	movs	r2, #2
 8002d68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6a:	187b      	adds	r3, r7, r1
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d70:	187b      	adds	r3, r7, r1
 8002d72:	2203      	movs	r2, #3
 8002d74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002d76:	187b      	adds	r3, r7, r1
 8002d78:	2201      	movs	r2, #1
 8002d7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d7c:	187a      	adds	r2, r7, r1
 8002d7e:	2390      	movs	r3, #144	; 0x90
 8002d80:	05db      	lsls	r3, r3, #23
 8002d82:	0011      	movs	r1, r2
 8002d84:	0018      	movs	r0, r3
 8002d86:	f000 fb1b 	bl	80033c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d8a:	e037      	b.n	8002dfc <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a1e      	ldr	r2, [pc, #120]	; (8002e0c <HAL_UART_MspInit+0x10c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d132      	bne.n	8002dfc <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d96:	4b1c      	ldr	r3, [pc, #112]	; (8002e08 <HAL_UART_MspInit+0x108>)
 8002d98:	69da      	ldr	r2, [r3, #28]
 8002d9a:	4b1b      	ldr	r3, [pc, #108]	; (8002e08 <HAL_UART_MspInit+0x108>)
 8002d9c:	2180      	movs	r1, #128	; 0x80
 8002d9e:	0289      	lsls	r1, r1, #10
 8002da0:	430a      	orrs	r2, r1
 8002da2:	61da      	str	r2, [r3, #28]
 8002da4:	4b18      	ldr	r3, [pc, #96]	; (8002e08 <HAL_UART_MspInit+0x108>)
 8002da6:	69da      	ldr	r2, [r3, #28]
 8002da8:	2380      	movs	r3, #128	; 0x80
 8002daa:	029b      	lsls	r3, r3, #10
 8002dac:	4013      	ands	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db2:	4b15      	ldr	r3, [pc, #84]	; (8002e08 <HAL_UART_MspInit+0x108>)
 8002db4:	695a      	ldr	r2, [r3, #20]
 8002db6:	4b14      	ldr	r3, [pc, #80]	; (8002e08 <HAL_UART_MspInit+0x108>)
 8002db8:	2180      	movs	r1, #128	; 0x80
 8002dba:	0289      	lsls	r1, r1, #10
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	615a      	str	r2, [r3, #20]
 8002dc0:	4b11      	ldr	r3, [pc, #68]	; (8002e08 <HAL_UART_MspInit+0x108>)
 8002dc2:	695a      	ldr	r2, [r3, #20]
 8002dc4:	2380      	movs	r3, #128	; 0x80
 8002dc6:	029b      	lsls	r3, r3, #10
 8002dc8:	4013      	ands	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002dce:	211c      	movs	r1, #28
 8002dd0:	187b      	adds	r3, r7, r1
 8002dd2:	220c      	movs	r2, #12
 8002dd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd6:	187b      	adds	r3, r7, r1
 8002dd8:	2202      	movs	r2, #2
 8002dda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ddc:	187b      	adds	r3, r7, r1
 8002dde:	2200      	movs	r2, #0
 8002de0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002de2:	187b      	adds	r3, r7, r1
 8002de4:	2203      	movs	r2, #3
 8002de6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002de8:	187b      	adds	r3, r7, r1
 8002dea:	2201      	movs	r2, #1
 8002dec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dee:	187a      	adds	r2, r7, r1
 8002df0:	2390      	movs	r3, #144	; 0x90
 8002df2:	05db      	lsls	r3, r3, #23
 8002df4:	0011      	movs	r1, r2
 8002df6:	0018      	movs	r0, r3
 8002df8:	f000 fae2 	bl	80033c0 <HAL_GPIO_Init>
}
 8002dfc:	46c0      	nop			; (mov r8, r8)
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	b00d      	add	sp, #52	; 0x34
 8002e02:	bd90      	pop	{r4, r7, pc}
 8002e04:	40013800 	.word	0x40013800
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	40004400 	.word	0x40004400

08002e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e14:	e7fe      	b.n	8002e14 <NMI_Handler+0x4>

08002e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e1a:	e7fe      	b.n	8002e1a <HardFault_Handler+0x4>

08002e1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002e20:	46c0      	nop			; (mov r8, r8)
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e34:	f000 f95e 	bl	80030f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e38:	46c0      	nop			; (mov r8, r8)
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(vsyncEXTI13_Pin);
 8002e44:	2380      	movs	r3, #128	; 0x80
 8002e46:	019b      	lsls	r3, r3, #6
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f000 fc63 	bl	8003714 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */
  //PB10 = vsync pin. Check the vsync pin is set or reset
  if(vsync == 0)
 8002e4e:	4b0d      	ldr	r3, [pc, #52]	; (8002e84 <EXTI4_15_IRQHandler+0x44>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d103      	bne.n	8002e5e <EXTI4_15_IRQHandler+0x1e>
    {
  	  vsync = 1;
 8002e56:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <EXTI4_15_IRQHandler+0x44>)
 8002e58:	2201      	movs	r2, #1
 8002e5a:	701a      	strb	r2, [r3, #0]




  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002e5c:	e00e      	b.n	8002e7c <EXTI4_15_IRQHandler+0x3c>
    }else if(vsync == 1)
 8002e5e:	4b09      	ldr	r3, [pc, #36]	; (8002e84 <EXTI4_15_IRQHandler+0x44>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d103      	bne.n	8002e6e <EXTI4_15_IRQHandler+0x2e>
  	  vsync = 2;
 8002e66:	4b07      	ldr	r3, [pc, #28]	; (8002e84 <EXTI4_15_IRQHandler+0x44>)
 8002e68:	2202      	movs	r2, #2
 8002e6a:	701a      	strb	r2, [r3, #0]
}
 8002e6c:	e006      	b.n	8002e7c <EXTI4_15_IRQHandler+0x3c>
    }else if (vsync == 2)
 8002e6e:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <EXTI4_15_IRQHandler+0x44>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d102      	bne.n	8002e7c <EXTI4_15_IRQHandler+0x3c>
  	  vsync =0;
 8002e76:	4b03      	ldr	r3, [pc, #12]	; (8002e84 <EXTI4_15_IRQHandler+0x44>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]
}
 8002e7c:	46c0      	nop			; (mov r8, r8)
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	200005d0 	.word	0x200005d0

08002e88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  return 1;
 8002e8c:	2301      	movs	r3, #1
}
 8002e8e:	0018      	movs	r0, r3
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <_kill>:

int _kill(int pid, int sig)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e9e:	f004 fa05 	bl	80072ac <__errno>
 8002ea2:	0003      	movs	r3, r0
 8002ea4:	2216      	movs	r2, #22
 8002ea6:	601a      	str	r2, [r3, #0]
  return -1;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	425b      	negs	r3, r3
}
 8002eac:	0018      	movs	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	b002      	add	sp, #8
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <_exit>:

void _exit (int status)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	425a      	negs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	0011      	movs	r1, r2
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	f7ff ffe5 	bl	8002e94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002eca:	e7fe      	b.n	8002eca <_exit+0x16>

08002ecc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ed8:	2300      	movs	r3, #0
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	e00a      	b.n	8002ef4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ede:	e000      	b.n	8002ee2 <_read+0x16>
 8002ee0:	bf00      	nop
 8002ee2:	0001      	movs	r1, r0
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	1c5a      	adds	r2, r3, #1
 8002ee8:	60ba      	str	r2, [r7, #8]
 8002eea:	b2ca      	uxtb	r2, r1
 8002eec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	dbf0      	blt.n	8002ede <_read+0x12>
  }

  return len;
 8002efc:	687b      	ldr	r3, [r7, #4]
}
 8002efe:	0018      	movs	r0, r3
 8002f00:	46bd      	mov	sp, r7
 8002f02:	b006      	add	sp, #24
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b086      	sub	sp, #24
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	60f8      	str	r0, [r7, #12]
 8002f0e:	60b9      	str	r1, [r7, #8]
 8002f10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f12:	2300      	movs	r3, #0
 8002f14:	617b      	str	r3, [r7, #20]
 8002f16:	e009      	b.n	8002f2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	1c5a      	adds	r2, r3, #1
 8002f1c:	60ba      	str	r2, [r7, #8]
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	0018      	movs	r0, r3
 8002f22:	e000      	b.n	8002f26 <_write+0x20>
 8002f24:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	dbf1      	blt.n	8002f18 <_write+0x12>
  }
  return len;
 8002f34:	687b      	ldr	r3, [r7, #4]
}
 8002f36:	0018      	movs	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	b006      	add	sp, #24
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <_close>:

int _close(int file)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f46:	2301      	movs	r3, #1
 8002f48:	425b      	negs	r3, r3
}
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	b002      	add	sp, #8
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	2280      	movs	r2, #128	; 0x80
 8002f60:	0192      	lsls	r2, r2, #6
 8002f62:	605a      	str	r2, [r3, #4]
  return 0;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	0018      	movs	r0, r3
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	b002      	add	sp, #8
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <_isatty>:

int _isatty(int file)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f76:	2301      	movs	r3, #1
}
 8002f78:	0018      	movs	r0, r3
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	b002      	add	sp, #8
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	0018      	movs	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	b004      	add	sp, #16
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fa0:	4a14      	ldr	r2, [pc, #80]	; (8002ff4 <_sbrk+0x5c>)
 8002fa2:	4b15      	ldr	r3, [pc, #84]	; (8002ff8 <_sbrk+0x60>)
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fac:	4b13      	ldr	r3, [pc, #76]	; (8002ffc <_sbrk+0x64>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d102      	bne.n	8002fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fb4:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <_sbrk+0x64>)
 8002fb6:	4a12      	ldr	r2, [pc, #72]	; (8003000 <_sbrk+0x68>)
 8002fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fba:	4b10      	ldr	r3, [pc, #64]	; (8002ffc <_sbrk+0x64>)
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	18d3      	adds	r3, r2, r3
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d207      	bcs.n	8002fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fc8:	f004 f970 	bl	80072ac <__errno>
 8002fcc:	0003      	movs	r3, r0
 8002fce:	220c      	movs	r2, #12
 8002fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	425b      	negs	r3, r3
 8002fd6:	e009      	b.n	8002fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fd8:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <_sbrk+0x64>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fde:	4b07      	ldr	r3, [pc, #28]	; (8002ffc <_sbrk+0x64>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	18d2      	adds	r2, r2, r3
 8002fe6:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <_sbrk+0x64>)
 8002fe8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002fea:	68fb      	ldr	r3, [r7, #12]
}
 8002fec:	0018      	movs	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	b006      	add	sp, #24
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	20002000 	.word	0x20002000
 8002ff8:	00000400 	.word	0x00000400
 8002ffc:	200005d4 	.word	0x200005d4
 8003000:	20000728 	.word	0x20000728

08003004 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003008:	46c0      	nop			; (mov r8, r8)
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003010:	480d      	ldr	r0, [pc, #52]	; (8003048 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003012:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003014:	f7ff fff6 	bl	8003004 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003018:	480c      	ldr	r0, [pc, #48]	; (800304c <LoopForever+0x6>)
  ldr r1, =_edata
 800301a:	490d      	ldr	r1, [pc, #52]	; (8003050 <LoopForever+0xa>)
  ldr r2, =_sidata
 800301c:	4a0d      	ldr	r2, [pc, #52]	; (8003054 <LoopForever+0xe>)
  movs r3, #0
 800301e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003020:	e002      	b.n	8003028 <LoopCopyDataInit>

08003022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003026:	3304      	adds	r3, #4

08003028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800302a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800302c:	d3f9      	bcc.n	8003022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800302e:	4a0a      	ldr	r2, [pc, #40]	; (8003058 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003030:	4c0a      	ldr	r4, [pc, #40]	; (800305c <LoopForever+0x16>)
  movs r3, #0
 8003032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003034:	e001      	b.n	800303a <LoopFillZerobss>

08003036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003038:	3204      	adds	r2, #4

0800303a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800303a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800303c:	d3fb      	bcc.n	8003036 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800303e:	f004 f93b 	bl	80072b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003042:	f7ff f897 	bl	8002174 <main>

08003046 <LoopForever>:

LoopForever:
    b LoopForever
 8003046:	e7fe      	b.n	8003046 <LoopForever>
  ldr   r0, =_estack
 8003048:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800304c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003050:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003054:	0800961c 	.word	0x0800961c
  ldr r2, =_sbss
 8003058:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800305c:	20000728 	.word	0x20000728

08003060 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003060:	e7fe      	b.n	8003060 <ADC1_IRQHandler>
	...

08003064 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003068:	4b07      	ldr	r3, [pc, #28]	; (8003088 <HAL_Init+0x24>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	4b06      	ldr	r3, [pc, #24]	; (8003088 <HAL_Init+0x24>)
 800306e:	2110      	movs	r1, #16
 8003070:	430a      	orrs	r2, r1
 8003072:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003074:	2003      	movs	r0, #3
 8003076:	f000 f809 	bl	800308c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800307a:	f7ff fd53 	bl	8002b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	0018      	movs	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	40022000 	.word	0x40022000

0800308c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800308c:	b590      	push	{r4, r7, lr}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003094:	4b14      	ldr	r3, [pc, #80]	; (80030e8 <HAL_InitTick+0x5c>)
 8003096:	681c      	ldr	r4, [r3, #0]
 8003098:	4b14      	ldr	r3, [pc, #80]	; (80030ec <HAL_InitTick+0x60>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	0019      	movs	r1, r3
 800309e:	23fa      	movs	r3, #250	; 0xfa
 80030a0:	0098      	lsls	r0, r3, #2
 80030a2:	f7fd f84d 	bl	8000140 <__udivsi3>
 80030a6:	0003      	movs	r3, r0
 80030a8:	0019      	movs	r1, r3
 80030aa:	0020      	movs	r0, r4
 80030ac:	f7fd f848 	bl	8000140 <__udivsi3>
 80030b0:	0003      	movs	r3, r0
 80030b2:	0018      	movs	r0, r3
 80030b4:	f000 f92f 	bl	8003316 <HAL_SYSTICK_Config>
 80030b8:	1e03      	subs	r3, r0, #0
 80030ba:	d001      	beq.n	80030c0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e00f      	b.n	80030e0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d80b      	bhi.n	80030de <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	2301      	movs	r3, #1
 80030ca:	425b      	negs	r3, r3
 80030cc:	2200      	movs	r2, #0
 80030ce:	0018      	movs	r0, r3
 80030d0:	f000 f8fc 	bl	80032cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030d4:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <HAL_InitTick+0x64>)
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	e000      	b.n	80030e0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
}
 80030e0:	0018      	movs	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b003      	add	sp, #12
 80030e6:	bd90      	pop	{r4, r7, pc}
 80030e8:	20000000 	.word	0x20000000
 80030ec:	20000008 	.word	0x20000008
 80030f0:	20000004 	.word	0x20000004

080030f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030f8:	4b05      	ldr	r3, [pc, #20]	; (8003110 <HAL_IncTick+0x1c>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	001a      	movs	r2, r3
 80030fe:	4b05      	ldr	r3, [pc, #20]	; (8003114 <HAL_IncTick+0x20>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	18d2      	adds	r2, r2, r3
 8003104:	4b03      	ldr	r3, [pc, #12]	; (8003114 <HAL_IncTick+0x20>)
 8003106:	601a      	str	r2, [r3, #0]
}
 8003108:	46c0      	nop			; (mov r8, r8)
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	20000008 	.word	0x20000008
 8003114:	200005d8 	.word	0x200005d8

08003118 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  return uwTick;
 800311c:	4b02      	ldr	r3, [pc, #8]	; (8003128 <HAL_GetTick+0x10>)
 800311e:	681b      	ldr	r3, [r3, #0]
}
 8003120:	0018      	movs	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	200005d8 	.word	0x200005d8

0800312c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003134:	f7ff fff0 	bl	8003118 <HAL_GetTick>
 8003138:	0003      	movs	r3, r0
 800313a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	3301      	adds	r3, #1
 8003144:	d005      	beq.n	8003152 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003146:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <HAL_Delay+0x44>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	001a      	movs	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	189b      	adds	r3, r3, r2
 8003150:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	f7ff ffe0 	bl	8003118 <HAL_GetTick>
 8003158:	0002      	movs	r2, r0
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	429a      	cmp	r2, r3
 8003162:	d8f7      	bhi.n	8003154 <HAL_Delay+0x28>
  {
  }
}
 8003164:	46c0      	nop			; (mov r8, r8)
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	46bd      	mov	sp, r7
 800316a:	b004      	add	sp, #16
 800316c:	bd80      	pop	{r7, pc}
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	20000008 	.word	0x20000008

08003174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	0002      	movs	r2, r0
 800317c:	1dfb      	adds	r3, r7, #7
 800317e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003180:	1dfb      	adds	r3, r7, #7
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b7f      	cmp	r3, #127	; 0x7f
 8003186:	d809      	bhi.n	800319c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003188:	1dfb      	adds	r3, r7, #7
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	001a      	movs	r2, r3
 800318e:	231f      	movs	r3, #31
 8003190:	401a      	ands	r2, r3
 8003192:	4b04      	ldr	r3, [pc, #16]	; (80031a4 <__NVIC_EnableIRQ+0x30>)
 8003194:	2101      	movs	r1, #1
 8003196:	4091      	lsls	r1, r2
 8003198:	000a      	movs	r2, r1
 800319a:	601a      	str	r2, [r3, #0]
  }
}
 800319c:	46c0      	nop			; (mov r8, r8)
 800319e:	46bd      	mov	sp, r7
 80031a0:	b002      	add	sp, #8
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	e000e100 	.word	0xe000e100

080031a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031a8:	b590      	push	{r4, r7, lr}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	0002      	movs	r2, r0
 80031b0:	6039      	str	r1, [r7, #0]
 80031b2:	1dfb      	adds	r3, r7, #7
 80031b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80031b6:	1dfb      	adds	r3, r7, #7
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b7f      	cmp	r3, #127	; 0x7f
 80031bc:	d828      	bhi.n	8003210 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031be:	4a2f      	ldr	r2, [pc, #188]	; (800327c <__NVIC_SetPriority+0xd4>)
 80031c0:	1dfb      	adds	r3, r7, #7
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	b25b      	sxtb	r3, r3
 80031c6:	089b      	lsrs	r3, r3, #2
 80031c8:	33c0      	adds	r3, #192	; 0xc0
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	589b      	ldr	r3, [r3, r2]
 80031ce:	1dfa      	adds	r2, r7, #7
 80031d0:	7812      	ldrb	r2, [r2, #0]
 80031d2:	0011      	movs	r1, r2
 80031d4:	2203      	movs	r2, #3
 80031d6:	400a      	ands	r2, r1
 80031d8:	00d2      	lsls	r2, r2, #3
 80031da:	21ff      	movs	r1, #255	; 0xff
 80031dc:	4091      	lsls	r1, r2
 80031de:	000a      	movs	r2, r1
 80031e0:	43d2      	mvns	r2, r2
 80031e2:	401a      	ands	r2, r3
 80031e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	019b      	lsls	r3, r3, #6
 80031ea:	22ff      	movs	r2, #255	; 0xff
 80031ec:	401a      	ands	r2, r3
 80031ee:	1dfb      	adds	r3, r7, #7
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	0018      	movs	r0, r3
 80031f4:	2303      	movs	r3, #3
 80031f6:	4003      	ands	r3, r0
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031fc:	481f      	ldr	r0, [pc, #124]	; (800327c <__NVIC_SetPriority+0xd4>)
 80031fe:	1dfb      	adds	r3, r7, #7
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	b25b      	sxtb	r3, r3
 8003204:	089b      	lsrs	r3, r3, #2
 8003206:	430a      	orrs	r2, r1
 8003208:	33c0      	adds	r3, #192	; 0xc0
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800320e:	e031      	b.n	8003274 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003210:	4a1b      	ldr	r2, [pc, #108]	; (8003280 <__NVIC_SetPriority+0xd8>)
 8003212:	1dfb      	adds	r3, r7, #7
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	0019      	movs	r1, r3
 8003218:	230f      	movs	r3, #15
 800321a:	400b      	ands	r3, r1
 800321c:	3b08      	subs	r3, #8
 800321e:	089b      	lsrs	r3, r3, #2
 8003220:	3306      	adds	r3, #6
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	18d3      	adds	r3, r2, r3
 8003226:	3304      	adds	r3, #4
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	1dfa      	adds	r2, r7, #7
 800322c:	7812      	ldrb	r2, [r2, #0]
 800322e:	0011      	movs	r1, r2
 8003230:	2203      	movs	r2, #3
 8003232:	400a      	ands	r2, r1
 8003234:	00d2      	lsls	r2, r2, #3
 8003236:	21ff      	movs	r1, #255	; 0xff
 8003238:	4091      	lsls	r1, r2
 800323a:	000a      	movs	r2, r1
 800323c:	43d2      	mvns	r2, r2
 800323e:	401a      	ands	r2, r3
 8003240:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	019b      	lsls	r3, r3, #6
 8003246:	22ff      	movs	r2, #255	; 0xff
 8003248:	401a      	ands	r2, r3
 800324a:	1dfb      	adds	r3, r7, #7
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	0018      	movs	r0, r3
 8003250:	2303      	movs	r3, #3
 8003252:	4003      	ands	r3, r0
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003258:	4809      	ldr	r0, [pc, #36]	; (8003280 <__NVIC_SetPriority+0xd8>)
 800325a:	1dfb      	adds	r3, r7, #7
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	001c      	movs	r4, r3
 8003260:	230f      	movs	r3, #15
 8003262:	4023      	ands	r3, r4
 8003264:	3b08      	subs	r3, #8
 8003266:	089b      	lsrs	r3, r3, #2
 8003268:	430a      	orrs	r2, r1
 800326a:	3306      	adds	r3, #6
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	18c3      	adds	r3, r0, r3
 8003270:	3304      	adds	r3, #4
 8003272:	601a      	str	r2, [r3, #0]
}
 8003274:	46c0      	nop			; (mov r8, r8)
 8003276:	46bd      	mov	sp, r7
 8003278:	b003      	add	sp, #12
 800327a:	bd90      	pop	{r4, r7, pc}
 800327c:	e000e100 	.word	0xe000e100
 8003280:	e000ed00 	.word	0xe000ed00

08003284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	1e5a      	subs	r2, r3, #1
 8003290:	2380      	movs	r3, #128	; 0x80
 8003292:	045b      	lsls	r3, r3, #17
 8003294:	429a      	cmp	r2, r3
 8003296:	d301      	bcc.n	800329c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003298:	2301      	movs	r3, #1
 800329a:	e010      	b.n	80032be <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800329c:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <SysTick_Config+0x44>)
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	3a01      	subs	r2, #1
 80032a2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032a4:	2301      	movs	r3, #1
 80032a6:	425b      	negs	r3, r3
 80032a8:	2103      	movs	r1, #3
 80032aa:	0018      	movs	r0, r3
 80032ac:	f7ff ff7c 	bl	80031a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032b0:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <SysTick_Config+0x44>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032b6:	4b04      	ldr	r3, [pc, #16]	; (80032c8 <SysTick_Config+0x44>)
 80032b8:	2207      	movs	r2, #7
 80032ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032bc:	2300      	movs	r3, #0
}
 80032be:	0018      	movs	r0, r3
 80032c0:	46bd      	mov	sp, r7
 80032c2:	b002      	add	sp, #8
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	e000e010 	.word	0xe000e010

080032cc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	607a      	str	r2, [r7, #4]
 80032d6:	210f      	movs	r1, #15
 80032d8:	187b      	adds	r3, r7, r1
 80032da:	1c02      	adds	r2, r0, #0
 80032dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	187b      	adds	r3, r7, r1
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	b25b      	sxtb	r3, r3
 80032e6:	0011      	movs	r1, r2
 80032e8:	0018      	movs	r0, r3
 80032ea:	f7ff ff5d 	bl	80031a8 <__NVIC_SetPriority>
}
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	46bd      	mov	sp, r7
 80032f2:	b004      	add	sp, #16
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	0002      	movs	r2, r0
 80032fe:	1dfb      	adds	r3, r7, #7
 8003300:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003302:	1dfb      	adds	r3, r7, #7
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	b25b      	sxtb	r3, r3
 8003308:	0018      	movs	r0, r3
 800330a:	f7ff ff33 	bl	8003174 <__NVIC_EnableIRQ>
}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	46bd      	mov	sp, r7
 8003312:	b002      	add	sp, #8
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b082      	sub	sp, #8
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	0018      	movs	r0, r3
 8003322:	f7ff ffaf 	bl	8003284 <SysTick_Config>
 8003326:	0003      	movs	r3, r0
}
 8003328:	0018      	movs	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	b002      	add	sp, #8
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e039      	b.n	80033b6 <HAL_CRC_Init+0x86>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	7d5b      	ldrb	r3, [r3, #21]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d106      	bne.n	800335a <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	751a      	strb	r2, [r3, #20]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	0018      	movs	r0, r3
 8003356:	f7ff fc09 	bl	8002b6c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2202      	movs	r2, #2
 800335e:	755a      	strb	r2, [r3, #21]
#endif /* CRC_POL_POL */

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	791b      	ldrb	r3, [r3, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d105      	bne.n	8003374 <HAL_CRC_Init+0x44>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2201      	movs	r2, #1
 800336e:	4252      	negs	r2, r2
 8003370:	611a      	str	r2, [r3, #16]
 8003372:	e004      	b.n	800337e <HAL_CRC_Init+0x4e>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	6892      	ldr	r2, [r2, #8]
 800337c:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	2260      	movs	r2, #96	; 0x60
 8003386:	4393      	bics	r3, r2
 8003388:	0019      	movs	r1, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	2280      	movs	r2, #128	; 0x80
 800339e:	4393      	bics	r3, r2
 80033a0:	0019      	movs	r1, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691a      	ldr	r2, [r3, #16]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	755a      	strb	r2, [r3, #21]

  /* Return function status */
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	0018      	movs	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b002      	add	sp, #8
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033ca:	2300      	movs	r3, #0
 80033cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ce:	e14f      	b.n	8003670 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2101      	movs	r1, #1
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4091      	lsls	r1, r2
 80033da:	000a      	movs	r2, r1
 80033dc:	4013      	ands	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d100      	bne.n	80033e8 <HAL_GPIO_Init+0x28>
 80033e6:	e140      	b.n	800366a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2203      	movs	r2, #3
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d005      	beq.n	8003400 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2203      	movs	r2, #3
 80033fa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d130      	bne.n	8003462 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	2203      	movs	r2, #3
 800340c:	409a      	lsls	r2, r3
 800340e:	0013      	movs	r3, r2
 8003410:	43da      	mvns	r2, r3
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	4013      	ands	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	409a      	lsls	r2, r3
 8003422:	0013      	movs	r3, r2
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003436:	2201      	movs	r2, #1
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	409a      	lsls	r2, r3
 800343c:	0013      	movs	r3, r2
 800343e:	43da      	mvns	r2, r3
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	4013      	ands	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	091b      	lsrs	r3, r3, #4
 800344c:	2201      	movs	r2, #1
 800344e:	401a      	ands	r2, r3
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	409a      	lsls	r2, r3
 8003454:	0013      	movs	r3, r2
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2203      	movs	r2, #3
 8003468:	4013      	ands	r3, r2
 800346a:	2b03      	cmp	r3, #3
 800346c:	d017      	beq.n	800349e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	2203      	movs	r2, #3
 800347a:	409a      	lsls	r2, r3
 800347c:	0013      	movs	r3, r2
 800347e:	43da      	mvns	r2, r3
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	4013      	ands	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	409a      	lsls	r2, r3
 8003490:	0013      	movs	r3, r2
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2203      	movs	r2, #3
 80034a4:	4013      	ands	r3, r2
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d123      	bne.n	80034f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	08da      	lsrs	r2, r3, #3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	3208      	adds	r2, #8
 80034b2:	0092      	lsls	r2, r2, #2
 80034b4:	58d3      	ldr	r3, [r2, r3]
 80034b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2207      	movs	r2, #7
 80034bc:	4013      	ands	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	220f      	movs	r2, #15
 80034c2:	409a      	lsls	r2, r3
 80034c4:	0013      	movs	r3, r2
 80034c6:	43da      	mvns	r2, r3
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	4013      	ands	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	691a      	ldr	r2, [r3, #16]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2107      	movs	r1, #7
 80034d6:	400b      	ands	r3, r1
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	409a      	lsls	r2, r3
 80034dc:	0013      	movs	r3, r2
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	08da      	lsrs	r2, r3, #3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3208      	adds	r2, #8
 80034ec:	0092      	lsls	r2, r2, #2
 80034ee:	6939      	ldr	r1, [r7, #16]
 80034f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	2203      	movs	r2, #3
 80034fe:	409a      	lsls	r2, r3
 8003500:	0013      	movs	r3, r2
 8003502:	43da      	mvns	r2, r3
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	4013      	ands	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2203      	movs	r2, #3
 8003510:	401a      	ands	r2, r3
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	409a      	lsls	r2, r3
 8003518:	0013      	movs	r3, r2
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4313      	orrs	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	23c0      	movs	r3, #192	; 0xc0
 800352c:	029b      	lsls	r3, r3, #10
 800352e:	4013      	ands	r3, r2
 8003530:	d100      	bne.n	8003534 <HAL_GPIO_Init+0x174>
 8003532:	e09a      	b.n	800366a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003534:	4b54      	ldr	r3, [pc, #336]	; (8003688 <HAL_GPIO_Init+0x2c8>)
 8003536:	699a      	ldr	r2, [r3, #24]
 8003538:	4b53      	ldr	r3, [pc, #332]	; (8003688 <HAL_GPIO_Init+0x2c8>)
 800353a:	2101      	movs	r1, #1
 800353c:	430a      	orrs	r2, r1
 800353e:	619a      	str	r2, [r3, #24]
 8003540:	4b51      	ldr	r3, [pc, #324]	; (8003688 <HAL_GPIO_Init+0x2c8>)
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	2201      	movs	r2, #1
 8003546:	4013      	ands	r3, r2
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800354c:	4a4f      	ldr	r2, [pc, #316]	; (800368c <HAL_GPIO_Init+0x2cc>)
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	089b      	lsrs	r3, r3, #2
 8003552:	3302      	adds	r3, #2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	589b      	ldr	r3, [r3, r2]
 8003558:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2203      	movs	r2, #3
 800355e:	4013      	ands	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	220f      	movs	r2, #15
 8003564:	409a      	lsls	r2, r3
 8003566:	0013      	movs	r3, r2
 8003568:	43da      	mvns	r2, r3
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	4013      	ands	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	2390      	movs	r3, #144	; 0x90
 8003574:	05db      	lsls	r3, r3, #23
 8003576:	429a      	cmp	r2, r3
 8003578:	d013      	beq.n	80035a2 <HAL_GPIO_Init+0x1e2>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a44      	ldr	r2, [pc, #272]	; (8003690 <HAL_GPIO_Init+0x2d0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00d      	beq.n	800359e <HAL_GPIO_Init+0x1de>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a43      	ldr	r2, [pc, #268]	; (8003694 <HAL_GPIO_Init+0x2d4>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d007      	beq.n	800359a <HAL_GPIO_Init+0x1da>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a42      	ldr	r2, [pc, #264]	; (8003698 <HAL_GPIO_Init+0x2d8>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d101      	bne.n	8003596 <HAL_GPIO_Init+0x1d6>
 8003592:	2303      	movs	r3, #3
 8003594:	e006      	b.n	80035a4 <HAL_GPIO_Init+0x1e4>
 8003596:	2305      	movs	r3, #5
 8003598:	e004      	b.n	80035a4 <HAL_GPIO_Init+0x1e4>
 800359a:	2302      	movs	r3, #2
 800359c:	e002      	b.n	80035a4 <HAL_GPIO_Init+0x1e4>
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <HAL_GPIO_Init+0x1e4>
 80035a2:	2300      	movs	r3, #0
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	2103      	movs	r1, #3
 80035a8:	400a      	ands	r2, r1
 80035aa:	0092      	lsls	r2, r2, #2
 80035ac:	4093      	lsls	r3, r2
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035b4:	4935      	ldr	r1, [pc, #212]	; (800368c <HAL_GPIO_Init+0x2cc>)
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	089b      	lsrs	r3, r3, #2
 80035ba:	3302      	adds	r3, #2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035c2:	4b36      	ldr	r3, [pc, #216]	; (800369c <HAL_GPIO_Init+0x2dc>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	43da      	mvns	r2, r3
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	4013      	ands	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	2380      	movs	r3, #128	; 0x80
 80035d8:	035b      	lsls	r3, r3, #13
 80035da:	4013      	ands	r3, r2
 80035dc:	d003      	beq.n	80035e6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80035e6:	4b2d      	ldr	r3, [pc, #180]	; (800369c <HAL_GPIO_Init+0x2dc>)
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80035ec:	4b2b      	ldr	r3, [pc, #172]	; (800369c <HAL_GPIO_Init+0x2dc>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	43da      	mvns	r2, r3
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4013      	ands	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	2380      	movs	r3, #128	; 0x80
 8003602:	039b      	lsls	r3, r3, #14
 8003604:	4013      	ands	r3, r2
 8003606:	d003      	beq.n	8003610 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003610:	4b22      	ldr	r3, [pc, #136]	; (800369c <HAL_GPIO_Init+0x2dc>)
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003616:	4b21      	ldr	r3, [pc, #132]	; (800369c <HAL_GPIO_Init+0x2dc>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	43da      	mvns	r2, r3
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	4013      	ands	r3, r2
 8003624:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	2380      	movs	r3, #128	; 0x80
 800362c:	029b      	lsls	r3, r3, #10
 800362e:	4013      	ands	r3, r2
 8003630:	d003      	beq.n	800363a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4313      	orrs	r3, r2
 8003638:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800363a:	4b18      	ldr	r3, [pc, #96]	; (800369c <HAL_GPIO_Init+0x2dc>)
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003640:	4b16      	ldr	r3, [pc, #88]	; (800369c <HAL_GPIO_Init+0x2dc>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	43da      	mvns	r2, r3
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	4013      	ands	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	2380      	movs	r3, #128	; 0x80
 8003656:	025b      	lsls	r3, r3, #9
 8003658:	4013      	ands	r3, r2
 800365a:	d003      	beq.n	8003664 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4313      	orrs	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003664:	4b0d      	ldr	r3, [pc, #52]	; (800369c <HAL_GPIO_Init+0x2dc>)
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	3301      	adds	r3, #1
 800366e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	40da      	lsrs	r2, r3
 8003678:	1e13      	subs	r3, r2, #0
 800367a:	d000      	beq.n	800367e <HAL_GPIO_Init+0x2be>
 800367c:	e6a8      	b.n	80033d0 <HAL_GPIO_Init+0x10>
  } 
}
 800367e:	46c0      	nop			; (mov r8, r8)
 8003680:	46c0      	nop			; (mov r8, r8)
 8003682:	46bd      	mov	sp, r7
 8003684:	b006      	add	sp, #24
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40021000 	.word	0x40021000
 800368c:	40010000 	.word	0x40010000
 8003690:	48000400 	.word	0x48000400
 8003694:	48000800 	.word	0x48000800
 8003698:	48000c00 	.word	0x48000c00
 800369c:	40010400 	.word	0x40010400

080036a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	000a      	movs	r2, r1
 80036aa:	1cbb      	adds	r3, r7, #2
 80036ac:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	1cba      	adds	r2, r7, #2
 80036b4:	8812      	ldrh	r2, [r2, #0]
 80036b6:	4013      	ands	r3, r2
 80036b8:	d004      	beq.n	80036c4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80036ba:	230f      	movs	r3, #15
 80036bc:	18fb      	adds	r3, r7, r3
 80036be:	2201      	movs	r2, #1
 80036c0:	701a      	strb	r2, [r3, #0]
 80036c2:	e003      	b.n	80036cc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036c4:	230f      	movs	r3, #15
 80036c6:	18fb      	adds	r3, r7, r3
 80036c8:	2200      	movs	r2, #0
 80036ca:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80036cc:	230f      	movs	r3, #15
 80036ce:	18fb      	adds	r3, r7, r3
 80036d0:	781b      	ldrb	r3, [r3, #0]
  }
 80036d2:	0018      	movs	r0, r3
 80036d4:	46bd      	mov	sp, r7
 80036d6:	b004      	add	sp, #16
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b082      	sub	sp, #8
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
 80036e2:	0008      	movs	r0, r1
 80036e4:	0011      	movs	r1, r2
 80036e6:	1cbb      	adds	r3, r7, #2
 80036e8:	1c02      	adds	r2, r0, #0
 80036ea:	801a      	strh	r2, [r3, #0]
 80036ec:	1c7b      	adds	r3, r7, #1
 80036ee:	1c0a      	adds	r2, r1, #0
 80036f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036f2:	1c7b      	adds	r3, r7, #1
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d004      	beq.n	8003704 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036fa:	1cbb      	adds	r3, r7, #2
 80036fc:	881a      	ldrh	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003702:	e003      	b.n	800370c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003704:	1cbb      	adds	r3, r7, #2
 8003706:	881a      	ldrh	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800370c:	46c0      	nop			; (mov r8, r8)
 800370e:	46bd      	mov	sp, r7
 8003710:	b002      	add	sp, #8
 8003712:	bd80      	pop	{r7, pc}

08003714 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	0002      	movs	r2, r0
 800371c:	1dbb      	adds	r3, r7, #6
 800371e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003720:	4b09      	ldr	r3, [pc, #36]	; (8003748 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	1dba      	adds	r2, r7, #6
 8003726:	8812      	ldrh	r2, [r2, #0]
 8003728:	4013      	ands	r3, r2
 800372a:	d008      	beq.n	800373e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800372c:	4b06      	ldr	r3, [pc, #24]	; (8003748 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800372e:	1dba      	adds	r2, r7, #6
 8003730:	8812      	ldrh	r2, [r2, #0]
 8003732:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003734:	1dbb      	adds	r3, r7, #6
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	0018      	movs	r0, r3
 800373a:	f000 f807 	bl	800374c <HAL_GPIO_EXTI_Callback>
  }
}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	46bd      	mov	sp, r7
 8003742:	b002      	add	sp, #8
 8003744:	bd80      	pop	{r7, pc}
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	40010400 	.word	0x40010400

0800374c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	0002      	movs	r2, r0
 8003754:	1dbb      	adds	r3, r7, #6
 8003756:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8003758:	46c0      	nop			; (mov r8, r8)
 800375a:	46bd      	mov	sp, r7
 800375c:	b002      	add	sp, #8
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e082      	b.n	8003878 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2241      	movs	r2, #65	; 0x41
 8003776:	5c9b      	ldrb	r3, [r3, r2]
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d107      	bne.n	800378e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2240      	movs	r2, #64	; 0x40
 8003782:	2100      	movs	r1, #0
 8003784:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	0018      	movs	r0, r3
 800378a:	f7ff fa0d 	bl	8002ba8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2241      	movs	r2, #65	; 0x41
 8003792:	2124      	movs	r1, #36	; 0x24
 8003794:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2101      	movs	r1, #1
 80037a2:	438a      	bics	r2, r1
 80037a4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4934      	ldr	r1, [pc, #208]	; (8003880 <HAL_I2C_Init+0x120>)
 80037b0:	400a      	ands	r2, r1
 80037b2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4931      	ldr	r1, [pc, #196]	; (8003884 <HAL_I2C_Init+0x124>)
 80037c0:	400a      	ands	r2, r1
 80037c2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d108      	bne.n	80037de <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2180      	movs	r1, #128	; 0x80
 80037d6:	0209      	lsls	r1, r1, #8
 80037d8:	430a      	orrs	r2, r1
 80037da:	609a      	str	r2, [r3, #8]
 80037dc:	e007      	b.n	80037ee <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2184      	movs	r1, #132	; 0x84
 80037e8:	0209      	lsls	r1, r1, #8
 80037ea:	430a      	orrs	r2, r1
 80037ec:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d104      	bne.n	8003800 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2280      	movs	r2, #128	; 0x80
 80037fc:	0112      	lsls	r2, r2, #4
 80037fe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	491f      	ldr	r1, [pc, #124]	; (8003888 <HAL_I2C_Init+0x128>)
 800380c:	430a      	orrs	r2, r1
 800380e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	491a      	ldr	r1, [pc, #104]	; (8003884 <HAL_I2C_Init+0x124>)
 800381c:	400a      	ands	r2, r1
 800381e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	431a      	orrs	r2, r3
 800382a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	69d9      	ldr	r1, [r3, #28]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1a      	ldr	r2, [r3, #32]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2101      	movs	r1, #1
 8003856:	430a      	orrs	r2, r1
 8003858:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2241      	movs	r2, #65	; 0x41
 8003864:	2120      	movs	r1, #32
 8003866:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2242      	movs	r2, #66	; 0x42
 8003872:	2100      	movs	r1, #0
 8003874:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	0018      	movs	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	b002      	add	sp, #8
 800387e:	bd80      	pop	{r7, pc}
 8003880:	f0ffffff 	.word	0xf0ffffff
 8003884:	ffff7fff 	.word	0xffff7fff
 8003888:	02008000 	.word	0x02008000

0800388c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800388c:	b590      	push	{r4, r7, lr}
 800388e:	b089      	sub	sp, #36	; 0x24
 8003890:	af02      	add	r7, sp, #8
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	0008      	movs	r0, r1
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	0019      	movs	r1, r3
 800389a:	230a      	movs	r3, #10
 800389c:	18fb      	adds	r3, r7, r3
 800389e:	1c02      	adds	r2, r0, #0
 80038a0:	801a      	strh	r2, [r3, #0]
 80038a2:	2308      	movs	r3, #8
 80038a4:	18fb      	adds	r3, r7, r3
 80038a6:	1c0a      	adds	r2, r1, #0
 80038a8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2241      	movs	r2, #65	; 0x41
 80038ae:	5c9b      	ldrb	r3, [r3, r2]
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b20      	cmp	r3, #32
 80038b4:	d000      	beq.n	80038b8 <HAL_I2C_Master_Transmit+0x2c>
 80038b6:	e0e7      	b.n	8003a88 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2240      	movs	r2, #64	; 0x40
 80038bc:	5c9b      	ldrb	r3, [r3, r2]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d101      	bne.n	80038c6 <HAL_I2C_Master_Transmit+0x3a>
 80038c2:	2302      	movs	r3, #2
 80038c4:	e0e1      	b.n	8003a8a <HAL_I2C_Master_Transmit+0x1fe>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2240      	movs	r2, #64	; 0x40
 80038ca:	2101      	movs	r1, #1
 80038cc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038ce:	f7ff fc23 	bl	8003118 <HAL_GetTick>
 80038d2:	0003      	movs	r3, r0
 80038d4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038d6:	2380      	movs	r3, #128	; 0x80
 80038d8:	0219      	lsls	r1, r3, #8
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	2319      	movs	r3, #25
 80038e2:	2201      	movs	r2, #1
 80038e4:	f000 fb96 	bl	8004014 <I2C_WaitOnFlagUntilTimeout>
 80038e8:	1e03      	subs	r3, r0, #0
 80038ea:	d001      	beq.n	80038f0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e0cc      	b.n	8003a8a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2241      	movs	r2, #65	; 0x41
 80038f4:	2121      	movs	r1, #33	; 0x21
 80038f6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2242      	movs	r2, #66	; 0x42
 80038fc:	2110      	movs	r1, #16
 80038fe:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2208      	movs	r2, #8
 8003910:	18ba      	adds	r2, r7, r2
 8003912:	8812      	ldrh	r2, [r2, #0]
 8003914:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003920:	b29b      	uxth	r3, r3
 8003922:	2bff      	cmp	r3, #255	; 0xff
 8003924:	d911      	bls.n	800394a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	22ff      	movs	r2, #255	; 0xff
 800392a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003930:	b2da      	uxtb	r2, r3
 8003932:	2380      	movs	r3, #128	; 0x80
 8003934:	045c      	lsls	r4, r3, #17
 8003936:	230a      	movs	r3, #10
 8003938:	18fb      	adds	r3, r7, r3
 800393a:	8819      	ldrh	r1, [r3, #0]
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	4b55      	ldr	r3, [pc, #340]	; (8003a94 <HAL_I2C_Master_Transmit+0x208>)
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	0023      	movs	r3, r4
 8003944:	f000 fdc0 	bl	80044c8 <I2C_TransferConfig>
 8003948:	e075      	b.n	8003a36 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003958:	b2da      	uxtb	r2, r3
 800395a:	2380      	movs	r3, #128	; 0x80
 800395c:	049c      	lsls	r4, r3, #18
 800395e:	230a      	movs	r3, #10
 8003960:	18fb      	adds	r3, r7, r3
 8003962:	8819      	ldrh	r1, [r3, #0]
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	4b4b      	ldr	r3, [pc, #300]	; (8003a94 <HAL_I2C_Master_Transmit+0x208>)
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	0023      	movs	r3, r4
 800396c:	f000 fdac 	bl	80044c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003970:	e061      	b.n	8003a36 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	0018      	movs	r0, r3
 800397a:	f000 fb99 	bl	80040b0 <I2C_WaitOnTXISFlagUntilTimeout>
 800397e:	1e03      	subs	r3, r0, #0
 8003980:	d001      	beq.n	8003986 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e081      	b.n	8003a8a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	781a      	ldrb	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	1c5a      	adds	r2, r3, #1
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ae:	3b01      	subs	r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d03a      	beq.n	8003a36 <HAL_I2C_Master_Transmit+0x1aa>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d136      	bne.n	8003a36 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	0013      	movs	r3, r2
 80039d2:	2200      	movs	r2, #0
 80039d4:	2180      	movs	r1, #128	; 0x80
 80039d6:	f000 fb1d 	bl	8004014 <I2C_WaitOnFlagUntilTimeout>
 80039da:	1e03      	subs	r3, r0, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e053      	b.n	8003a8a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	2bff      	cmp	r3, #255	; 0xff
 80039ea:	d911      	bls.n	8003a10 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	22ff      	movs	r2, #255	; 0xff
 80039f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	2380      	movs	r3, #128	; 0x80
 80039fa:	045c      	lsls	r4, r3, #17
 80039fc:	230a      	movs	r3, #10
 80039fe:	18fb      	adds	r3, r7, r3
 8003a00:	8819      	ldrh	r1, [r3, #0]
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	2300      	movs	r3, #0
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	0023      	movs	r3, r4
 8003a0a:	f000 fd5d 	bl	80044c8 <I2C_TransferConfig>
 8003a0e:	e012      	b.n	8003a36 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	2380      	movs	r3, #128	; 0x80
 8003a22:	049c      	lsls	r4, r3, #18
 8003a24:	230a      	movs	r3, #10
 8003a26:	18fb      	adds	r3, r7, r3
 8003a28:	8819      	ldrh	r1, [r3, #0]
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	0023      	movs	r3, r4
 8003a32:	f000 fd49 	bl	80044c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d198      	bne.n	8003972 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	0018      	movs	r0, r3
 8003a48:	f000 fb78 	bl	800413c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a4c:	1e03      	subs	r3, r0, #0
 8003a4e:	d001      	beq.n	8003a54 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e01a      	b.n	8003a8a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	490c      	ldr	r1, [pc, #48]	; (8003a98 <HAL_I2C_Master_Transmit+0x20c>)
 8003a68:	400a      	ands	r2, r1
 8003a6a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2241      	movs	r2, #65	; 0x41
 8003a70:	2120      	movs	r1, #32
 8003a72:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2242      	movs	r2, #66	; 0x42
 8003a78:	2100      	movs	r1, #0
 8003a7a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2240      	movs	r2, #64	; 0x40
 8003a80:	2100      	movs	r1, #0
 8003a82:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a84:	2300      	movs	r3, #0
 8003a86:	e000      	b.n	8003a8a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003a88:	2302      	movs	r3, #2
  }
}
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	b007      	add	sp, #28
 8003a90:	bd90      	pop	{r4, r7, pc}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	80002000 	.word	0x80002000
 8003a98:	fe00e800 	.word	0xfe00e800

08003a9c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003a9c:	b590      	push	{r4, r7, lr}
 8003a9e:	b089      	sub	sp, #36	; 0x24
 8003aa0:	af02      	add	r7, sp, #8
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	0008      	movs	r0, r1
 8003aa6:	607a      	str	r2, [r7, #4]
 8003aa8:	0019      	movs	r1, r3
 8003aaa:	230a      	movs	r3, #10
 8003aac:	18fb      	adds	r3, r7, r3
 8003aae:	1c02      	adds	r2, r0, #0
 8003ab0:	801a      	strh	r2, [r3, #0]
 8003ab2:	2308      	movs	r3, #8
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	1c0a      	adds	r2, r1, #0
 8003ab8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2241      	movs	r2, #65	; 0x41
 8003abe:	5c9b      	ldrb	r3, [r3, r2]
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b20      	cmp	r3, #32
 8003ac4:	d000      	beq.n	8003ac8 <HAL_I2C_Master_Receive+0x2c>
 8003ac6:	e0e8      	b.n	8003c9a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2240      	movs	r2, #64	; 0x40
 8003acc:	5c9b      	ldrb	r3, [r3, r2]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d101      	bne.n	8003ad6 <HAL_I2C_Master_Receive+0x3a>
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	e0e2      	b.n	8003c9c <HAL_I2C_Master_Receive+0x200>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2240      	movs	r2, #64	; 0x40
 8003ada:	2101      	movs	r1, #1
 8003adc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ade:	f7ff fb1b 	bl	8003118 <HAL_GetTick>
 8003ae2:	0003      	movs	r3, r0
 8003ae4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ae6:	2380      	movs	r3, #128	; 0x80
 8003ae8:	0219      	lsls	r1, r3, #8
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	2319      	movs	r3, #25
 8003af2:	2201      	movs	r2, #1
 8003af4:	f000 fa8e 	bl	8004014 <I2C_WaitOnFlagUntilTimeout>
 8003af8:	1e03      	subs	r3, r0, #0
 8003afa:	d001      	beq.n	8003b00 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e0cd      	b.n	8003c9c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2241      	movs	r2, #65	; 0x41
 8003b04:	2122      	movs	r1, #34	; 0x22
 8003b06:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2242      	movs	r2, #66	; 0x42
 8003b0c:	2110      	movs	r1, #16
 8003b0e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2208      	movs	r2, #8
 8003b20:	18ba      	adds	r2, r7, r2
 8003b22:	8812      	ldrh	r2, [r2, #0]
 8003b24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	2bff      	cmp	r3, #255	; 0xff
 8003b34:	d911      	bls.n	8003b5a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	22ff      	movs	r2, #255	; 0xff
 8003b3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	2380      	movs	r3, #128	; 0x80
 8003b44:	045c      	lsls	r4, r3, #17
 8003b46:	230a      	movs	r3, #10
 8003b48:	18fb      	adds	r3, r7, r3
 8003b4a:	8819      	ldrh	r1, [r3, #0]
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	4b55      	ldr	r3, [pc, #340]	; (8003ca4 <HAL_I2C_Master_Receive+0x208>)
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	0023      	movs	r3, r4
 8003b54:	f000 fcb8 	bl	80044c8 <I2C_TransferConfig>
 8003b58:	e076      	b.n	8003c48 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	2380      	movs	r3, #128	; 0x80
 8003b6c:	049c      	lsls	r4, r3, #18
 8003b6e:	230a      	movs	r3, #10
 8003b70:	18fb      	adds	r3, r7, r3
 8003b72:	8819      	ldrh	r1, [r3, #0]
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	4b4b      	ldr	r3, [pc, #300]	; (8003ca4 <HAL_I2C_Master_Receive+0x208>)
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	0023      	movs	r3, r4
 8003b7c:	f000 fca4 	bl	80044c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003b80:	e062      	b.n	8003c48 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f000 fb1b 	bl	80041c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b8e:	1e03      	subs	r3, r0, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e082      	b.n	8003c9c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d03a      	beq.n	8003c48 <HAL_I2C_Master_Receive+0x1ac>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d136      	bne.n	8003c48 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	0013      	movs	r3, r2
 8003be4:	2200      	movs	r2, #0
 8003be6:	2180      	movs	r1, #128	; 0x80
 8003be8:	f000 fa14 	bl	8004014 <I2C_WaitOnFlagUntilTimeout>
 8003bec:	1e03      	subs	r3, r0, #0
 8003bee:	d001      	beq.n	8003bf4 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e053      	b.n	8003c9c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	2bff      	cmp	r3, #255	; 0xff
 8003bfc:	d911      	bls.n	8003c22 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	22ff      	movs	r2, #255	; 0xff
 8003c02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c08:	b2da      	uxtb	r2, r3
 8003c0a:	2380      	movs	r3, #128	; 0x80
 8003c0c:	045c      	lsls	r4, r3, #17
 8003c0e:	230a      	movs	r3, #10
 8003c10:	18fb      	adds	r3, r7, r3
 8003c12:	8819      	ldrh	r1, [r3, #0]
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	2300      	movs	r3, #0
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	0023      	movs	r3, r4
 8003c1c:	f000 fc54 	bl	80044c8 <I2C_TransferConfig>
 8003c20:	e012      	b.n	8003c48 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	2380      	movs	r3, #128	; 0x80
 8003c34:	049c      	lsls	r4, r3, #18
 8003c36:	230a      	movs	r3, #10
 8003c38:	18fb      	adds	r3, r7, r3
 8003c3a:	8819      	ldrh	r1, [r3, #0]
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	2300      	movs	r3, #0
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	0023      	movs	r3, r4
 8003c44:	f000 fc40 	bl	80044c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d197      	bne.n	8003b82 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	0018      	movs	r0, r3
 8003c5a:	f000 fa6f 	bl	800413c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c5e:	1e03      	subs	r3, r0, #0
 8003c60:	d001      	beq.n	8003c66 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e01a      	b.n	8003c9c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	490b      	ldr	r1, [pc, #44]	; (8003ca8 <HAL_I2C_Master_Receive+0x20c>)
 8003c7a:	400a      	ands	r2, r1
 8003c7c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2241      	movs	r2, #65	; 0x41
 8003c82:	2120      	movs	r1, #32
 8003c84:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2242      	movs	r2, #66	; 0x42
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2240      	movs	r2, #64	; 0x40
 8003c92:	2100      	movs	r1, #0
 8003c94:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	e000      	b.n	8003c9c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003c9a:	2302      	movs	r3, #2
  }
}
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b007      	add	sp, #28
 8003ca2:	bd90      	pop	{r4, r7, pc}
 8003ca4:	80002400 	.word	0x80002400
 8003ca8:	fe00e800 	.word	0xfe00e800

08003cac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cac:	b590      	push	{r4, r7, lr}
 8003cae:	b089      	sub	sp, #36	; 0x24
 8003cb0:	af02      	add	r7, sp, #8
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	000c      	movs	r4, r1
 8003cb6:	0010      	movs	r0, r2
 8003cb8:	0019      	movs	r1, r3
 8003cba:	230a      	movs	r3, #10
 8003cbc:	18fb      	adds	r3, r7, r3
 8003cbe:	1c22      	adds	r2, r4, #0
 8003cc0:	801a      	strh	r2, [r3, #0]
 8003cc2:	2308      	movs	r3, #8
 8003cc4:	18fb      	adds	r3, r7, r3
 8003cc6:	1c02      	adds	r2, r0, #0
 8003cc8:	801a      	strh	r2, [r3, #0]
 8003cca:	1dbb      	adds	r3, r7, #6
 8003ccc:	1c0a      	adds	r2, r1, #0
 8003cce:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2241      	movs	r2, #65	; 0x41
 8003cd4:	5c9b      	ldrb	r3, [r3, r2]
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b20      	cmp	r3, #32
 8003cda:	d000      	beq.n	8003cde <HAL_I2C_Mem_Write+0x32>
 8003cdc:	e10c      	b.n	8003ef8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d004      	beq.n	8003cee <HAL_I2C_Mem_Write+0x42>
 8003ce4:	232c      	movs	r3, #44	; 0x2c
 8003ce6:	18fb      	adds	r3, r7, r3
 8003ce8:	881b      	ldrh	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d105      	bne.n	8003cfa <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2280      	movs	r2, #128	; 0x80
 8003cf2:	0092      	lsls	r2, r2, #2
 8003cf4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e0ff      	b.n	8003efa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2240      	movs	r2, #64	; 0x40
 8003cfe:	5c9b      	ldrb	r3, [r3, r2]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d101      	bne.n	8003d08 <HAL_I2C_Mem_Write+0x5c>
 8003d04:	2302      	movs	r3, #2
 8003d06:	e0f8      	b.n	8003efa <HAL_I2C_Mem_Write+0x24e>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2240      	movs	r2, #64	; 0x40
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d10:	f7ff fa02 	bl	8003118 <HAL_GetTick>
 8003d14:	0003      	movs	r3, r0
 8003d16:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d18:	2380      	movs	r3, #128	; 0x80
 8003d1a:	0219      	lsls	r1, r3, #8
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	2319      	movs	r3, #25
 8003d24:	2201      	movs	r2, #1
 8003d26:	f000 f975 	bl	8004014 <I2C_WaitOnFlagUntilTimeout>
 8003d2a:	1e03      	subs	r3, r0, #0
 8003d2c:	d001      	beq.n	8003d32 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e0e3      	b.n	8003efa <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2241      	movs	r2, #65	; 0x41
 8003d36:	2121      	movs	r1, #33	; 0x21
 8003d38:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2242      	movs	r2, #66	; 0x42
 8003d3e:	2140      	movs	r1, #64	; 0x40
 8003d40:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	222c      	movs	r2, #44	; 0x2c
 8003d52:	18ba      	adds	r2, r7, r2
 8003d54:	8812      	ldrh	r2, [r2, #0]
 8003d56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d5e:	1dbb      	adds	r3, r7, #6
 8003d60:	881c      	ldrh	r4, [r3, #0]
 8003d62:	2308      	movs	r3, #8
 8003d64:	18fb      	adds	r3, r7, r3
 8003d66:	881a      	ldrh	r2, [r3, #0]
 8003d68:	230a      	movs	r3, #10
 8003d6a:	18fb      	adds	r3, r7, r3
 8003d6c:	8819      	ldrh	r1, [r3, #0]
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	9301      	str	r3, [sp, #4]
 8003d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	0023      	movs	r3, r4
 8003d7a:	f000 f8c5 	bl	8003f08 <I2C_RequestMemoryWrite>
 8003d7e:	1e03      	subs	r3, r0, #0
 8003d80:	d005      	beq.n	8003d8e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2240      	movs	r2, #64	; 0x40
 8003d86:	2100      	movs	r1, #0
 8003d88:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e0b5      	b.n	8003efa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	2bff      	cmp	r3, #255	; 0xff
 8003d96:	d911      	bls.n	8003dbc <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	22ff      	movs	r2, #255	; 0xff
 8003d9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	2380      	movs	r3, #128	; 0x80
 8003da6:	045c      	lsls	r4, r3, #17
 8003da8:	230a      	movs	r3, #10
 8003daa:	18fb      	adds	r3, r7, r3
 8003dac:	8819      	ldrh	r1, [r3, #0]
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	2300      	movs	r3, #0
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	0023      	movs	r3, r4
 8003db6:	f000 fb87 	bl	80044c8 <I2C_TransferConfig>
 8003dba:	e012      	b.n	8003de2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	2380      	movs	r3, #128	; 0x80
 8003dce:	049c      	lsls	r4, r3, #18
 8003dd0:	230a      	movs	r3, #10
 8003dd2:	18fb      	adds	r3, r7, r3
 8003dd4:	8819      	ldrh	r1, [r3, #0]
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	2300      	movs	r3, #0
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	0023      	movs	r3, r4
 8003dde:	f000 fb73 	bl	80044c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	0018      	movs	r0, r3
 8003dea:	f000 f961 	bl	80040b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003dee:	1e03      	subs	r3, r0, #0
 8003df0:	d001      	beq.n	8003df6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e081      	b.n	8003efa <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	781a      	ldrb	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	1c5a      	adds	r2, r3, #1
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	3b01      	subs	r3, #1
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d03a      	beq.n	8003ea6 <HAL_I2C_Mem_Write+0x1fa>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d136      	bne.n	8003ea6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	0013      	movs	r3, r2
 8003e42:	2200      	movs	r2, #0
 8003e44:	2180      	movs	r1, #128	; 0x80
 8003e46:	f000 f8e5 	bl	8004014 <I2C_WaitOnFlagUntilTimeout>
 8003e4a:	1e03      	subs	r3, r0, #0
 8003e4c:	d001      	beq.n	8003e52 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e053      	b.n	8003efa <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	2bff      	cmp	r3, #255	; 0xff
 8003e5a:	d911      	bls.n	8003e80 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	22ff      	movs	r2, #255	; 0xff
 8003e60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e66:	b2da      	uxtb	r2, r3
 8003e68:	2380      	movs	r3, #128	; 0x80
 8003e6a:	045c      	lsls	r4, r3, #17
 8003e6c:	230a      	movs	r3, #10
 8003e6e:	18fb      	adds	r3, r7, r3
 8003e70:	8819      	ldrh	r1, [r3, #0]
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	2300      	movs	r3, #0
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	0023      	movs	r3, r4
 8003e7a:	f000 fb25 	bl	80044c8 <I2C_TransferConfig>
 8003e7e:	e012      	b.n	8003ea6 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	2380      	movs	r3, #128	; 0x80
 8003e92:	049c      	lsls	r4, r3, #18
 8003e94:	230a      	movs	r3, #10
 8003e96:	18fb      	adds	r3, r7, r3
 8003e98:	8819      	ldrh	r1, [r3, #0]
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	0023      	movs	r3, r4
 8003ea2:	f000 fb11 	bl	80044c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d198      	bne.n	8003de2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f000 f940 	bl	800413c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ebc:	1e03      	subs	r3, r0, #0
 8003ebe:	d001      	beq.n	8003ec4 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e01a      	b.n	8003efa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	490b      	ldr	r1, [pc, #44]	; (8003f04 <HAL_I2C_Mem_Write+0x258>)
 8003ed8:	400a      	ands	r2, r1
 8003eda:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2241      	movs	r2, #65	; 0x41
 8003ee0:	2120      	movs	r1, #32
 8003ee2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2242      	movs	r2, #66	; 0x42
 8003ee8:	2100      	movs	r1, #0
 8003eea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2240      	movs	r2, #64	; 0x40
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	e000      	b.n	8003efa <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003ef8:	2302      	movs	r3, #2
  }
}
 8003efa:	0018      	movs	r0, r3
 8003efc:	46bd      	mov	sp, r7
 8003efe:	b007      	add	sp, #28
 8003f00:	bd90      	pop	{r4, r7, pc}
 8003f02:	46c0      	nop			; (mov r8, r8)
 8003f04:	fe00e800 	.word	0xfe00e800

08003f08 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003f08:	b5b0      	push	{r4, r5, r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af02      	add	r7, sp, #8
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	000c      	movs	r4, r1
 8003f12:	0010      	movs	r0, r2
 8003f14:	0019      	movs	r1, r3
 8003f16:	250a      	movs	r5, #10
 8003f18:	197b      	adds	r3, r7, r5
 8003f1a:	1c22      	adds	r2, r4, #0
 8003f1c:	801a      	strh	r2, [r3, #0]
 8003f1e:	2308      	movs	r3, #8
 8003f20:	18fb      	adds	r3, r7, r3
 8003f22:	1c02      	adds	r2, r0, #0
 8003f24:	801a      	strh	r2, [r3, #0]
 8003f26:	1dbb      	adds	r3, r7, #6
 8003f28:	1c0a      	adds	r2, r1, #0
 8003f2a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003f2c:	1dbb      	adds	r3, r7, #6
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	2380      	movs	r3, #128	; 0x80
 8003f34:	045c      	lsls	r4, r3, #17
 8003f36:	197b      	adds	r3, r7, r5
 8003f38:	8819      	ldrh	r1, [r3, #0]
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	4b23      	ldr	r3, [pc, #140]	; (8003fcc <I2C_RequestMemoryWrite+0xc4>)
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	0023      	movs	r3, r4
 8003f42:	f000 fac1 	bl	80044c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f48:	6a39      	ldr	r1, [r7, #32]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f000 f8af 	bl	80040b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f52:	1e03      	subs	r3, r0, #0
 8003f54:	d001      	beq.n	8003f5a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e033      	b.n	8003fc2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f5a:	1dbb      	adds	r3, r7, #6
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d107      	bne.n	8003f72 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f62:	2308      	movs	r3, #8
 8003f64:	18fb      	adds	r3, r7, r3
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	629a      	str	r2, [r3, #40]	; 0x28
 8003f70:	e019      	b.n	8003fa6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f72:	2308      	movs	r3, #8
 8003f74:	18fb      	adds	r3, r7, r3
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	0a1b      	lsrs	r3, r3, #8
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f86:	6a39      	ldr	r1, [r7, #32]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f000 f890 	bl	80040b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f90:	1e03      	subs	r3, r0, #0
 8003f92:	d001      	beq.n	8003f98 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e014      	b.n	8003fc2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f98:	2308      	movs	r3, #8
 8003f9a:	18fb      	adds	r3, r7, r3
 8003f9c:	881b      	ldrh	r3, [r3, #0]
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003fa6:	6a3a      	ldr	r2, [r7, #32]
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	0013      	movs	r3, r2
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	2180      	movs	r1, #128	; 0x80
 8003fb4:	f000 f82e 	bl	8004014 <I2C_WaitOnFlagUntilTimeout>
 8003fb8:	1e03      	subs	r3, r0, #0
 8003fba:	d001      	beq.n	8003fc0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e000      	b.n	8003fc2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	b004      	add	sp, #16
 8003fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	80002000 	.word	0x80002000

08003fd0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d103      	bne.n	8003fee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2200      	movs	r2, #0
 8003fec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d007      	beq.n	800400c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699a      	ldr	r2, [r3, #24]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2101      	movs	r1, #1
 8004008:	430a      	orrs	r2, r1
 800400a:	619a      	str	r2, [r3, #24]
  }
}
 800400c:	46c0      	nop			; (mov r8, r8)
 800400e:	46bd      	mov	sp, r7
 8004010:	b002      	add	sp, #8
 8004012:	bd80      	pop	{r7, pc}

08004014 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	603b      	str	r3, [r7, #0]
 8004020:	1dfb      	adds	r3, r7, #7
 8004022:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004024:	e030      	b.n	8004088 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	3301      	adds	r3, #1
 800402a:	d02d      	beq.n	8004088 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800402c:	f7ff f874 	bl	8003118 <HAL_GetTick>
 8004030:	0002      	movs	r2, r0
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	429a      	cmp	r2, r3
 800403a:	d302      	bcc.n	8004042 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d122      	bne.n	8004088 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	4013      	ands	r3, r2
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	425a      	negs	r2, r3
 8004052:	4153      	adcs	r3, r2
 8004054:	b2db      	uxtb	r3, r3
 8004056:	001a      	movs	r2, r3
 8004058:	1dfb      	adds	r3, r7, #7
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d113      	bne.n	8004088 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004064:	2220      	movs	r2, #32
 8004066:	431a      	orrs	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2241      	movs	r2, #65	; 0x41
 8004070:	2120      	movs	r1, #32
 8004072:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2242      	movs	r2, #66	; 0x42
 8004078:	2100      	movs	r1, #0
 800407a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2240      	movs	r2, #64	; 0x40
 8004080:	2100      	movs	r1, #0
 8004082:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e00f      	b.n	80040a8 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	4013      	ands	r3, r2
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	425a      	negs	r2, r3
 8004098:	4153      	adcs	r3, r2
 800409a:	b2db      	uxtb	r3, r3
 800409c:	001a      	movs	r2, r3
 800409e:	1dfb      	adds	r3, r7, #7
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d0bf      	beq.n	8004026 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	0018      	movs	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	b004      	add	sp, #16
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040bc:	e032      	b.n	8004124 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	68b9      	ldr	r1, [r7, #8]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	0018      	movs	r0, r3
 80040c6:	f000 f8ff 	bl	80042c8 <I2C_IsErrorOccurred>
 80040ca:	1e03      	subs	r3, r0, #0
 80040cc:	d001      	beq.n	80040d2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e030      	b.n	8004134 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	3301      	adds	r3, #1
 80040d6:	d025      	beq.n	8004124 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040d8:	f7ff f81e 	bl	8003118 <HAL_GetTick>
 80040dc:	0002      	movs	r2, r0
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d302      	bcc.n	80040ee <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d11a      	bne.n	8004124 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	2202      	movs	r2, #2
 80040f6:	4013      	ands	r3, r2
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d013      	beq.n	8004124 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004100:	2220      	movs	r2, #32
 8004102:	431a      	orrs	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2241      	movs	r2, #65	; 0x41
 800410c:	2120      	movs	r1, #32
 800410e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2242      	movs	r2, #66	; 0x42
 8004114:	2100      	movs	r1, #0
 8004116:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2240      	movs	r2, #64	; 0x40
 800411c:	2100      	movs	r1, #0
 800411e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e007      	b.n	8004134 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	2202      	movs	r2, #2
 800412c:	4013      	ands	r3, r2
 800412e:	2b02      	cmp	r3, #2
 8004130:	d1c5      	bne.n	80040be <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	0018      	movs	r0, r3
 8004136:	46bd      	mov	sp, r7
 8004138:	b004      	add	sp, #16
 800413a:	bd80      	pop	{r7, pc}

0800413c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004148:	e02f      	b.n	80041aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	68b9      	ldr	r1, [r7, #8]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	0018      	movs	r0, r3
 8004152:	f000 f8b9 	bl	80042c8 <I2C_IsErrorOccurred>
 8004156:	1e03      	subs	r3, r0, #0
 8004158:	d001      	beq.n	800415e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e02d      	b.n	80041ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800415e:	f7fe ffdb 	bl	8003118 <HAL_GetTick>
 8004162:	0002      	movs	r2, r0
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	429a      	cmp	r2, r3
 800416c:	d302      	bcc.n	8004174 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d11a      	bne.n	80041aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	2220      	movs	r2, #32
 800417c:	4013      	ands	r3, r2
 800417e:	2b20      	cmp	r3, #32
 8004180:	d013      	beq.n	80041aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004186:	2220      	movs	r2, #32
 8004188:	431a      	orrs	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2241      	movs	r2, #65	; 0x41
 8004192:	2120      	movs	r1, #32
 8004194:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2242      	movs	r2, #66	; 0x42
 800419a:	2100      	movs	r1, #0
 800419c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2240      	movs	r2, #64	; 0x40
 80041a2:	2100      	movs	r1, #0
 80041a4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e007      	b.n	80041ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	2220      	movs	r2, #32
 80041b2:	4013      	ands	r3, r2
 80041b4:	2b20      	cmp	r3, #32
 80041b6:	d1c8      	bne.n	800414a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	0018      	movs	r0, r3
 80041bc:	46bd      	mov	sp, r7
 80041be:	b004      	add	sp, #16
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041d0:	e06b      	b.n	80042aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	68b9      	ldr	r1, [r7, #8]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	0018      	movs	r0, r3
 80041da:	f000 f875 	bl	80042c8 <I2C_IsErrorOccurred>
 80041de:	1e03      	subs	r3, r0, #0
 80041e0:	d001      	beq.n	80041e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e069      	b.n	80042ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	2220      	movs	r2, #32
 80041ee:	4013      	ands	r3, r2
 80041f0:	2b20      	cmp	r3, #32
 80041f2:	d138      	bne.n	8004266 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	2204      	movs	r2, #4
 80041fc:	4013      	ands	r3, r2
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d105      	bne.n	800420e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	e055      	b.n	80042ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	2210      	movs	r2, #16
 8004216:	4013      	ands	r3, r2
 8004218:	2b10      	cmp	r3, #16
 800421a:	d107      	bne.n	800422c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2210      	movs	r2, #16
 8004222:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2204      	movs	r2, #4
 8004228:	645a      	str	r2, [r3, #68]	; 0x44
 800422a:	e002      	b.n	8004232 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2220      	movs	r2, #32
 8004238:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	491f      	ldr	r1, [pc, #124]	; (80042c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8004246:	400a      	ands	r2, r1
 8004248:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2241      	movs	r2, #65	; 0x41
 800424e:	2120      	movs	r1, #32
 8004250:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2242      	movs	r2, #66	; 0x42
 8004256:	2100      	movs	r1, #0
 8004258:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2240      	movs	r2, #64	; 0x40
 800425e:	2100      	movs	r1, #0
 8004260:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e029      	b.n	80042ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004266:	f7fe ff57 	bl	8003118 <HAL_GetTick>
 800426a:	0002      	movs	r2, r0
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	429a      	cmp	r2, r3
 8004274:	d302      	bcc.n	800427c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d116      	bne.n	80042aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	2204      	movs	r2, #4
 8004284:	4013      	ands	r3, r2
 8004286:	2b04      	cmp	r3, #4
 8004288:	d00f      	beq.n	80042aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428e:	2220      	movs	r2, #32
 8004290:	431a      	orrs	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2241      	movs	r2, #65	; 0x41
 800429a:	2120      	movs	r1, #32
 800429c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2240      	movs	r2, #64	; 0x40
 80042a2:	2100      	movs	r1, #0
 80042a4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e007      	b.n	80042ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	2204      	movs	r2, #4
 80042b2:	4013      	ands	r3, r2
 80042b4:	2b04      	cmp	r3, #4
 80042b6:	d18c      	bne.n	80041d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	0018      	movs	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	b004      	add	sp, #16
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	46c0      	nop			; (mov r8, r8)
 80042c4:	fe00e800 	.word	0xfe00e800

080042c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042c8:	b590      	push	{r4, r7, lr}
 80042ca:	b08b      	sub	sp, #44	; 0x2c
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042d4:	2327      	movs	r3, #39	; 0x27
 80042d6:	18fb      	adds	r3, r7, r3
 80042d8:	2200      	movs	r2, #0
 80042da:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80042e4:	2300      	movs	r3, #0
 80042e6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	2210      	movs	r2, #16
 80042f0:	4013      	ands	r3, r2
 80042f2:	d100      	bne.n	80042f6 <I2C_IsErrorOccurred+0x2e>
 80042f4:	e082      	b.n	80043fc <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2210      	movs	r2, #16
 80042fc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80042fe:	e060      	b.n	80043c2 <I2C_IsErrorOccurred+0xfa>
 8004300:	2427      	movs	r4, #39	; 0x27
 8004302:	193b      	adds	r3, r7, r4
 8004304:	193a      	adds	r2, r7, r4
 8004306:	7812      	ldrb	r2, [r2, #0]
 8004308:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	3301      	adds	r3, #1
 800430e:	d058      	beq.n	80043c2 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004310:	f7fe ff02 	bl	8003118 <HAL_GetTick>
 8004314:	0002      	movs	r2, r0
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	429a      	cmp	r2, r3
 800431e:	d306      	bcc.n	800432e <I2C_IsErrorOccurred+0x66>
 8004320:	193b      	adds	r3, r7, r4
 8004322:	193a      	adds	r2, r7, r4
 8004324:	7812      	ldrb	r2, [r2, #0]
 8004326:	701a      	strb	r2, [r3, #0]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d149      	bne.n	80043c2 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	2380      	movs	r3, #128	; 0x80
 8004336:	01db      	lsls	r3, r3, #7
 8004338:	4013      	ands	r3, r2
 800433a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800433c:	2013      	movs	r0, #19
 800433e:	183b      	adds	r3, r7, r0
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	2142      	movs	r1, #66	; 0x42
 8004344:	5c52      	ldrb	r2, [r2, r1]
 8004346:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	699a      	ldr	r2, [r3, #24]
 800434e:	2380      	movs	r3, #128	; 0x80
 8004350:	021b      	lsls	r3, r3, #8
 8004352:	401a      	ands	r2, r3
 8004354:	2380      	movs	r3, #128	; 0x80
 8004356:	021b      	lsls	r3, r3, #8
 8004358:	429a      	cmp	r2, r3
 800435a:	d126      	bne.n	80043aa <I2C_IsErrorOccurred+0xe2>
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	2380      	movs	r3, #128	; 0x80
 8004360:	01db      	lsls	r3, r3, #7
 8004362:	429a      	cmp	r2, r3
 8004364:	d021      	beq.n	80043aa <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8004366:	183b      	adds	r3, r7, r0
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	2b20      	cmp	r3, #32
 800436c:	d01d      	beq.n	80043aa <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2180      	movs	r1, #128	; 0x80
 800437a:	01c9      	lsls	r1, r1, #7
 800437c:	430a      	orrs	r2, r1
 800437e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004380:	f7fe feca 	bl	8003118 <HAL_GetTick>
 8004384:	0003      	movs	r3, r0
 8004386:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004388:	e00f      	b.n	80043aa <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800438a:	f7fe fec5 	bl	8003118 <HAL_GetTick>
 800438e:	0002      	movs	r2, r0
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b19      	cmp	r3, #25
 8004396:	d908      	bls.n	80043aa <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	2220      	movs	r2, #32
 800439c:	4313      	orrs	r3, r2
 800439e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80043a0:	2327      	movs	r3, #39	; 0x27
 80043a2:	18fb      	adds	r3, r7, r3
 80043a4:	2201      	movs	r2, #1
 80043a6:	701a      	strb	r2, [r3, #0]

              break;
 80043a8:	e00b      	b.n	80043c2 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	2220      	movs	r2, #32
 80043b2:	4013      	ands	r3, r2
 80043b4:	2127      	movs	r1, #39	; 0x27
 80043b6:	187a      	adds	r2, r7, r1
 80043b8:	1879      	adds	r1, r7, r1
 80043ba:	7809      	ldrb	r1, [r1, #0]
 80043bc:	7011      	strb	r1, [r2, #0]
 80043be:	2b20      	cmp	r3, #32
 80043c0:	d1e3      	bne.n	800438a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	2220      	movs	r2, #32
 80043ca:	4013      	ands	r3, r2
 80043cc:	2b20      	cmp	r3, #32
 80043ce:	d004      	beq.n	80043da <I2C_IsErrorOccurred+0x112>
 80043d0:	2327      	movs	r3, #39	; 0x27
 80043d2:	18fb      	adds	r3, r7, r3
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d092      	beq.n	8004300 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80043da:	2327      	movs	r3, #39	; 0x27
 80043dc:	18fb      	adds	r3, r7, r3
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d103      	bne.n	80043ec <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2220      	movs	r2, #32
 80043ea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	2204      	movs	r2, #4
 80043f0:	4313      	orrs	r3, r2
 80043f2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80043f4:	2327      	movs	r3, #39	; 0x27
 80043f6:	18fb      	adds	r3, r7, r3
 80043f8:	2201      	movs	r2, #1
 80043fa:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	2380      	movs	r3, #128	; 0x80
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	4013      	ands	r3, r2
 800440c:	d00c      	beq.n	8004428 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	2201      	movs	r2, #1
 8004412:	4313      	orrs	r3, r2
 8004414:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2280      	movs	r2, #128	; 0x80
 800441c:	0052      	lsls	r2, r2, #1
 800441e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004420:	2327      	movs	r3, #39	; 0x27
 8004422:	18fb      	adds	r3, r7, r3
 8004424:	2201      	movs	r2, #1
 8004426:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	2380      	movs	r3, #128	; 0x80
 800442c:	00db      	lsls	r3, r3, #3
 800442e:	4013      	ands	r3, r2
 8004430:	d00c      	beq.n	800444c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004432:	6a3b      	ldr	r3, [r7, #32]
 8004434:	2208      	movs	r2, #8
 8004436:	4313      	orrs	r3, r2
 8004438:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2280      	movs	r2, #128	; 0x80
 8004440:	00d2      	lsls	r2, r2, #3
 8004442:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004444:	2327      	movs	r3, #39	; 0x27
 8004446:	18fb      	adds	r3, r7, r3
 8004448:	2201      	movs	r2, #1
 800444a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	2380      	movs	r3, #128	; 0x80
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4013      	ands	r3, r2
 8004454:	d00c      	beq.n	8004470 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	2202      	movs	r2, #2
 800445a:	4313      	orrs	r3, r2
 800445c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2280      	movs	r2, #128	; 0x80
 8004464:	0092      	lsls	r2, r2, #2
 8004466:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004468:	2327      	movs	r3, #39	; 0x27
 800446a:	18fb      	adds	r3, r7, r3
 800446c:	2201      	movs	r2, #1
 800446e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004470:	2327      	movs	r3, #39	; 0x27
 8004472:	18fb      	adds	r3, r7, r3
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d01d      	beq.n	80044b6 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	0018      	movs	r0, r3
 800447e:	f7ff fda7 	bl	8003fd0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	490d      	ldr	r1, [pc, #52]	; (80044c4 <I2C_IsErrorOccurred+0x1fc>)
 800448e:	400a      	ands	r2, r1
 8004490:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004496:	6a3b      	ldr	r3, [r7, #32]
 8004498:	431a      	orrs	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2241      	movs	r2, #65	; 0x41
 80044a2:	2120      	movs	r1, #32
 80044a4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2242      	movs	r2, #66	; 0x42
 80044aa:	2100      	movs	r1, #0
 80044ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2240      	movs	r2, #64	; 0x40
 80044b2:	2100      	movs	r1, #0
 80044b4:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80044b6:	2327      	movs	r3, #39	; 0x27
 80044b8:	18fb      	adds	r3, r7, r3
 80044ba:	781b      	ldrb	r3, [r3, #0]
}
 80044bc:	0018      	movs	r0, r3
 80044be:	46bd      	mov	sp, r7
 80044c0:	b00b      	add	sp, #44	; 0x2c
 80044c2:	bd90      	pop	{r4, r7, pc}
 80044c4:	fe00e800 	.word	0xfe00e800

080044c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80044c8:	b590      	push	{r4, r7, lr}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	0008      	movs	r0, r1
 80044d2:	0011      	movs	r1, r2
 80044d4:	607b      	str	r3, [r7, #4]
 80044d6:	240a      	movs	r4, #10
 80044d8:	193b      	adds	r3, r7, r4
 80044da:	1c02      	adds	r2, r0, #0
 80044dc:	801a      	strh	r2, [r3, #0]
 80044de:	2009      	movs	r0, #9
 80044e0:	183b      	adds	r3, r7, r0
 80044e2:	1c0a      	adds	r2, r1, #0
 80044e4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044e6:	193b      	adds	r3, r7, r4
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	059b      	lsls	r3, r3, #22
 80044ec:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80044ee:	183b      	adds	r3, r7, r0
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	0419      	lsls	r1, r3, #16
 80044f4:	23ff      	movs	r3, #255	; 0xff
 80044f6:	041b      	lsls	r3, r3, #16
 80044f8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044fa:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004502:	4313      	orrs	r3, r2
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	085b      	lsrs	r3, r3, #1
 8004508:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004512:	0d51      	lsrs	r1, r2, #21
 8004514:	2280      	movs	r2, #128	; 0x80
 8004516:	00d2      	lsls	r2, r2, #3
 8004518:	400a      	ands	r2, r1
 800451a:	4907      	ldr	r1, [pc, #28]	; (8004538 <I2C_TransferConfig+0x70>)
 800451c:	430a      	orrs	r2, r1
 800451e:	43d2      	mvns	r2, r2
 8004520:	401a      	ands	r2, r3
 8004522:	0011      	movs	r1, r2
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	430a      	orrs	r2, r1
 800452c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800452e:	46c0      	nop			; (mov r8, r8)
 8004530:	46bd      	mov	sp, r7
 8004532:	b007      	add	sp, #28
 8004534:	bd90      	pop	{r4, r7, pc}
 8004536:	46c0      	nop			; (mov r8, r8)
 8004538:	03ff63ff 	.word	0x03ff63ff

0800453c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2241      	movs	r2, #65	; 0x41
 800454a:	5c9b      	ldrb	r3, [r3, r2]
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b20      	cmp	r3, #32
 8004550:	d138      	bne.n	80045c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2240      	movs	r2, #64	; 0x40
 8004556:	5c9b      	ldrb	r3, [r3, r2]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800455c:	2302      	movs	r3, #2
 800455e:	e032      	b.n	80045c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2240      	movs	r2, #64	; 0x40
 8004564:	2101      	movs	r1, #1
 8004566:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2241      	movs	r2, #65	; 0x41
 800456c:	2124      	movs	r1, #36	; 0x24
 800456e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2101      	movs	r1, #1
 800457c:	438a      	bics	r2, r1
 800457e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4911      	ldr	r1, [pc, #68]	; (80045d0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800458c:	400a      	ands	r2, r1
 800458e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6819      	ldr	r1, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2101      	movs	r1, #1
 80045ac:	430a      	orrs	r2, r1
 80045ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2241      	movs	r2, #65	; 0x41
 80045b4:	2120      	movs	r1, #32
 80045b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2240      	movs	r2, #64	; 0x40
 80045bc:	2100      	movs	r1, #0
 80045be:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80045c0:	2300      	movs	r3, #0
 80045c2:	e000      	b.n	80045c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045c4:	2302      	movs	r3, #2
  }
}
 80045c6:	0018      	movs	r0, r3
 80045c8:	46bd      	mov	sp, r7
 80045ca:	b002      	add	sp, #8
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	46c0      	nop			; (mov r8, r8)
 80045d0:	ffffefff 	.word	0xffffefff

080045d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2241      	movs	r2, #65	; 0x41
 80045e2:	5c9b      	ldrb	r3, [r3, r2]
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b20      	cmp	r3, #32
 80045e8:	d139      	bne.n	800465e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2240      	movs	r2, #64	; 0x40
 80045ee:	5c9b      	ldrb	r3, [r3, r2]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80045f4:	2302      	movs	r3, #2
 80045f6:	e033      	b.n	8004660 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2240      	movs	r2, #64	; 0x40
 80045fc:	2101      	movs	r1, #1
 80045fe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2241      	movs	r2, #65	; 0x41
 8004604:	2124      	movs	r1, #36	; 0x24
 8004606:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2101      	movs	r1, #1
 8004614:	438a      	bics	r2, r1
 8004616:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4a11      	ldr	r2, [pc, #68]	; (8004668 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004624:	4013      	ands	r3, r2
 8004626:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	021b      	lsls	r3, r3, #8
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	4313      	orrs	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2101      	movs	r1, #1
 8004646:	430a      	orrs	r2, r1
 8004648:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2241      	movs	r2, #65	; 0x41
 800464e:	2120      	movs	r1, #32
 8004650:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2240      	movs	r2, #64	; 0x40
 8004656:	2100      	movs	r1, #0
 8004658:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800465a:	2300      	movs	r3, #0
 800465c:	e000      	b.n	8004660 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800465e:	2302      	movs	r3, #2
  }
}
 8004660:	0018      	movs	r0, r3
 8004662:	46bd      	mov	sp, r7
 8004664:	b004      	add	sp, #16
 8004666:	bd80      	pop	{r7, pc}
 8004668:	fffff0ff 	.word	0xfffff0ff

0800466c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b088      	sub	sp, #32
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e301      	b.n	8004c82 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2201      	movs	r2, #1
 8004684:	4013      	ands	r3, r2
 8004686:	d100      	bne.n	800468a <HAL_RCC_OscConfig+0x1e>
 8004688:	e08d      	b.n	80047a6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800468a:	4bc3      	ldr	r3, [pc, #780]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	220c      	movs	r2, #12
 8004690:	4013      	ands	r3, r2
 8004692:	2b04      	cmp	r3, #4
 8004694:	d00e      	beq.n	80046b4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004696:	4bc0      	ldr	r3, [pc, #768]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	220c      	movs	r2, #12
 800469c:	4013      	ands	r3, r2
 800469e:	2b08      	cmp	r3, #8
 80046a0:	d116      	bne.n	80046d0 <HAL_RCC_OscConfig+0x64>
 80046a2:	4bbd      	ldr	r3, [pc, #756]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	2380      	movs	r3, #128	; 0x80
 80046a8:	025b      	lsls	r3, r3, #9
 80046aa:	401a      	ands	r2, r3
 80046ac:	2380      	movs	r3, #128	; 0x80
 80046ae:	025b      	lsls	r3, r3, #9
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d10d      	bne.n	80046d0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b4:	4bb8      	ldr	r3, [pc, #736]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	2380      	movs	r3, #128	; 0x80
 80046ba:	029b      	lsls	r3, r3, #10
 80046bc:	4013      	ands	r3, r2
 80046be:	d100      	bne.n	80046c2 <HAL_RCC_OscConfig+0x56>
 80046c0:	e070      	b.n	80047a4 <HAL_RCC_OscConfig+0x138>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d000      	beq.n	80046cc <HAL_RCC_OscConfig+0x60>
 80046ca:	e06b      	b.n	80047a4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e2d8      	b.n	8004c82 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d107      	bne.n	80046e8 <HAL_RCC_OscConfig+0x7c>
 80046d8:	4baf      	ldr	r3, [pc, #700]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	4bae      	ldr	r3, [pc, #696]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 80046de:	2180      	movs	r1, #128	; 0x80
 80046e0:	0249      	lsls	r1, r1, #9
 80046e2:	430a      	orrs	r2, r1
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	e02f      	b.n	8004748 <HAL_RCC_OscConfig+0xdc>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10c      	bne.n	800470a <HAL_RCC_OscConfig+0x9e>
 80046f0:	4ba9      	ldr	r3, [pc, #676]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	4ba8      	ldr	r3, [pc, #672]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 80046f6:	49a9      	ldr	r1, [pc, #676]	; (800499c <HAL_RCC_OscConfig+0x330>)
 80046f8:	400a      	ands	r2, r1
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	4ba6      	ldr	r3, [pc, #664]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	4ba5      	ldr	r3, [pc, #660]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 8004702:	49a7      	ldr	r1, [pc, #668]	; (80049a0 <HAL_RCC_OscConfig+0x334>)
 8004704:	400a      	ands	r2, r1
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	e01e      	b.n	8004748 <HAL_RCC_OscConfig+0xdc>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2b05      	cmp	r3, #5
 8004710:	d10e      	bne.n	8004730 <HAL_RCC_OscConfig+0xc4>
 8004712:	4ba1      	ldr	r3, [pc, #644]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	4ba0      	ldr	r3, [pc, #640]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 8004718:	2180      	movs	r1, #128	; 0x80
 800471a:	02c9      	lsls	r1, r1, #11
 800471c:	430a      	orrs	r2, r1
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	4b9d      	ldr	r3, [pc, #628]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	4b9c      	ldr	r3, [pc, #624]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 8004726:	2180      	movs	r1, #128	; 0x80
 8004728:	0249      	lsls	r1, r1, #9
 800472a:	430a      	orrs	r2, r1
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	e00b      	b.n	8004748 <HAL_RCC_OscConfig+0xdc>
 8004730:	4b99      	ldr	r3, [pc, #612]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	4b98      	ldr	r3, [pc, #608]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 8004736:	4999      	ldr	r1, [pc, #612]	; (800499c <HAL_RCC_OscConfig+0x330>)
 8004738:	400a      	ands	r2, r1
 800473a:	601a      	str	r2, [r3, #0]
 800473c:	4b96      	ldr	r3, [pc, #600]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	4b95      	ldr	r3, [pc, #596]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 8004742:	4997      	ldr	r1, [pc, #604]	; (80049a0 <HAL_RCC_OscConfig+0x334>)
 8004744:	400a      	ands	r2, r1
 8004746:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d014      	beq.n	800477a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004750:	f7fe fce2 	bl	8003118 <HAL_GetTick>
 8004754:	0003      	movs	r3, r0
 8004756:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004758:	e008      	b.n	800476c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800475a:	f7fe fcdd 	bl	8003118 <HAL_GetTick>
 800475e:	0002      	movs	r2, r0
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b64      	cmp	r3, #100	; 0x64
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e28a      	b.n	8004c82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800476c:	4b8a      	ldr	r3, [pc, #552]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	2380      	movs	r3, #128	; 0x80
 8004772:	029b      	lsls	r3, r3, #10
 8004774:	4013      	ands	r3, r2
 8004776:	d0f0      	beq.n	800475a <HAL_RCC_OscConfig+0xee>
 8004778:	e015      	b.n	80047a6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477a:	f7fe fccd 	bl	8003118 <HAL_GetTick>
 800477e:	0003      	movs	r3, r0
 8004780:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004784:	f7fe fcc8 	bl	8003118 <HAL_GetTick>
 8004788:	0002      	movs	r2, r0
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b64      	cmp	r3, #100	; 0x64
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e275      	b.n	8004c82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004796:	4b80      	ldr	r3, [pc, #512]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	2380      	movs	r3, #128	; 0x80
 800479c:	029b      	lsls	r3, r3, #10
 800479e:	4013      	ands	r3, r2
 80047a0:	d1f0      	bne.n	8004784 <HAL_RCC_OscConfig+0x118>
 80047a2:	e000      	b.n	80047a6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047a4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2202      	movs	r2, #2
 80047ac:	4013      	ands	r3, r2
 80047ae:	d100      	bne.n	80047b2 <HAL_RCC_OscConfig+0x146>
 80047b0:	e069      	b.n	8004886 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80047b2:	4b79      	ldr	r3, [pc, #484]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	220c      	movs	r2, #12
 80047b8:	4013      	ands	r3, r2
 80047ba:	d00b      	beq.n	80047d4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80047bc:	4b76      	ldr	r3, [pc, #472]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	220c      	movs	r2, #12
 80047c2:	4013      	ands	r3, r2
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d11c      	bne.n	8004802 <HAL_RCC_OscConfig+0x196>
 80047c8:	4b73      	ldr	r3, [pc, #460]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	2380      	movs	r3, #128	; 0x80
 80047ce:	025b      	lsls	r3, r3, #9
 80047d0:	4013      	ands	r3, r2
 80047d2:	d116      	bne.n	8004802 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047d4:	4b70      	ldr	r3, [pc, #448]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2202      	movs	r2, #2
 80047da:	4013      	ands	r3, r2
 80047dc:	d005      	beq.n	80047ea <HAL_RCC_OscConfig+0x17e>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d001      	beq.n	80047ea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e24b      	b.n	8004c82 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ea:	4b6b      	ldr	r3, [pc, #428]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	22f8      	movs	r2, #248	; 0xf8
 80047f0:	4393      	bics	r3, r2
 80047f2:	0019      	movs	r1, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	00da      	lsls	r2, r3, #3
 80047fa:	4b67      	ldr	r3, [pc, #412]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 80047fc:	430a      	orrs	r2, r1
 80047fe:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004800:	e041      	b.n	8004886 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d024      	beq.n	8004854 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800480a:	4b63      	ldr	r3, [pc, #396]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	4b62      	ldr	r3, [pc, #392]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 8004810:	2101      	movs	r1, #1
 8004812:	430a      	orrs	r2, r1
 8004814:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004816:	f7fe fc7f 	bl	8003118 <HAL_GetTick>
 800481a:	0003      	movs	r3, r0
 800481c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004820:	f7fe fc7a 	bl	8003118 <HAL_GetTick>
 8004824:	0002      	movs	r2, r0
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e227      	b.n	8004c82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004832:	4b59      	ldr	r3, [pc, #356]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2202      	movs	r2, #2
 8004838:	4013      	ands	r3, r2
 800483a:	d0f1      	beq.n	8004820 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800483c:	4b56      	ldr	r3, [pc, #344]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	22f8      	movs	r2, #248	; 0xf8
 8004842:	4393      	bics	r3, r2
 8004844:	0019      	movs	r1, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	00da      	lsls	r2, r3, #3
 800484c:	4b52      	ldr	r3, [pc, #328]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 800484e:	430a      	orrs	r2, r1
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	e018      	b.n	8004886 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004854:	4b50      	ldr	r3, [pc, #320]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	4b4f      	ldr	r3, [pc, #316]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 800485a:	2101      	movs	r1, #1
 800485c:	438a      	bics	r2, r1
 800485e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004860:	f7fe fc5a 	bl	8003118 <HAL_GetTick>
 8004864:	0003      	movs	r3, r0
 8004866:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004868:	e008      	b.n	800487c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800486a:	f7fe fc55 	bl	8003118 <HAL_GetTick>
 800486e:	0002      	movs	r2, r0
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e202      	b.n	8004c82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800487c:	4b46      	ldr	r3, [pc, #280]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2202      	movs	r2, #2
 8004882:	4013      	ands	r3, r2
 8004884:	d1f1      	bne.n	800486a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2208      	movs	r2, #8
 800488c:	4013      	ands	r3, r2
 800488e:	d036      	beq.n	80048fe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	69db      	ldr	r3, [r3, #28]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d019      	beq.n	80048cc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004898:	4b3f      	ldr	r3, [pc, #252]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 800489a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800489c:	4b3e      	ldr	r3, [pc, #248]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 800489e:	2101      	movs	r1, #1
 80048a0:	430a      	orrs	r2, r1
 80048a2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048a4:	f7fe fc38 	bl	8003118 <HAL_GetTick>
 80048a8:	0003      	movs	r3, r0
 80048aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ac:	e008      	b.n	80048c0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048ae:	f7fe fc33 	bl	8003118 <HAL_GetTick>
 80048b2:	0002      	movs	r2, r0
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e1e0      	b.n	8004c82 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048c0:	4b35      	ldr	r3, [pc, #212]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 80048c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c4:	2202      	movs	r2, #2
 80048c6:	4013      	ands	r3, r2
 80048c8:	d0f1      	beq.n	80048ae <HAL_RCC_OscConfig+0x242>
 80048ca:	e018      	b.n	80048fe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048cc:	4b32      	ldr	r3, [pc, #200]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 80048ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048d0:	4b31      	ldr	r3, [pc, #196]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 80048d2:	2101      	movs	r1, #1
 80048d4:	438a      	bics	r2, r1
 80048d6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048d8:	f7fe fc1e 	bl	8003118 <HAL_GetTick>
 80048dc:	0003      	movs	r3, r0
 80048de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048e0:	e008      	b.n	80048f4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048e2:	f7fe fc19 	bl	8003118 <HAL_GetTick>
 80048e6:	0002      	movs	r2, r0
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e1c6      	b.n	8004c82 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048f4:	4b28      	ldr	r3, [pc, #160]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	2202      	movs	r2, #2
 80048fa:	4013      	ands	r3, r2
 80048fc:	d1f1      	bne.n	80048e2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2204      	movs	r2, #4
 8004904:	4013      	ands	r3, r2
 8004906:	d100      	bne.n	800490a <HAL_RCC_OscConfig+0x29e>
 8004908:	e0b4      	b.n	8004a74 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800490a:	201f      	movs	r0, #31
 800490c:	183b      	adds	r3, r7, r0
 800490e:	2200      	movs	r2, #0
 8004910:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004912:	4b21      	ldr	r3, [pc, #132]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 8004914:	69da      	ldr	r2, [r3, #28]
 8004916:	2380      	movs	r3, #128	; 0x80
 8004918:	055b      	lsls	r3, r3, #21
 800491a:	4013      	ands	r3, r2
 800491c:	d110      	bne.n	8004940 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800491e:	4b1e      	ldr	r3, [pc, #120]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 8004920:	69da      	ldr	r2, [r3, #28]
 8004922:	4b1d      	ldr	r3, [pc, #116]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 8004924:	2180      	movs	r1, #128	; 0x80
 8004926:	0549      	lsls	r1, r1, #21
 8004928:	430a      	orrs	r2, r1
 800492a:	61da      	str	r2, [r3, #28]
 800492c:	4b1a      	ldr	r3, [pc, #104]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 800492e:	69da      	ldr	r2, [r3, #28]
 8004930:	2380      	movs	r3, #128	; 0x80
 8004932:	055b      	lsls	r3, r3, #21
 8004934:	4013      	ands	r3, r2
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800493a:	183b      	adds	r3, r7, r0
 800493c:	2201      	movs	r2, #1
 800493e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004940:	4b18      	ldr	r3, [pc, #96]	; (80049a4 <HAL_RCC_OscConfig+0x338>)
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	2380      	movs	r3, #128	; 0x80
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	4013      	ands	r3, r2
 800494a:	d11a      	bne.n	8004982 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800494c:	4b15      	ldr	r3, [pc, #84]	; (80049a4 <HAL_RCC_OscConfig+0x338>)
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	4b14      	ldr	r3, [pc, #80]	; (80049a4 <HAL_RCC_OscConfig+0x338>)
 8004952:	2180      	movs	r1, #128	; 0x80
 8004954:	0049      	lsls	r1, r1, #1
 8004956:	430a      	orrs	r2, r1
 8004958:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800495a:	f7fe fbdd 	bl	8003118 <HAL_GetTick>
 800495e:	0003      	movs	r3, r0
 8004960:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004964:	f7fe fbd8 	bl	8003118 <HAL_GetTick>
 8004968:	0002      	movs	r2, r0
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b64      	cmp	r3, #100	; 0x64
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e185      	b.n	8004c82 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004976:	4b0b      	ldr	r3, [pc, #44]	; (80049a4 <HAL_RCC_OscConfig+0x338>)
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	2380      	movs	r3, #128	; 0x80
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	4013      	ands	r3, r2
 8004980:	d0f0      	beq.n	8004964 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d10e      	bne.n	80049a8 <HAL_RCC_OscConfig+0x33c>
 800498a:	4b03      	ldr	r3, [pc, #12]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 800498c:	6a1a      	ldr	r2, [r3, #32]
 800498e:	4b02      	ldr	r3, [pc, #8]	; (8004998 <HAL_RCC_OscConfig+0x32c>)
 8004990:	2101      	movs	r1, #1
 8004992:	430a      	orrs	r2, r1
 8004994:	621a      	str	r2, [r3, #32]
 8004996:	e035      	b.n	8004a04 <HAL_RCC_OscConfig+0x398>
 8004998:	40021000 	.word	0x40021000
 800499c:	fffeffff 	.word	0xfffeffff
 80049a0:	fffbffff 	.word	0xfffbffff
 80049a4:	40007000 	.word	0x40007000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10c      	bne.n	80049ca <HAL_RCC_OscConfig+0x35e>
 80049b0:	4bb6      	ldr	r3, [pc, #728]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 80049b2:	6a1a      	ldr	r2, [r3, #32]
 80049b4:	4bb5      	ldr	r3, [pc, #724]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 80049b6:	2101      	movs	r1, #1
 80049b8:	438a      	bics	r2, r1
 80049ba:	621a      	str	r2, [r3, #32]
 80049bc:	4bb3      	ldr	r3, [pc, #716]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 80049be:	6a1a      	ldr	r2, [r3, #32]
 80049c0:	4bb2      	ldr	r3, [pc, #712]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 80049c2:	2104      	movs	r1, #4
 80049c4:	438a      	bics	r2, r1
 80049c6:	621a      	str	r2, [r3, #32]
 80049c8:	e01c      	b.n	8004a04 <HAL_RCC_OscConfig+0x398>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	2b05      	cmp	r3, #5
 80049d0:	d10c      	bne.n	80049ec <HAL_RCC_OscConfig+0x380>
 80049d2:	4bae      	ldr	r3, [pc, #696]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 80049d4:	6a1a      	ldr	r2, [r3, #32]
 80049d6:	4bad      	ldr	r3, [pc, #692]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 80049d8:	2104      	movs	r1, #4
 80049da:	430a      	orrs	r2, r1
 80049dc:	621a      	str	r2, [r3, #32]
 80049de:	4bab      	ldr	r3, [pc, #684]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 80049e0:	6a1a      	ldr	r2, [r3, #32]
 80049e2:	4baa      	ldr	r3, [pc, #680]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 80049e4:	2101      	movs	r1, #1
 80049e6:	430a      	orrs	r2, r1
 80049e8:	621a      	str	r2, [r3, #32]
 80049ea:	e00b      	b.n	8004a04 <HAL_RCC_OscConfig+0x398>
 80049ec:	4ba7      	ldr	r3, [pc, #668]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 80049ee:	6a1a      	ldr	r2, [r3, #32]
 80049f0:	4ba6      	ldr	r3, [pc, #664]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 80049f2:	2101      	movs	r1, #1
 80049f4:	438a      	bics	r2, r1
 80049f6:	621a      	str	r2, [r3, #32]
 80049f8:	4ba4      	ldr	r3, [pc, #656]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 80049fa:	6a1a      	ldr	r2, [r3, #32]
 80049fc:	4ba3      	ldr	r3, [pc, #652]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 80049fe:	2104      	movs	r1, #4
 8004a00:	438a      	bics	r2, r1
 8004a02:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d014      	beq.n	8004a36 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a0c:	f7fe fb84 	bl	8003118 <HAL_GetTick>
 8004a10:	0003      	movs	r3, r0
 8004a12:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a14:	e009      	b.n	8004a2a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a16:	f7fe fb7f 	bl	8003118 <HAL_GetTick>
 8004a1a:	0002      	movs	r2, r0
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	4a9b      	ldr	r2, [pc, #620]	; (8004c90 <HAL_RCC_OscConfig+0x624>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e12b      	b.n	8004c82 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a2a:	4b98      	ldr	r3, [pc, #608]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	4013      	ands	r3, r2
 8004a32:	d0f0      	beq.n	8004a16 <HAL_RCC_OscConfig+0x3aa>
 8004a34:	e013      	b.n	8004a5e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a36:	f7fe fb6f 	bl	8003118 <HAL_GetTick>
 8004a3a:	0003      	movs	r3, r0
 8004a3c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a3e:	e009      	b.n	8004a54 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a40:	f7fe fb6a 	bl	8003118 <HAL_GetTick>
 8004a44:	0002      	movs	r2, r0
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	4a91      	ldr	r2, [pc, #580]	; (8004c90 <HAL_RCC_OscConfig+0x624>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e116      	b.n	8004c82 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a54:	4b8d      	ldr	r3, [pc, #564]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004a56:	6a1b      	ldr	r3, [r3, #32]
 8004a58:	2202      	movs	r2, #2
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	d1f0      	bne.n	8004a40 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a5e:	231f      	movs	r3, #31
 8004a60:	18fb      	adds	r3, r7, r3
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d105      	bne.n	8004a74 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a68:	4b88      	ldr	r3, [pc, #544]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004a6a:	69da      	ldr	r2, [r3, #28]
 8004a6c:	4b87      	ldr	r3, [pc, #540]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004a6e:	4989      	ldr	r1, [pc, #548]	; (8004c94 <HAL_RCC_OscConfig+0x628>)
 8004a70:	400a      	ands	r2, r1
 8004a72:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2210      	movs	r2, #16
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	d063      	beq.n	8004b46 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d12a      	bne.n	8004adc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004a86:	4b81      	ldr	r3, [pc, #516]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004a88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a8a:	4b80      	ldr	r3, [pc, #512]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004a8c:	2104      	movs	r1, #4
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004a92:	4b7e      	ldr	r3, [pc, #504]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004a94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a96:	4b7d      	ldr	r3, [pc, #500]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004a98:	2101      	movs	r1, #1
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a9e:	f7fe fb3b 	bl	8003118 <HAL_GetTick>
 8004aa2:	0003      	movs	r3, r0
 8004aa4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004aa8:	f7fe fb36 	bl	8003118 <HAL_GetTick>
 8004aac:	0002      	movs	r2, r0
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e0e3      	b.n	8004c82 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004aba:	4b74      	ldr	r3, [pc, #464]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004abe:	2202      	movs	r2, #2
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	d0f1      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004ac4:	4b71      	ldr	r3, [pc, #452]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac8:	22f8      	movs	r2, #248	; 0xf8
 8004aca:	4393      	bics	r3, r2
 8004acc:	0019      	movs	r1, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	00da      	lsls	r2, r3, #3
 8004ad4:	4b6d      	ldr	r3, [pc, #436]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	635a      	str	r2, [r3, #52]	; 0x34
 8004ada:	e034      	b.n	8004b46 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	3305      	adds	r3, #5
 8004ae2:	d111      	bne.n	8004b08 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004ae4:	4b69      	ldr	r3, [pc, #420]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004ae6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ae8:	4b68      	ldr	r3, [pc, #416]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004aea:	2104      	movs	r1, #4
 8004aec:	438a      	bics	r2, r1
 8004aee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004af0:	4b66      	ldr	r3, [pc, #408]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af4:	22f8      	movs	r2, #248	; 0xf8
 8004af6:	4393      	bics	r3, r2
 8004af8:	0019      	movs	r1, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	00da      	lsls	r2, r3, #3
 8004b00:	4b62      	ldr	r3, [pc, #392]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004b02:	430a      	orrs	r2, r1
 8004b04:	635a      	str	r2, [r3, #52]	; 0x34
 8004b06:	e01e      	b.n	8004b46 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004b08:	4b60      	ldr	r3, [pc, #384]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004b0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b0c:	4b5f      	ldr	r3, [pc, #380]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004b0e:	2104      	movs	r1, #4
 8004b10:	430a      	orrs	r2, r1
 8004b12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004b14:	4b5d      	ldr	r3, [pc, #372]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004b16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b18:	4b5c      	ldr	r3, [pc, #368]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	438a      	bics	r2, r1
 8004b1e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b20:	f7fe fafa 	bl	8003118 <HAL_GetTick>
 8004b24:	0003      	movs	r3, r0
 8004b26:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004b2a:	f7fe faf5 	bl	8003118 <HAL_GetTick>
 8004b2e:	0002      	movs	r2, r0
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e0a2      	b.n	8004c82 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004b3c:	4b53      	ldr	r3, [pc, #332]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b40:	2202      	movs	r2, #2
 8004b42:	4013      	ands	r3, r2
 8004b44:	d1f1      	bne.n	8004b2a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d100      	bne.n	8004b50 <HAL_RCC_OscConfig+0x4e4>
 8004b4e:	e097      	b.n	8004c80 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b50:	4b4e      	ldr	r3, [pc, #312]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	220c      	movs	r2, #12
 8004b56:	4013      	ands	r3, r2
 8004b58:	2b08      	cmp	r3, #8
 8004b5a:	d100      	bne.n	8004b5e <HAL_RCC_OscConfig+0x4f2>
 8004b5c:	e06b      	b.n	8004c36 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d14c      	bne.n	8004c00 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b66:	4b49      	ldr	r3, [pc, #292]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	4b48      	ldr	r3, [pc, #288]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004b6c:	494a      	ldr	r1, [pc, #296]	; (8004c98 <HAL_RCC_OscConfig+0x62c>)
 8004b6e:	400a      	ands	r2, r1
 8004b70:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b72:	f7fe fad1 	bl	8003118 <HAL_GetTick>
 8004b76:	0003      	movs	r3, r0
 8004b78:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b7c:	f7fe facc 	bl	8003118 <HAL_GetTick>
 8004b80:	0002      	movs	r2, r0
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e079      	b.n	8004c82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b8e:	4b3f      	ldr	r3, [pc, #252]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	2380      	movs	r3, #128	; 0x80
 8004b94:	049b      	lsls	r3, r3, #18
 8004b96:	4013      	ands	r3, r2
 8004b98:	d1f0      	bne.n	8004b7c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b9a:	4b3c      	ldr	r3, [pc, #240]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9e:	220f      	movs	r2, #15
 8004ba0:	4393      	bics	r3, r2
 8004ba2:	0019      	movs	r1, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba8:	4b38      	ldr	r3, [pc, #224]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004baa:	430a      	orrs	r2, r1
 8004bac:	62da      	str	r2, [r3, #44]	; 0x2c
 8004bae:	4b37      	ldr	r3, [pc, #220]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	4a3a      	ldr	r2, [pc, #232]	; (8004c9c <HAL_RCC_OscConfig+0x630>)
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	0019      	movs	r1, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	4b32      	ldr	r3, [pc, #200]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bc8:	4b30      	ldr	r3, [pc, #192]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	4b2f      	ldr	r3, [pc, #188]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004bce:	2180      	movs	r1, #128	; 0x80
 8004bd0:	0449      	lsls	r1, r1, #17
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd6:	f7fe fa9f 	bl	8003118 <HAL_GetTick>
 8004bda:	0003      	movs	r3, r0
 8004bdc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004be0:	f7fe fa9a 	bl	8003118 <HAL_GetTick>
 8004be4:	0002      	movs	r2, r0
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e047      	b.n	8004c82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bf2:	4b26      	ldr	r3, [pc, #152]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	2380      	movs	r3, #128	; 0x80
 8004bf8:	049b      	lsls	r3, r3, #18
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	d0f0      	beq.n	8004be0 <HAL_RCC_OscConfig+0x574>
 8004bfe:	e03f      	b.n	8004c80 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c00:	4b22      	ldr	r3, [pc, #136]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	4b21      	ldr	r3, [pc, #132]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004c06:	4924      	ldr	r1, [pc, #144]	; (8004c98 <HAL_RCC_OscConfig+0x62c>)
 8004c08:	400a      	ands	r2, r1
 8004c0a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c0c:	f7fe fa84 	bl	8003118 <HAL_GetTick>
 8004c10:	0003      	movs	r3, r0
 8004c12:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c14:	e008      	b.n	8004c28 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c16:	f7fe fa7f 	bl	8003118 <HAL_GetTick>
 8004c1a:	0002      	movs	r2, r0
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e02c      	b.n	8004c82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c28:	4b18      	ldr	r3, [pc, #96]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	2380      	movs	r3, #128	; 0x80
 8004c2e:	049b      	lsls	r3, r3, #18
 8004c30:	4013      	ands	r3, r2
 8004c32:	d1f0      	bne.n	8004c16 <HAL_RCC_OscConfig+0x5aa>
 8004c34:	e024      	b.n	8004c80 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d101      	bne.n	8004c42 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e01f      	b.n	8004c82 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004c42:	4b12      	ldr	r3, [pc, #72]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004c48:	4b10      	ldr	r3, [pc, #64]	; (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	2380      	movs	r3, #128	; 0x80
 8004c52:	025b      	lsls	r3, r3, #9
 8004c54:	401a      	ands	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d10e      	bne.n	8004c7c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	220f      	movs	r2, #15
 8004c62:	401a      	ands	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d107      	bne.n	8004c7c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	23f0      	movs	r3, #240	; 0xf0
 8004c70:	039b      	lsls	r3, r3, #14
 8004c72:	401a      	ands	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d001      	beq.n	8004c80 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e000      	b.n	8004c82 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	0018      	movs	r0, r3
 8004c84:	46bd      	mov	sp, r7
 8004c86:	b008      	add	sp, #32
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	46c0      	nop			; (mov r8, r8)
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	00001388 	.word	0x00001388
 8004c94:	efffffff 	.word	0xefffffff
 8004c98:	feffffff 	.word	0xfeffffff
 8004c9c:	ffc2ffff 	.word	0xffc2ffff

08004ca0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e0b3      	b.n	8004e1c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cb4:	4b5b      	ldr	r3, [pc, #364]	; (8004e24 <HAL_RCC_ClockConfig+0x184>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	4013      	ands	r3, r2
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d911      	bls.n	8004ce6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cc2:	4b58      	ldr	r3, [pc, #352]	; (8004e24 <HAL_RCC_ClockConfig+0x184>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	4393      	bics	r3, r2
 8004cca:	0019      	movs	r1, r3
 8004ccc:	4b55      	ldr	r3, [pc, #340]	; (8004e24 <HAL_RCC_ClockConfig+0x184>)
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cd4:	4b53      	ldr	r3, [pc, #332]	; (8004e24 <HAL_RCC_ClockConfig+0x184>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	4013      	ands	r3, r2
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d001      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e09a      	b.n	8004e1c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2202      	movs	r2, #2
 8004cec:	4013      	ands	r3, r2
 8004cee:	d015      	beq.n	8004d1c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2204      	movs	r2, #4
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	d006      	beq.n	8004d08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004cfa:	4b4b      	ldr	r3, [pc, #300]	; (8004e28 <HAL_RCC_ClockConfig+0x188>)
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	4b4a      	ldr	r3, [pc, #296]	; (8004e28 <HAL_RCC_ClockConfig+0x188>)
 8004d00:	21e0      	movs	r1, #224	; 0xe0
 8004d02:	00c9      	lsls	r1, r1, #3
 8004d04:	430a      	orrs	r2, r1
 8004d06:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d08:	4b47      	ldr	r3, [pc, #284]	; (8004e28 <HAL_RCC_ClockConfig+0x188>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	22f0      	movs	r2, #240	; 0xf0
 8004d0e:	4393      	bics	r3, r2
 8004d10:	0019      	movs	r1, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	4b44      	ldr	r3, [pc, #272]	; (8004e28 <HAL_RCC_ClockConfig+0x188>)
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2201      	movs	r2, #1
 8004d22:	4013      	ands	r3, r2
 8004d24:	d040      	beq.n	8004da8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d107      	bne.n	8004d3e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d2e:	4b3e      	ldr	r3, [pc, #248]	; (8004e28 <HAL_RCC_ClockConfig+0x188>)
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	2380      	movs	r3, #128	; 0x80
 8004d34:	029b      	lsls	r3, r3, #10
 8004d36:	4013      	ands	r3, r2
 8004d38:	d114      	bne.n	8004d64 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e06e      	b.n	8004e1c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d107      	bne.n	8004d56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d46:	4b38      	ldr	r3, [pc, #224]	; (8004e28 <HAL_RCC_ClockConfig+0x188>)
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	2380      	movs	r3, #128	; 0x80
 8004d4c:	049b      	lsls	r3, r3, #18
 8004d4e:	4013      	ands	r3, r2
 8004d50:	d108      	bne.n	8004d64 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e062      	b.n	8004e1c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d56:	4b34      	ldr	r3, [pc, #208]	; (8004e28 <HAL_RCC_ClockConfig+0x188>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	d101      	bne.n	8004d64 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e05b      	b.n	8004e1c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d64:	4b30      	ldr	r3, [pc, #192]	; (8004e28 <HAL_RCC_ClockConfig+0x188>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2203      	movs	r2, #3
 8004d6a:	4393      	bics	r3, r2
 8004d6c:	0019      	movs	r1, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	4b2d      	ldr	r3, [pc, #180]	; (8004e28 <HAL_RCC_ClockConfig+0x188>)
 8004d74:	430a      	orrs	r2, r1
 8004d76:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d78:	f7fe f9ce 	bl	8003118 <HAL_GetTick>
 8004d7c:	0003      	movs	r3, r0
 8004d7e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d80:	e009      	b.n	8004d96 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d82:	f7fe f9c9 	bl	8003118 <HAL_GetTick>
 8004d86:	0002      	movs	r2, r0
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	4a27      	ldr	r2, [pc, #156]	; (8004e2c <HAL_RCC_ClockConfig+0x18c>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e042      	b.n	8004e1c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d96:	4b24      	ldr	r3, [pc, #144]	; (8004e28 <HAL_RCC_ClockConfig+0x188>)
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	220c      	movs	r2, #12
 8004d9c:	401a      	ands	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d1ec      	bne.n	8004d82 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004da8:	4b1e      	ldr	r3, [pc, #120]	; (8004e24 <HAL_RCC_ClockConfig+0x184>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2201      	movs	r2, #1
 8004dae:	4013      	ands	r3, r2
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d211      	bcs.n	8004dda <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004db6:	4b1b      	ldr	r3, [pc, #108]	; (8004e24 <HAL_RCC_ClockConfig+0x184>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	4393      	bics	r3, r2
 8004dbe:	0019      	movs	r1, r3
 8004dc0:	4b18      	ldr	r3, [pc, #96]	; (8004e24 <HAL_RCC_ClockConfig+0x184>)
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dc8:	4b16      	ldr	r3, [pc, #88]	; (8004e24 <HAL_RCC_ClockConfig+0x184>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	4013      	ands	r3, r2
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d001      	beq.n	8004dda <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e020      	b.n	8004e1c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2204      	movs	r2, #4
 8004de0:	4013      	ands	r3, r2
 8004de2:	d009      	beq.n	8004df8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004de4:	4b10      	ldr	r3, [pc, #64]	; (8004e28 <HAL_RCC_ClockConfig+0x188>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	4a11      	ldr	r2, [pc, #68]	; (8004e30 <HAL_RCC_ClockConfig+0x190>)
 8004dea:	4013      	ands	r3, r2
 8004dec:	0019      	movs	r1, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68da      	ldr	r2, [r3, #12]
 8004df2:	4b0d      	ldr	r3, [pc, #52]	; (8004e28 <HAL_RCC_ClockConfig+0x188>)
 8004df4:	430a      	orrs	r2, r1
 8004df6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004df8:	f000 f820 	bl	8004e3c <HAL_RCC_GetSysClockFreq>
 8004dfc:	0001      	movs	r1, r0
 8004dfe:	4b0a      	ldr	r3, [pc, #40]	; (8004e28 <HAL_RCC_ClockConfig+0x188>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	091b      	lsrs	r3, r3, #4
 8004e04:	220f      	movs	r2, #15
 8004e06:	4013      	ands	r3, r2
 8004e08:	4a0a      	ldr	r2, [pc, #40]	; (8004e34 <HAL_RCC_ClockConfig+0x194>)
 8004e0a:	5cd3      	ldrb	r3, [r2, r3]
 8004e0c:	000a      	movs	r2, r1
 8004e0e:	40da      	lsrs	r2, r3
 8004e10:	4b09      	ldr	r3, [pc, #36]	; (8004e38 <HAL_RCC_ClockConfig+0x198>)
 8004e12:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004e14:	2003      	movs	r0, #3
 8004e16:	f7fe f939 	bl	800308c <HAL_InitTick>
  
  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	0018      	movs	r0, r3
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	b004      	add	sp, #16
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	40022000 	.word	0x40022000
 8004e28:	40021000 	.word	0x40021000
 8004e2c:	00001388 	.word	0x00001388
 8004e30:	fffff8ff 	.word	0xfffff8ff
 8004e34:	0800926c 	.word	0x0800926c
 8004e38:	20000000 	.word	0x20000000

08004e3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	60fb      	str	r3, [r7, #12]
 8004e46:	2300      	movs	r3, #0
 8004e48:	60bb      	str	r3, [r7, #8]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	617b      	str	r3, [r7, #20]
 8004e4e:	2300      	movs	r3, #0
 8004e50:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004e56:	4b20      	ldr	r3, [pc, #128]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	220c      	movs	r2, #12
 8004e60:	4013      	ands	r3, r2
 8004e62:	2b04      	cmp	r3, #4
 8004e64:	d002      	beq.n	8004e6c <HAL_RCC_GetSysClockFreq+0x30>
 8004e66:	2b08      	cmp	r3, #8
 8004e68:	d003      	beq.n	8004e72 <HAL_RCC_GetSysClockFreq+0x36>
 8004e6a:	e02c      	b.n	8004ec6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e6c:	4b1b      	ldr	r3, [pc, #108]	; (8004edc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004e6e:	613b      	str	r3, [r7, #16]
      break;
 8004e70:	e02c      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	0c9b      	lsrs	r3, r3, #18
 8004e76:	220f      	movs	r2, #15
 8004e78:	4013      	ands	r3, r2
 8004e7a:	4a19      	ldr	r2, [pc, #100]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e7c:	5cd3      	ldrb	r3, [r2, r3]
 8004e7e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004e80:	4b15      	ldr	r3, [pc, #84]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e84:	220f      	movs	r2, #15
 8004e86:	4013      	ands	r3, r2
 8004e88:	4a16      	ldr	r2, [pc, #88]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004e8a:	5cd3      	ldrb	r3, [r2, r3]
 8004e8c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	2380      	movs	r3, #128	; 0x80
 8004e92:	025b      	lsls	r3, r3, #9
 8004e94:	4013      	ands	r3, r2
 8004e96:	d009      	beq.n	8004eac <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004e98:	68b9      	ldr	r1, [r7, #8]
 8004e9a:	4810      	ldr	r0, [pc, #64]	; (8004edc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004e9c:	f7fb f950 	bl	8000140 <__udivsi3>
 8004ea0:	0003      	movs	r3, r0
 8004ea2:	001a      	movs	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4353      	muls	r3, r2
 8004ea8:	617b      	str	r3, [r7, #20]
 8004eaa:	e009      	b.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	000a      	movs	r2, r1
 8004eb0:	0152      	lsls	r2, r2, #5
 8004eb2:	1a52      	subs	r2, r2, r1
 8004eb4:	0193      	lsls	r3, r2, #6
 8004eb6:	1a9b      	subs	r3, r3, r2
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	185b      	adds	r3, r3, r1
 8004ebc:	021b      	lsls	r3, r3, #8
 8004ebe:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	613b      	str	r3, [r7, #16]
      break;
 8004ec4:	e002      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ec6:	4b05      	ldr	r3, [pc, #20]	; (8004edc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004ec8:	613b      	str	r3, [r7, #16]
      break;
 8004eca:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004ecc:	693b      	ldr	r3, [r7, #16]
}
 8004ece:	0018      	movs	r0, r3
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	b006      	add	sp, #24
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	46c0      	nop			; (mov r8, r8)
 8004ed8:	40021000 	.word	0x40021000
 8004edc:	007a1200 	.word	0x007a1200
 8004ee0:	08009284 	.word	0x08009284
 8004ee4:	08009294 	.word	0x08009294

08004ee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004eec:	4b02      	ldr	r3, [pc, #8]	; (8004ef8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004eee:	681b      	ldr	r3, [r3, #0]
}
 8004ef0:	0018      	movs	r0, r3
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	46c0      	nop			; (mov r8, r8)
 8004ef8:	20000000 	.word	0x20000000

08004efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004f00:	f7ff fff2 	bl	8004ee8 <HAL_RCC_GetHCLKFreq>
 8004f04:	0001      	movs	r1, r0
 8004f06:	4b06      	ldr	r3, [pc, #24]	; (8004f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	0a1b      	lsrs	r3, r3, #8
 8004f0c:	2207      	movs	r2, #7
 8004f0e:	4013      	ands	r3, r2
 8004f10:	4a04      	ldr	r2, [pc, #16]	; (8004f24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f12:	5cd3      	ldrb	r3, [r2, r3]
 8004f14:	40d9      	lsrs	r1, r3
 8004f16:	000b      	movs	r3, r1
}    
 8004f18:	0018      	movs	r0, r3
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	46c0      	nop			; (mov r8, r8)
 8004f20:	40021000 	.word	0x40021000
 8004f24:	0800927c 	.word	0x0800927c

08004f28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	2380      	movs	r3, #128	; 0x80
 8004f3e:	025b      	lsls	r3, r3, #9
 8004f40:	4013      	ands	r3, r2
 8004f42:	d100      	bne.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004f44:	e08e      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004f46:	2017      	movs	r0, #23
 8004f48:	183b      	adds	r3, r7, r0
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f4e:	4b57      	ldr	r3, [pc, #348]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004f50:	69da      	ldr	r2, [r3, #28]
 8004f52:	2380      	movs	r3, #128	; 0x80
 8004f54:	055b      	lsls	r3, r3, #21
 8004f56:	4013      	ands	r3, r2
 8004f58:	d110      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f5a:	4b54      	ldr	r3, [pc, #336]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004f5c:	69da      	ldr	r2, [r3, #28]
 8004f5e:	4b53      	ldr	r3, [pc, #332]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004f60:	2180      	movs	r1, #128	; 0x80
 8004f62:	0549      	lsls	r1, r1, #21
 8004f64:	430a      	orrs	r2, r1
 8004f66:	61da      	str	r2, [r3, #28]
 8004f68:	4b50      	ldr	r3, [pc, #320]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004f6a:	69da      	ldr	r2, [r3, #28]
 8004f6c:	2380      	movs	r3, #128	; 0x80
 8004f6e:	055b      	lsls	r3, r3, #21
 8004f70:	4013      	ands	r3, r2
 8004f72:	60bb      	str	r3, [r7, #8]
 8004f74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f76:	183b      	adds	r3, r7, r0
 8004f78:	2201      	movs	r2, #1
 8004f7a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f7c:	4b4c      	ldr	r3, [pc, #304]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	2380      	movs	r3, #128	; 0x80
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	4013      	ands	r3, r2
 8004f86:	d11a      	bne.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f88:	4b49      	ldr	r3, [pc, #292]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	4b48      	ldr	r3, [pc, #288]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004f8e:	2180      	movs	r1, #128	; 0x80
 8004f90:	0049      	lsls	r1, r1, #1
 8004f92:	430a      	orrs	r2, r1
 8004f94:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f96:	f7fe f8bf 	bl	8003118 <HAL_GetTick>
 8004f9a:	0003      	movs	r3, r0
 8004f9c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fa0:	f7fe f8ba 	bl	8003118 <HAL_GetTick>
 8004fa4:	0002      	movs	r2, r0
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b64      	cmp	r3, #100	; 0x64
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e077      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fb2:	4b3f      	ldr	r3, [pc, #252]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	2380      	movs	r3, #128	; 0x80
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	4013      	ands	r3, r2
 8004fbc:	d0f0      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fbe:	4b3b      	ldr	r3, [pc, #236]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004fc0:	6a1a      	ldr	r2, [r3, #32]
 8004fc2:	23c0      	movs	r3, #192	; 0xc0
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d034      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	23c0      	movs	r3, #192	; 0xc0
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4013      	ands	r3, r2
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d02c      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fe0:	4b32      	ldr	r3, [pc, #200]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	4a33      	ldr	r2, [pc, #204]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fea:	4b30      	ldr	r3, [pc, #192]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004fec:	6a1a      	ldr	r2, [r3, #32]
 8004fee:	4b2f      	ldr	r3, [pc, #188]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004ff0:	2180      	movs	r1, #128	; 0x80
 8004ff2:	0249      	lsls	r1, r1, #9
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ff8:	4b2c      	ldr	r3, [pc, #176]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004ffa:	6a1a      	ldr	r2, [r3, #32]
 8004ffc:	4b2b      	ldr	r3, [pc, #172]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004ffe:	492e      	ldr	r1, [pc, #184]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005000:	400a      	ands	r2, r1
 8005002:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005004:	4b29      	ldr	r3, [pc, #164]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2201      	movs	r2, #1
 800500e:	4013      	ands	r3, r2
 8005010:	d013      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005012:	f7fe f881 	bl	8003118 <HAL_GetTick>
 8005016:	0003      	movs	r3, r0
 8005018:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800501a:	e009      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800501c:	f7fe f87c 	bl	8003118 <HAL_GetTick>
 8005020:	0002      	movs	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	4a25      	ldr	r2, [pc, #148]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d901      	bls.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e038      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005030:	4b1e      	ldr	r3, [pc, #120]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	2202      	movs	r2, #2
 8005036:	4013      	ands	r3, r2
 8005038:	d0f0      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800503a:	4b1c      	ldr	r3, [pc, #112]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	4a1d      	ldr	r2, [pc, #116]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005040:	4013      	ands	r3, r2
 8005042:	0019      	movs	r1, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	4b18      	ldr	r3, [pc, #96]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800504a:	430a      	orrs	r2, r1
 800504c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800504e:	2317      	movs	r3, #23
 8005050:	18fb      	adds	r3, r7, r3
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d105      	bne.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005058:	4b14      	ldr	r3, [pc, #80]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800505a:	69da      	ldr	r2, [r3, #28]
 800505c:	4b13      	ldr	r3, [pc, #76]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800505e:	4918      	ldr	r1, [pc, #96]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8005060:	400a      	ands	r2, r1
 8005062:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2201      	movs	r2, #1
 800506a:	4013      	ands	r3, r2
 800506c:	d009      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800506e:	4b0f      	ldr	r3, [pc, #60]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005072:	2203      	movs	r2, #3
 8005074:	4393      	bics	r3, r2
 8005076:	0019      	movs	r1, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689a      	ldr	r2, [r3, #8]
 800507c:	4b0b      	ldr	r3, [pc, #44]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800507e:	430a      	orrs	r2, r1
 8005080:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2220      	movs	r2, #32
 8005088:	4013      	ands	r3, r2
 800508a:	d009      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800508c:	4b07      	ldr	r3, [pc, #28]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800508e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005090:	2210      	movs	r2, #16
 8005092:	4393      	bics	r3, r2
 8005094:	0019      	movs	r1, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	4b04      	ldr	r3, [pc, #16]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800509c:	430a      	orrs	r2, r1
 800509e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	0018      	movs	r0, r3
 80050a4:	46bd      	mov	sp, r7
 80050a6:	b006      	add	sp, #24
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	46c0      	nop			; (mov r8, r8)
 80050ac:	40021000 	.word	0x40021000
 80050b0:	40007000 	.word	0x40007000
 80050b4:	fffffcff 	.word	0xfffffcff
 80050b8:	fffeffff 	.word	0xfffeffff
 80050bc:	00001388 	.word	0x00001388
 80050c0:	efffffff 	.word	0xefffffff

080050c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e042      	b.n	800515c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	223d      	movs	r2, #61	; 0x3d
 80050da:	5c9b      	ldrb	r3, [r3, r2]
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d107      	bne.n	80050f2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	223c      	movs	r2, #60	; 0x3c
 80050e6:	2100      	movs	r1, #0
 80050e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	0018      	movs	r0, r3
 80050ee:	f7fd fda9 	bl	8002c44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	223d      	movs	r2, #61	; 0x3d
 80050f6:	2102      	movs	r1, #2
 80050f8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	3304      	adds	r3, #4
 8005102:	0019      	movs	r1, r3
 8005104:	0010      	movs	r0, r2
 8005106:	f000 fb15 	bl	8005734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2246      	movs	r2, #70	; 0x46
 800510e:	2101      	movs	r1, #1
 8005110:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	223e      	movs	r2, #62	; 0x3e
 8005116:	2101      	movs	r1, #1
 8005118:	5499      	strb	r1, [r3, r2]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	223f      	movs	r2, #63	; 0x3f
 800511e:	2101      	movs	r1, #1
 8005120:	5499      	strb	r1, [r3, r2]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2240      	movs	r2, #64	; 0x40
 8005126:	2101      	movs	r1, #1
 8005128:	5499      	strb	r1, [r3, r2]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2241      	movs	r2, #65	; 0x41
 800512e:	2101      	movs	r1, #1
 8005130:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2242      	movs	r2, #66	; 0x42
 8005136:	2101      	movs	r1, #1
 8005138:	5499      	strb	r1, [r3, r2]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2243      	movs	r2, #67	; 0x43
 800513e:	2101      	movs	r1, #1
 8005140:	5499      	strb	r1, [r3, r2]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2244      	movs	r2, #68	; 0x44
 8005146:	2101      	movs	r1, #1
 8005148:	5499      	strb	r1, [r3, r2]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2245      	movs	r2, #69	; 0x45
 800514e:	2101      	movs	r1, #1
 8005150:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	223d      	movs	r2, #61	; 0x3d
 8005156:	2101      	movs	r1, #1
 8005158:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	0018      	movs	r0, r3
 800515e:	46bd      	mov	sp, r7
 8005160:	b002      	add	sp, #8
 8005162:	bd80      	pop	{r7, pc}

08005164 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	223d      	movs	r2, #61	; 0x3d
 8005170:	5c9b      	ldrb	r3, [r3, r2]
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b01      	cmp	r3, #1
 8005176:	d001      	beq.n	800517c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e02d      	b.n	80051d8 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	223d      	movs	r2, #61	; 0x3d
 8005180:	2102      	movs	r1, #2
 8005182:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a15      	ldr	r2, [pc, #84]	; (80051e0 <HAL_TIM_Base_Start+0x7c>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d009      	beq.n	80051a2 <HAL_TIM_Base_Start+0x3e>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a14      	ldr	r2, [pc, #80]	; (80051e4 <HAL_TIM_Base_Start+0x80>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d004      	beq.n	80051a2 <HAL_TIM_Base_Start+0x3e>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a12      	ldr	r2, [pc, #72]	; (80051e8 <HAL_TIM_Base_Start+0x84>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d111      	bne.n	80051c6 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	2207      	movs	r2, #7
 80051aa:	4013      	ands	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2b06      	cmp	r3, #6
 80051b2:	d010      	beq.n	80051d6 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2101      	movs	r1, #1
 80051c0:	430a      	orrs	r2, r1
 80051c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c4:	e007      	b.n	80051d6 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2101      	movs	r1, #1
 80051d2:	430a      	orrs	r2, r1
 80051d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	0018      	movs	r0, r3
 80051da:	46bd      	mov	sp, r7
 80051dc:	b004      	add	sp, #16
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	40012c00 	.word	0x40012c00
 80051e4:	40000400 	.word	0x40000400
 80051e8:	40014000 	.word	0x40014000

080051ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e042      	b.n	8005284 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	223d      	movs	r2, #61	; 0x3d
 8005202:	5c9b      	ldrb	r3, [r3, r2]
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d107      	bne.n	800521a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	223c      	movs	r2, #60	; 0x3c
 800520e:	2100      	movs	r1, #0
 8005210:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	0018      	movs	r0, r3
 8005216:	f000 f839 	bl	800528c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	223d      	movs	r2, #61	; 0x3d
 800521e:	2102      	movs	r1, #2
 8005220:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	3304      	adds	r3, #4
 800522a:	0019      	movs	r1, r3
 800522c:	0010      	movs	r0, r2
 800522e:	f000 fa81 	bl	8005734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2246      	movs	r2, #70	; 0x46
 8005236:	2101      	movs	r1, #1
 8005238:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	223e      	movs	r2, #62	; 0x3e
 800523e:	2101      	movs	r1, #1
 8005240:	5499      	strb	r1, [r3, r2]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	223f      	movs	r2, #63	; 0x3f
 8005246:	2101      	movs	r1, #1
 8005248:	5499      	strb	r1, [r3, r2]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2240      	movs	r2, #64	; 0x40
 800524e:	2101      	movs	r1, #1
 8005250:	5499      	strb	r1, [r3, r2]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2241      	movs	r2, #65	; 0x41
 8005256:	2101      	movs	r1, #1
 8005258:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2242      	movs	r2, #66	; 0x42
 800525e:	2101      	movs	r1, #1
 8005260:	5499      	strb	r1, [r3, r2]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2243      	movs	r2, #67	; 0x43
 8005266:	2101      	movs	r1, #1
 8005268:	5499      	strb	r1, [r3, r2]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2244      	movs	r2, #68	; 0x44
 800526e:	2101      	movs	r1, #1
 8005270:	5499      	strb	r1, [r3, r2]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2245      	movs	r2, #69	; 0x45
 8005276:	2101      	movs	r1, #1
 8005278:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	223d      	movs	r2, #61	; 0x3d
 800527e:	2101      	movs	r1, #1
 8005280:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	0018      	movs	r0, r3
 8005286:	46bd      	mov	sp, r7
 8005288:	b002      	add	sp, #8
 800528a:	bd80      	pop	{r7, pc}

0800528c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005294:	46c0      	nop			; (mov r8, r8)
 8005296:	46bd      	mov	sp, r7
 8005298:	b002      	add	sp, #8
 800529a:	bd80      	pop	{r7, pc}

0800529c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d108      	bne.n	80052be <HAL_TIM_PWM_Start+0x22>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	223e      	movs	r2, #62	; 0x3e
 80052b0:	5c9b      	ldrb	r3, [r3, r2]
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	3b01      	subs	r3, #1
 80052b6:	1e5a      	subs	r2, r3, #1
 80052b8:	4193      	sbcs	r3, r2
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	e01f      	b.n	80052fe <HAL_TIM_PWM_Start+0x62>
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b04      	cmp	r3, #4
 80052c2:	d108      	bne.n	80052d6 <HAL_TIM_PWM_Start+0x3a>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	223f      	movs	r2, #63	; 0x3f
 80052c8:	5c9b      	ldrb	r3, [r3, r2]
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	3b01      	subs	r3, #1
 80052ce:	1e5a      	subs	r2, r3, #1
 80052d0:	4193      	sbcs	r3, r2
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	e013      	b.n	80052fe <HAL_TIM_PWM_Start+0x62>
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d108      	bne.n	80052ee <HAL_TIM_PWM_Start+0x52>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2240      	movs	r2, #64	; 0x40
 80052e0:	5c9b      	ldrb	r3, [r3, r2]
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	3b01      	subs	r3, #1
 80052e6:	1e5a      	subs	r2, r3, #1
 80052e8:	4193      	sbcs	r3, r2
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	e007      	b.n	80052fe <HAL_TIM_PWM_Start+0x62>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2241      	movs	r2, #65	; 0x41
 80052f2:	5c9b      	ldrb	r3, [r3, r2]
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	3b01      	subs	r3, #1
 80052f8:	1e5a      	subs	r2, r3, #1
 80052fa:	4193      	sbcs	r3, r2
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e06e      	b.n	80053e4 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d104      	bne.n	8005316 <HAL_TIM_PWM_Start+0x7a>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	223e      	movs	r2, #62	; 0x3e
 8005310:	2102      	movs	r1, #2
 8005312:	5499      	strb	r1, [r3, r2]
 8005314:	e013      	b.n	800533e <HAL_TIM_PWM_Start+0xa2>
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b04      	cmp	r3, #4
 800531a:	d104      	bne.n	8005326 <HAL_TIM_PWM_Start+0x8a>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	223f      	movs	r2, #63	; 0x3f
 8005320:	2102      	movs	r1, #2
 8005322:	5499      	strb	r1, [r3, r2]
 8005324:	e00b      	b.n	800533e <HAL_TIM_PWM_Start+0xa2>
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b08      	cmp	r3, #8
 800532a:	d104      	bne.n	8005336 <HAL_TIM_PWM_Start+0x9a>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2240      	movs	r2, #64	; 0x40
 8005330:	2102      	movs	r1, #2
 8005332:	5499      	strb	r1, [r3, r2]
 8005334:	e003      	b.n	800533e <HAL_TIM_PWM_Start+0xa2>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2241      	movs	r2, #65	; 0x41
 800533a:	2102      	movs	r1, #2
 800533c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6839      	ldr	r1, [r7, #0]
 8005344:	2201      	movs	r2, #1
 8005346:	0018      	movs	r0, r3
 8005348:	f000 fd00 	bl	8005d4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a26      	ldr	r2, [pc, #152]	; (80053ec <HAL_TIM_PWM_Start+0x150>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d00e      	beq.n	8005374 <HAL_TIM_PWM_Start+0xd8>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a25      	ldr	r2, [pc, #148]	; (80053f0 <HAL_TIM_PWM_Start+0x154>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d009      	beq.n	8005374 <HAL_TIM_PWM_Start+0xd8>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a23      	ldr	r2, [pc, #140]	; (80053f4 <HAL_TIM_PWM_Start+0x158>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d004      	beq.n	8005374 <HAL_TIM_PWM_Start+0xd8>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a22      	ldr	r2, [pc, #136]	; (80053f8 <HAL_TIM_PWM_Start+0x15c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d101      	bne.n	8005378 <HAL_TIM_PWM_Start+0xdc>
 8005374:	2301      	movs	r3, #1
 8005376:	e000      	b.n	800537a <HAL_TIM_PWM_Start+0xde>
 8005378:	2300      	movs	r3, #0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d008      	beq.n	8005390 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2180      	movs	r1, #128	; 0x80
 800538a:	0209      	lsls	r1, r1, #8
 800538c:	430a      	orrs	r2, r1
 800538e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a15      	ldr	r2, [pc, #84]	; (80053ec <HAL_TIM_PWM_Start+0x150>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d009      	beq.n	80053ae <HAL_TIM_PWM_Start+0x112>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a17      	ldr	r2, [pc, #92]	; (80053fc <HAL_TIM_PWM_Start+0x160>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d004      	beq.n	80053ae <HAL_TIM_PWM_Start+0x112>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a11      	ldr	r2, [pc, #68]	; (80053f0 <HAL_TIM_PWM_Start+0x154>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d111      	bne.n	80053d2 <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	2207      	movs	r2, #7
 80053b6:	4013      	ands	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2b06      	cmp	r3, #6
 80053be:	d010      	beq.n	80053e2 <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2101      	movs	r1, #1
 80053cc:	430a      	orrs	r2, r1
 80053ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053d0:	e007      	b.n	80053e2 <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2101      	movs	r1, #1
 80053de:	430a      	orrs	r2, r1
 80053e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	0018      	movs	r0, r3
 80053e6:	46bd      	mov	sp, r7
 80053e8:	b004      	add	sp, #16
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	40012c00 	.word	0x40012c00
 80053f0:	40014000 	.word	0x40014000
 80053f4:	40014400 	.word	0x40014400
 80053f8:	40014800 	.word	0x40014800
 80053fc:	40000400 	.word	0x40000400

08005400 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800540c:	2317      	movs	r3, #23
 800540e:	18fb      	adds	r3, r7, r3
 8005410:	2200      	movs	r2, #0
 8005412:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	223c      	movs	r2, #60	; 0x3c
 8005418:	5c9b      	ldrb	r3, [r3, r2]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d101      	bne.n	8005422 <HAL_TIM_PWM_ConfigChannel+0x22>
 800541e:	2302      	movs	r3, #2
 8005420:	e0ad      	b.n	800557e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	223c      	movs	r2, #60	; 0x3c
 8005426:	2101      	movs	r1, #1
 8005428:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b0c      	cmp	r3, #12
 800542e:	d100      	bne.n	8005432 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005430:	e076      	b.n	8005520 <HAL_TIM_PWM_ConfigChannel+0x120>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b0c      	cmp	r3, #12
 8005436:	d900      	bls.n	800543a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005438:	e095      	b.n	8005566 <HAL_TIM_PWM_ConfigChannel+0x166>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b08      	cmp	r3, #8
 800543e:	d04e      	beq.n	80054de <HAL_TIM_PWM_ConfigChannel+0xde>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b08      	cmp	r3, #8
 8005444:	d900      	bls.n	8005448 <HAL_TIM_PWM_ConfigChannel+0x48>
 8005446:	e08e      	b.n	8005566 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <HAL_TIM_PWM_ConfigChannel+0x56>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2b04      	cmp	r3, #4
 8005452:	d021      	beq.n	8005498 <HAL_TIM_PWM_ConfigChannel+0x98>
 8005454:	e087      	b.n	8005566 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	0011      	movs	r1, r2
 800545e:	0018      	movs	r0, r3
 8005460:	f000 f9de 	bl	8005820 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	699a      	ldr	r2, [r3, #24]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2108      	movs	r1, #8
 8005470:	430a      	orrs	r2, r1
 8005472:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	699a      	ldr	r2, [r3, #24]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2104      	movs	r1, #4
 8005480:	438a      	bics	r2, r1
 8005482:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6999      	ldr	r1, [r3, #24]
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	691a      	ldr	r2, [r3, #16]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	619a      	str	r2, [r3, #24]
      break;
 8005496:	e06b      	b.n	8005570 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	0011      	movs	r1, r2
 80054a0:	0018      	movs	r0, r3
 80054a2:	f000 fa45 	bl	8005930 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	699a      	ldr	r2, [r3, #24]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2180      	movs	r1, #128	; 0x80
 80054b2:	0109      	lsls	r1, r1, #4
 80054b4:	430a      	orrs	r2, r1
 80054b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699a      	ldr	r2, [r3, #24]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4931      	ldr	r1, [pc, #196]	; (8005588 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80054c4:	400a      	ands	r2, r1
 80054c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6999      	ldr	r1, [r3, #24]
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	021a      	lsls	r2, r3, #8
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	619a      	str	r2, [r3, #24]
      break;
 80054dc:	e048      	b.n	8005570 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	0011      	movs	r1, r2
 80054e6:	0018      	movs	r0, r3
 80054e8:	f000 faa6 	bl	8005a38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	69da      	ldr	r2, [r3, #28]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2108      	movs	r1, #8
 80054f8:	430a      	orrs	r2, r1
 80054fa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	69da      	ldr	r2, [r3, #28]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2104      	movs	r1, #4
 8005508:	438a      	bics	r2, r1
 800550a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	69d9      	ldr	r1, [r3, #28]
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	691a      	ldr	r2, [r3, #16]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	61da      	str	r2, [r3, #28]
      break;
 800551e:	e027      	b.n	8005570 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	0011      	movs	r1, r2
 8005528:	0018      	movs	r0, r3
 800552a:	f000 fb0b 	bl	8005b44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	69da      	ldr	r2, [r3, #28]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2180      	movs	r1, #128	; 0x80
 800553a:	0109      	lsls	r1, r1, #4
 800553c:	430a      	orrs	r2, r1
 800553e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	69da      	ldr	r2, [r3, #28]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	490f      	ldr	r1, [pc, #60]	; (8005588 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800554c:	400a      	ands	r2, r1
 800554e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	69d9      	ldr	r1, [r3, #28]
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	021a      	lsls	r2, r3, #8
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	61da      	str	r2, [r3, #28]
      break;
 8005564:	e004      	b.n	8005570 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8005566:	2317      	movs	r3, #23
 8005568:	18fb      	adds	r3, r7, r3
 800556a:	2201      	movs	r2, #1
 800556c:	701a      	strb	r2, [r3, #0]
      break;
 800556e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	223c      	movs	r2, #60	; 0x3c
 8005574:	2100      	movs	r1, #0
 8005576:	5499      	strb	r1, [r3, r2]

  return status;
 8005578:	2317      	movs	r3, #23
 800557a:	18fb      	adds	r3, r7, r3
 800557c:	781b      	ldrb	r3, [r3, #0]
}
 800557e:	0018      	movs	r0, r3
 8005580:	46bd      	mov	sp, r7
 8005582:	b006      	add	sp, #24
 8005584:	bd80      	pop	{r7, pc}
 8005586:	46c0      	nop			; (mov r8, r8)
 8005588:	fffffbff 	.word	0xfffffbff

0800558c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005596:	230f      	movs	r3, #15
 8005598:	18fb      	adds	r3, r7, r3
 800559a:	2200      	movs	r2, #0
 800559c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	223c      	movs	r2, #60	; 0x3c
 80055a2:	5c9b      	ldrb	r3, [r3, r2]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d101      	bne.n	80055ac <HAL_TIM_ConfigClockSource+0x20>
 80055a8:	2302      	movs	r3, #2
 80055aa:	e0bc      	b.n	8005726 <HAL_TIM_ConfigClockSource+0x19a>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	223c      	movs	r2, #60	; 0x3c
 80055b0:	2101      	movs	r1, #1
 80055b2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	223d      	movs	r2, #61	; 0x3d
 80055b8:	2102      	movs	r1, #2
 80055ba:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	2277      	movs	r2, #119	; 0x77
 80055c8:	4393      	bics	r3, r2
 80055ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	4a58      	ldr	r2, [pc, #352]	; (8005730 <HAL_TIM_ConfigClockSource+0x1a4>)
 80055d0:	4013      	ands	r3, r2
 80055d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2280      	movs	r2, #128	; 0x80
 80055e2:	0192      	lsls	r2, r2, #6
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d040      	beq.n	800566a <HAL_TIM_ConfigClockSource+0xde>
 80055e8:	2280      	movs	r2, #128	; 0x80
 80055ea:	0192      	lsls	r2, r2, #6
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d900      	bls.n	80055f2 <HAL_TIM_ConfigClockSource+0x66>
 80055f0:	e088      	b.n	8005704 <HAL_TIM_ConfigClockSource+0x178>
 80055f2:	2280      	movs	r2, #128	; 0x80
 80055f4:	0152      	lsls	r2, r2, #5
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d100      	bne.n	80055fc <HAL_TIM_ConfigClockSource+0x70>
 80055fa:	e088      	b.n	800570e <HAL_TIM_ConfigClockSource+0x182>
 80055fc:	2280      	movs	r2, #128	; 0x80
 80055fe:	0152      	lsls	r2, r2, #5
 8005600:	4293      	cmp	r3, r2
 8005602:	d900      	bls.n	8005606 <HAL_TIM_ConfigClockSource+0x7a>
 8005604:	e07e      	b.n	8005704 <HAL_TIM_ConfigClockSource+0x178>
 8005606:	2b70      	cmp	r3, #112	; 0x70
 8005608:	d018      	beq.n	800563c <HAL_TIM_ConfigClockSource+0xb0>
 800560a:	d900      	bls.n	800560e <HAL_TIM_ConfigClockSource+0x82>
 800560c:	e07a      	b.n	8005704 <HAL_TIM_ConfigClockSource+0x178>
 800560e:	2b60      	cmp	r3, #96	; 0x60
 8005610:	d04f      	beq.n	80056b2 <HAL_TIM_ConfigClockSource+0x126>
 8005612:	d900      	bls.n	8005616 <HAL_TIM_ConfigClockSource+0x8a>
 8005614:	e076      	b.n	8005704 <HAL_TIM_ConfigClockSource+0x178>
 8005616:	2b50      	cmp	r3, #80	; 0x50
 8005618:	d03b      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x106>
 800561a:	d900      	bls.n	800561e <HAL_TIM_ConfigClockSource+0x92>
 800561c:	e072      	b.n	8005704 <HAL_TIM_ConfigClockSource+0x178>
 800561e:	2b40      	cmp	r3, #64	; 0x40
 8005620:	d057      	beq.n	80056d2 <HAL_TIM_ConfigClockSource+0x146>
 8005622:	d900      	bls.n	8005626 <HAL_TIM_ConfigClockSource+0x9a>
 8005624:	e06e      	b.n	8005704 <HAL_TIM_ConfigClockSource+0x178>
 8005626:	2b30      	cmp	r3, #48	; 0x30
 8005628:	d063      	beq.n	80056f2 <HAL_TIM_ConfigClockSource+0x166>
 800562a:	d86b      	bhi.n	8005704 <HAL_TIM_ConfigClockSource+0x178>
 800562c:	2b20      	cmp	r3, #32
 800562e:	d060      	beq.n	80056f2 <HAL_TIM_ConfigClockSource+0x166>
 8005630:	d868      	bhi.n	8005704 <HAL_TIM_ConfigClockSource+0x178>
 8005632:	2b00      	cmp	r3, #0
 8005634:	d05d      	beq.n	80056f2 <HAL_TIM_ConfigClockSource+0x166>
 8005636:	2b10      	cmp	r3, #16
 8005638:	d05b      	beq.n	80056f2 <HAL_TIM_ConfigClockSource+0x166>
 800563a:	e063      	b.n	8005704 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800564c:	f000 fb5e 	bl	8005d0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	2277      	movs	r2, #119	; 0x77
 800565c:	4313      	orrs	r3, r2
 800565e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	609a      	str	r2, [r3, #8]
      break;
 8005668:	e052      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800567a:	f000 fb47 	bl	8005d0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689a      	ldr	r2, [r3, #8]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2180      	movs	r1, #128	; 0x80
 800568a:	01c9      	lsls	r1, r1, #7
 800568c:	430a      	orrs	r2, r1
 800568e:	609a      	str	r2, [r3, #8]
      break;
 8005690:	e03e      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800569e:	001a      	movs	r2, r3
 80056a0:	f000 faba 	bl	8005c18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2150      	movs	r1, #80	; 0x50
 80056aa:	0018      	movs	r0, r3
 80056ac:	f000 fb14 	bl	8005cd8 <TIM_ITRx_SetConfig>
      break;
 80056b0:	e02e      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056be:	001a      	movs	r2, r3
 80056c0:	f000 fad8 	bl	8005c74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2160      	movs	r1, #96	; 0x60
 80056ca:	0018      	movs	r0, r3
 80056cc:	f000 fb04 	bl	8005cd8 <TIM_ITRx_SetConfig>
      break;
 80056d0:	e01e      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056de:	001a      	movs	r2, r3
 80056e0:	f000 fa9a 	bl	8005c18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2140      	movs	r1, #64	; 0x40
 80056ea:	0018      	movs	r0, r3
 80056ec:	f000 faf4 	bl	8005cd8 <TIM_ITRx_SetConfig>
      break;
 80056f0:	e00e      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	0019      	movs	r1, r3
 80056fc:	0010      	movs	r0, r2
 80056fe:	f000 faeb 	bl	8005cd8 <TIM_ITRx_SetConfig>
      break;
 8005702:	e005      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005704:	230f      	movs	r3, #15
 8005706:	18fb      	adds	r3, r7, r3
 8005708:	2201      	movs	r2, #1
 800570a:	701a      	strb	r2, [r3, #0]
      break;
 800570c:	e000      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800570e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	223d      	movs	r2, #61	; 0x3d
 8005714:	2101      	movs	r1, #1
 8005716:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	223c      	movs	r2, #60	; 0x3c
 800571c:	2100      	movs	r1, #0
 800571e:	5499      	strb	r1, [r3, r2]

  return status;
 8005720:	230f      	movs	r3, #15
 8005722:	18fb      	adds	r3, r7, r3
 8005724:	781b      	ldrb	r3, [r3, #0]
}
 8005726:	0018      	movs	r0, r3
 8005728:	46bd      	mov	sp, r7
 800572a:	b004      	add	sp, #16
 800572c:	bd80      	pop	{r7, pc}
 800572e:	46c0      	nop			; (mov r8, r8)
 8005730:	ffff00ff 	.word	0xffff00ff

08005734 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a2f      	ldr	r2, [pc, #188]	; (8005804 <TIM_Base_SetConfig+0xd0>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d003      	beq.n	8005754 <TIM_Base_SetConfig+0x20>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a2e      	ldr	r2, [pc, #184]	; (8005808 <TIM_Base_SetConfig+0xd4>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d108      	bne.n	8005766 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2270      	movs	r2, #112	; 0x70
 8005758:	4393      	bics	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	4313      	orrs	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a26      	ldr	r2, [pc, #152]	; (8005804 <TIM_Base_SetConfig+0xd0>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d013      	beq.n	8005796 <TIM_Base_SetConfig+0x62>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a25      	ldr	r2, [pc, #148]	; (8005808 <TIM_Base_SetConfig+0xd4>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d00f      	beq.n	8005796 <TIM_Base_SetConfig+0x62>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a24      	ldr	r2, [pc, #144]	; (800580c <TIM_Base_SetConfig+0xd8>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d00b      	beq.n	8005796 <TIM_Base_SetConfig+0x62>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a23      	ldr	r2, [pc, #140]	; (8005810 <TIM_Base_SetConfig+0xdc>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d007      	beq.n	8005796 <TIM_Base_SetConfig+0x62>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a22      	ldr	r2, [pc, #136]	; (8005814 <TIM_Base_SetConfig+0xe0>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d003      	beq.n	8005796 <TIM_Base_SetConfig+0x62>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a21      	ldr	r2, [pc, #132]	; (8005818 <TIM_Base_SetConfig+0xe4>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d108      	bne.n	80057a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	4a20      	ldr	r2, [pc, #128]	; (800581c <TIM_Base_SetConfig+0xe8>)
 800579a:	4013      	ands	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2280      	movs	r2, #128	; 0x80
 80057ac:	4393      	bics	r3, r2
 80057ae:	001a      	movs	r2, r3
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	689a      	ldr	r2, [r3, #8]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a0c      	ldr	r2, [pc, #48]	; (8005804 <TIM_Base_SetConfig+0xd0>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d00b      	beq.n	80057ee <TIM_Base_SetConfig+0xba>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a0d      	ldr	r2, [pc, #52]	; (8005810 <TIM_Base_SetConfig+0xdc>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d007      	beq.n	80057ee <TIM_Base_SetConfig+0xba>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a0c      	ldr	r2, [pc, #48]	; (8005814 <TIM_Base_SetConfig+0xe0>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d003      	beq.n	80057ee <TIM_Base_SetConfig+0xba>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a0b      	ldr	r2, [pc, #44]	; (8005818 <TIM_Base_SetConfig+0xe4>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d103      	bne.n	80057f6 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	691a      	ldr	r2, [r3, #16]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	615a      	str	r2, [r3, #20]
}
 80057fc:	46c0      	nop			; (mov r8, r8)
 80057fe:	46bd      	mov	sp, r7
 8005800:	b004      	add	sp, #16
 8005802:	bd80      	pop	{r7, pc}
 8005804:	40012c00 	.word	0x40012c00
 8005808:	40000400 	.word	0x40000400
 800580c:	40002000 	.word	0x40002000
 8005810:	40014000 	.word	0x40014000
 8005814:	40014400 	.word	0x40014400
 8005818:	40014800 	.word	0x40014800
 800581c:	fffffcff 	.word	0xfffffcff

08005820 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	2201      	movs	r2, #1
 8005830:	4393      	bics	r3, r2
 8005832:	001a      	movs	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a1b      	ldr	r3, [r3, #32]
 800583c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2270      	movs	r2, #112	; 0x70
 800584e:	4393      	bics	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2203      	movs	r2, #3
 8005856:	4393      	bics	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	4313      	orrs	r3, r2
 8005862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	2202      	movs	r2, #2
 8005868:	4393      	bics	r3, r2
 800586a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	4313      	orrs	r3, r2
 8005874:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a27      	ldr	r2, [pc, #156]	; (8005918 <TIM_OC1_SetConfig+0xf8>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d00b      	beq.n	8005896 <TIM_OC1_SetConfig+0x76>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a26      	ldr	r2, [pc, #152]	; (800591c <TIM_OC1_SetConfig+0xfc>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d007      	beq.n	8005896 <TIM_OC1_SetConfig+0x76>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a25      	ldr	r2, [pc, #148]	; (8005920 <TIM_OC1_SetConfig+0x100>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d003      	beq.n	8005896 <TIM_OC1_SetConfig+0x76>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a24      	ldr	r2, [pc, #144]	; (8005924 <TIM_OC1_SetConfig+0x104>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d10c      	bne.n	80058b0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	2208      	movs	r2, #8
 800589a:	4393      	bics	r3, r2
 800589c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	2204      	movs	r2, #4
 80058ac:	4393      	bics	r3, r2
 80058ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a19      	ldr	r2, [pc, #100]	; (8005918 <TIM_OC1_SetConfig+0xf8>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d00b      	beq.n	80058d0 <TIM_OC1_SetConfig+0xb0>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a18      	ldr	r2, [pc, #96]	; (800591c <TIM_OC1_SetConfig+0xfc>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d007      	beq.n	80058d0 <TIM_OC1_SetConfig+0xb0>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a17      	ldr	r2, [pc, #92]	; (8005920 <TIM_OC1_SetConfig+0x100>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d003      	beq.n	80058d0 <TIM_OC1_SetConfig+0xb0>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a16      	ldr	r2, [pc, #88]	; (8005924 <TIM_OC1_SetConfig+0x104>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d111      	bne.n	80058f4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	4a15      	ldr	r2, [pc, #84]	; (8005928 <TIM_OC1_SetConfig+0x108>)
 80058d4:	4013      	ands	r3, r2
 80058d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	4a14      	ldr	r2, [pc, #80]	; (800592c <TIM_OC1_SetConfig+0x10c>)
 80058dc:	4013      	ands	r3, r2
 80058de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	693a      	ldr	r2, [r7, #16]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	621a      	str	r2, [r3, #32]
}
 800590e:	46c0      	nop			; (mov r8, r8)
 8005910:	46bd      	mov	sp, r7
 8005912:	b006      	add	sp, #24
 8005914:	bd80      	pop	{r7, pc}
 8005916:	46c0      	nop			; (mov r8, r8)
 8005918:	40012c00 	.word	0x40012c00
 800591c:	40014000 	.word	0x40014000
 8005920:	40014400 	.word	0x40014400
 8005924:	40014800 	.word	0x40014800
 8005928:	fffffeff 	.word	0xfffffeff
 800592c:	fffffdff 	.word	0xfffffdff

08005930 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	2210      	movs	r2, #16
 8005940:	4393      	bics	r3, r2
 8005942:	001a      	movs	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	4a2e      	ldr	r2, [pc, #184]	; (8005a18 <TIM_OC2_SetConfig+0xe8>)
 800595e:	4013      	ands	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	4a2d      	ldr	r2, [pc, #180]	; (8005a1c <TIM_OC2_SetConfig+0xec>)
 8005966:	4013      	ands	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	021b      	lsls	r3, r3, #8
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	4313      	orrs	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	2220      	movs	r2, #32
 800597a:	4393      	bics	r3, r2
 800597c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	011b      	lsls	r3, r3, #4
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a24      	ldr	r2, [pc, #144]	; (8005a20 <TIM_OC2_SetConfig+0xf0>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d10d      	bne.n	80059ae <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2280      	movs	r2, #128	; 0x80
 8005996:	4393      	bics	r3, r2
 8005998:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	011b      	lsls	r3, r3, #4
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2240      	movs	r2, #64	; 0x40
 80059aa:	4393      	bics	r3, r2
 80059ac:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a1b      	ldr	r2, [pc, #108]	; (8005a20 <TIM_OC2_SetConfig+0xf0>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d00b      	beq.n	80059ce <TIM_OC2_SetConfig+0x9e>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a1a      	ldr	r2, [pc, #104]	; (8005a24 <TIM_OC2_SetConfig+0xf4>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d007      	beq.n	80059ce <TIM_OC2_SetConfig+0x9e>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a19      	ldr	r2, [pc, #100]	; (8005a28 <TIM_OC2_SetConfig+0xf8>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d003      	beq.n	80059ce <TIM_OC2_SetConfig+0x9e>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a18      	ldr	r2, [pc, #96]	; (8005a2c <TIM_OC2_SetConfig+0xfc>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d113      	bne.n	80059f6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	4a17      	ldr	r2, [pc, #92]	; (8005a30 <TIM_OC2_SetConfig+0x100>)
 80059d2:	4013      	ands	r3, r2
 80059d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	4a16      	ldr	r2, [pc, #88]	; (8005a34 <TIM_OC2_SetConfig+0x104>)
 80059da:	4013      	ands	r3, r2
 80059dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	685a      	ldr	r2, [r3, #4]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	621a      	str	r2, [r3, #32]
}
 8005a10:	46c0      	nop			; (mov r8, r8)
 8005a12:	46bd      	mov	sp, r7
 8005a14:	b006      	add	sp, #24
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	ffff8fff 	.word	0xffff8fff
 8005a1c:	fffffcff 	.word	0xfffffcff
 8005a20:	40012c00 	.word	0x40012c00
 8005a24:	40014000 	.word	0x40014000
 8005a28:	40014400 	.word	0x40014400
 8005a2c:	40014800 	.word	0x40014800
 8005a30:	fffffbff 	.word	0xfffffbff
 8005a34:	fffff7ff 	.word	0xfffff7ff

08005a38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	4a35      	ldr	r2, [pc, #212]	; (8005b1c <TIM_OC3_SetConfig+0xe4>)
 8005a48:	401a      	ands	r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2270      	movs	r2, #112	; 0x70
 8005a64:	4393      	bics	r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2203      	movs	r2, #3
 8005a6c:	4393      	bics	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	4a28      	ldr	r2, [pc, #160]	; (8005b20 <TIM_OC3_SetConfig+0xe8>)
 8005a7e:	4013      	ands	r3, r2
 8005a80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	021b      	lsls	r3, r3, #8
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a24      	ldr	r2, [pc, #144]	; (8005b24 <TIM_OC3_SetConfig+0xec>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d10d      	bne.n	8005ab2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	4a23      	ldr	r2, [pc, #140]	; (8005b28 <TIM_OC3_SetConfig+0xf0>)
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	021b      	lsls	r3, r3, #8
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	4a1f      	ldr	r2, [pc, #124]	; (8005b2c <TIM_OC3_SetConfig+0xf4>)
 8005aae:	4013      	ands	r3, r2
 8005ab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a1b      	ldr	r2, [pc, #108]	; (8005b24 <TIM_OC3_SetConfig+0xec>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00b      	beq.n	8005ad2 <TIM_OC3_SetConfig+0x9a>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a1c      	ldr	r2, [pc, #112]	; (8005b30 <TIM_OC3_SetConfig+0xf8>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d007      	beq.n	8005ad2 <TIM_OC3_SetConfig+0x9a>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a1b      	ldr	r2, [pc, #108]	; (8005b34 <TIM_OC3_SetConfig+0xfc>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d003      	beq.n	8005ad2 <TIM_OC3_SetConfig+0x9a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a1a      	ldr	r2, [pc, #104]	; (8005b38 <TIM_OC3_SetConfig+0x100>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d113      	bne.n	8005afa <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	4a19      	ldr	r2, [pc, #100]	; (8005b3c <TIM_OC3_SetConfig+0x104>)
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	4a18      	ldr	r2, [pc, #96]	; (8005b40 <TIM_OC3_SetConfig+0x108>)
 8005ade:	4013      	ands	r3, r2
 8005ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	011b      	lsls	r3, r3, #4
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	011b      	lsls	r3, r3, #4
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	621a      	str	r2, [r3, #32]
}
 8005b14:	46c0      	nop			; (mov r8, r8)
 8005b16:	46bd      	mov	sp, r7
 8005b18:	b006      	add	sp, #24
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	fffffeff 	.word	0xfffffeff
 8005b20:	fffffdff 	.word	0xfffffdff
 8005b24:	40012c00 	.word	0x40012c00
 8005b28:	fffff7ff 	.word	0xfffff7ff
 8005b2c:	fffffbff 	.word	0xfffffbff
 8005b30:	40014000 	.word	0x40014000
 8005b34:	40014400 	.word	0x40014400
 8005b38:	40014800 	.word	0x40014800
 8005b3c:	ffffefff 	.word	0xffffefff
 8005b40:	ffffdfff 	.word	0xffffdfff

08005b44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	4a28      	ldr	r2, [pc, #160]	; (8005bf4 <TIM_OC4_SetConfig+0xb0>)
 8005b54:	401a      	ands	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4a22      	ldr	r2, [pc, #136]	; (8005bf8 <TIM_OC4_SetConfig+0xb4>)
 8005b70:	4013      	ands	r3, r2
 8005b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4a21      	ldr	r2, [pc, #132]	; (8005bfc <TIM_OC4_SetConfig+0xb8>)
 8005b78:	4013      	ands	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	021b      	lsls	r3, r3, #8
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	4a1d      	ldr	r2, [pc, #116]	; (8005c00 <TIM_OC4_SetConfig+0xbc>)
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	031b      	lsls	r3, r3, #12
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a19      	ldr	r2, [pc, #100]	; (8005c04 <TIM_OC4_SetConfig+0xc0>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d00b      	beq.n	8005bbc <TIM_OC4_SetConfig+0x78>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a18      	ldr	r2, [pc, #96]	; (8005c08 <TIM_OC4_SetConfig+0xc4>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d007      	beq.n	8005bbc <TIM_OC4_SetConfig+0x78>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a17      	ldr	r2, [pc, #92]	; (8005c0c <TIM_OC4_SetConfig+0xc8>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d003      	beq.n	8005bbc <TIM_OC4_SetConfig+0x78>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a16      	ldr	r2, [pc, #88]	; (8005c10 <TIM_OC4_SetConfig+0xcc>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d109      	bne.n	8005bd0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	4a15      	ldr	r2, [pc, #84]	; (8005c14 <TIM_OC4_SetConfig+0xd0>)
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	019b      	lsls	r3, r3, #6
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	621a      	str	r2, [r3, #32]
}
 8005bea:	46c0      	nop			; (mov r8, r8)
 8005bec:	46bd      	mov	sp, r7
 8005bee:	b006      	add	sp, #24
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	46c0      	nop			; (mov r8, r8)
 8005bf4:	ffffefff 	.word	0xffffefff
 8005bf8:	ffff8fff 	.word	0xffff8fff
 8005bfc:	fffffcff 	.word	0xfffffcff
 8005c00:	ffffdfff 	.word	0xffffdfff
 8005c04:	40012c00 	.word	0x40012c00
 8005c08:	40014000 	.word	0x40014000
 8005c0c:	40014400 	.word	0x40014400
 8005c10:	40014800 	.word	0x40014800
 8005c14:	ffffbfff 	.word	0xffffbfff

08005c18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	4393      	bics	r3, r2
 8005c32:	001a      	movs	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	22f0      	movs	r2, #240	; 0xf0
 8005c42:	4393      	bics	r3, r2
 8005c44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	011b      	lsls	r3, r3, #4
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	220a      	movs	r2, #10
 8005c54:	4393      	bics	r3, r2
 8005c56:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	621a      	str	r2, [r3, #32]
}
 8005c6c:	46c0      	nop			; (mov r8, r8)
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	b006      	add	sp, #24
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	2210      	movs	r2, #16
 8005c86:	4393      	bics	r3, r2
 8005c88:	001a      	movs	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6a1b      	ldr	r3, [r3, #32]
 8005c98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	4a0d      	ldr	r2, [pc, #52]	; (8005cd4 <TIM_TI2_ConfigInputStage+0x60>)
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	031b      	lsls	r3, r3, #12
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	22a0      	movs	r2, #160	; 0xa0
 8005cb0:	4393      	bics	r3, r2
 8005cb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	011b      	lsls	r3, r3, #4
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	621a      	str	r2, [r3, #32]
}
 8005cca:	46c0      	nop			; (mov r8, r8)
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	b006      	add	sp, #24
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	46c0      	nop			; (mov r8, r8)
 8005cd4:	ffff0fff 	.word	0xffff0fff

08005cd8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2270      	movs	r2, #112	; 0x70
 8005cec:	4393      	bics	r3, r2
 8005cee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	2207      	movs	r2, #7
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	609a      	str	r2, [r3, #8]
}
 8005d02:	46c0      	nop			; (mov r8, r8)
 8005d04:	46bd      	mov	sp, r7
 8005d06:	b004      	add	sp, #16
 8005d08:	bd80      	pop	{r7, pc}
	...

08005d0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
 8005d18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	4a09      	ldr	r2, [pc, #36]	; (8005d48 <TIM_ETR_SetConfig+0x3c>)
 8005d24:	4013      	ands	r3, r2
 8005d26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	021a      	lsls	r2, r3, #8
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	609a      	str	r2, [r3, #8]
}
 8005d40:	46c0      	nop			; (mov r8, r8)
 8005d42:	46bd      	mov	sp, r7
 8005d44:	b006      	add	sp, #24
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	ffff00ff 	.word	0xffff00ff

08005d4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	221f      	movs	r2, #31
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	2201      	movs	r2, #1
 8005d60:	409a      	lsls	r2, r3
 8005d62:	0013      	movs	r3, r2
 8005d64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	43d2      	mvns	r2, r2
 8005d6e:	401a      	ands	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6a1a      	ldr	r2, [r3, #32]
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	211f      	movs	r1, #31
 8005d7c:	400b      	ands	r3, r1
 8005d7e:	6879      	ldr	r1, [r7, #4]
 8005d80:	4099      	lsls	r1, r3
 8005d82:	000b      	movs	r3, r1
 8005d84:	431a      	orrs	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	621a      	str	r2, [r3, #32]
}
 8005d8a:	46c0      	nop			; (mov r8, r8)
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	b006      	add	sp, #24
 8005d90:	bd80      	pop	{r7, pc}
	...

08005d94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	223c      	movs	r2, #60	; 0x3c
 8005da2:	5c9b      	ldrb	r3, [r3, r2]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d101      	bne.n	8005dac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005da8:	2302      	movs	r3, #2
 8005daa:	e041      	b.n	8005e30 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	223c      	movs	r2, #60	; 0x3c
 8005db0:	2101      	movs	r1, #1
 8005db2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	223d      	movs	r2, #61	; 0x3d
 8005db8:	2102      	movs	r1, #2
 8005dba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2270      	movs	r2, #112	; 0x70
 8005dd0:	4393      	bics	r3, r2
 8005dd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a13      	ldr	r2, [pc, #76]	; (8005e38 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d009      	beq.n	8005e04 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a11      	ldr	r2, [pc, #68]	; (8005e3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d004      	beq.n	8005e04 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a10      	ldr	r2, [pc, #64]	; (8005e40 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d10c      	bne.n	8005e1e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	2280      	movs	r2, #128	; 0x80
 8005e08:	4393      	bics	r3, r2
 8005e0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	223d      	movs	r2, #61	; 0x3d
 8005e22:	2101      	movs	r1, #1
 8005e24:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	223c      	movs	r2, #60	; 0x3c
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	0018      	movs	r0, r3
 8005e32:	46bd      	mov	sp, r7
 8005e34:	b004      	add	sp, #16
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	40012c00 	.word	0x40012c00
 8005e3c:	40000400 	.word	0x40000400
 8005e40:	40014000 	.word	0x40014000

08005e44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e044      	b.n	8005ee0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d107      	bne.n	8005e6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2278      	movs	r2, #120	; 0x78
 8005e62:	2100      	movs	r1, #0
 8005e64:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	0018      	movs	r0, r3
 8005e6a:	f7fc ff49 	bl	8002d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2224      	movs	r2, #36	; 0x24
 8005e72:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2101      	movs	r1, #1
 8005e80:	438a      	bics	r2, r1
 8005e82:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	0018      	movs	r0, r3
 8005e88:	f000 f8d0 	bl	800602c <UART_SetConfig>
 8005e8c:	0003      	movs	r3, r0
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d101      	bne.n	8005e96 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e024      	b.n	8005ee0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d003      	beq.n	8005ea6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	0018      	movs	r0, r3
 8005ea2:	f000 fa03 	bl	80062ac <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	490d      	ldr	r1, [pc, #52]	; (8005ee8 <HAL_UART_Init+0xa4>)
 8005eb2:	400a      	ands	r2, r1
 8005eb4:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	689a      	ldr	r2, [r3, #8]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2108      	movs	r1, #8
 8005ec2:	438a      	bics	r2, r1
 8005ec4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2101      	movs	r1, #1
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	0018      	movs	r0, r3
 8005eda:	f000 fa9b 	bl	8006414 <UART_CheckIdleState>
 8005ede:	0003      	movs	r3, r0
}
 8005ee0:	0018      	movs	r0, r3
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	b002      	add	sp, #8
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	fffff7ff 	.word	0xfffff7ff

08005eec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b08a      	sub	sp, #40	; 0x28
 8005ef0:	af02      	add	r7, sp, #8
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	603b      	str	r3, [r7, #0]
 8005ef8:	1dbb      	adds	r3, r7, #6
 8005efa:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f00:	2b20      	cmp	r3, #32
 8005f02:	d000      	beq.n	8005f06 <HAL_UART_Transmit+0x1a>
 8005f04:	e08d      	b.n	8006022 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d003      	beq.n	8005f14 <HAL_UART_Transmit+0x28>
 8005f0c:	1dbb      	adds	r3, r7, #6
 8005f0e:	881b      	ldrh	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e085      	b.n	8006024 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	689a      	ldr	r2, [r3, #8]
 8005f1c:	2380      	movs	r3, #128	; 0x80
 8005f1e:	015b      	lsls	r3, r3, #5
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d109      	bne.n	8005f38 <HAL_UART_Transmit+0x4c>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d105      	bne.n	8005f38 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	4013      	ands	r3, r2
 8005f32:	d001      	beq.n	8005f38 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e075      	b.n	8006024 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2284      	movs	r2, #132	; 0x84
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2221      	movs	r2, #33	; 0x21
 8005f44:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f46:	f7fd f8e7 	bl	8003118 <HAL_GetTick>
 8005f4a:	0003      	movs	r3, r0
 8005f4c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	1dba      	adds	r2, r7, #6
 8005f52:	2150      	movs	r1, #80	; 0x50
 8005f54:	8812      	ldrh	r2, [r2, #0]
 8005f56:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	1dba      	adds	r2, r7, #6
 8005f5c:	2152      	movs	r1, #82	; 0x52
 8005f5e:	8812      	ldrh	r2, [r2, #0]
 8005f60:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	689a      	ldr	r2, [r3, #8]
 8005f66:	2380      	movs	r3, #128	; 0x80
 8005f68:	015b      	lsls	r3, r3, #5
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d108      	bne.n	8005f80 <HAL_UART_Transmit+0x94>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d104      	bne.n	8005f80 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8005f76:	2300      	movs	r3, #0
 8005f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	61bb      	str	r3, [r7, #24]
 8005f7e:	e003      	b.n	8005f88 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f84:	2300      	movs	r3, #0
 8005f86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f88:	e030      	b.n	8005fec <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	0013      	movs	r3, r2
 8005f94:	2200      	movs	r2, #0
 8005f96:	2180      	movs	r1, #128	; 0x80
 8005f98:	f000 fae4 	bl	8006564 <UART_WaitOnFlagUntilTimeout>
 8005f9c:	1e03      	subs	r3, r0, #0
 8005f9e:	d004      	beq.n	8005faa <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e03c      	b.n	8006024 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d10b      	bne.n	8005fc8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	881a      	ldrh	r2, [r3, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	05d2      	lsls	r2, r2, #23
 8005fba:	0dd2      	lsrs	r2, r2, #23
 8005fbc:	b292      	uxth	r2, r2
 8005fbe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	3302      	adds	r3, #2
 8005fc4:	61bb      	str	r3, [r7, #24]
 8005fc6:	e008      	b.n	8005fda <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	781a      	ldrb	r2, [r3, #0]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	b292      	uxth	r2, r2
 8005fd2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2252      	movs	r2, #82	; 0x52
 8005fde:	5a9b      	ldrh	r3, [r3, r2]
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	b299      	uxth	r1, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2252      	movs	r2, #82	; 0x52
 8005fea:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2252      	movs	r2, #82	; 0x52
 8005ff0:	5a9b      	ldrh	r3, [r3, r2]
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1c8      	bne.n	8005f8a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	0013      	movs	r3, r2
 8006002:	2200      	movs	r2, #0
 8006004:	2140      	movs	r1, #64	; 0x40
 8006006:	f000 faad 	bl	8006564 <UART_WaitOnFlagUntilTimeout>
 800600a:	1e03      	subs	r3, r0, #0
 800600c:	d004      	beq.n	8006018 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2220      	movs	r2, #32
 8006012:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e005      	b.n	8006024 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2220      	movs	r2, #32
 800601c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800601e:	2300      	movs	r3, #0
 8006020:	e000      	b.n	8006024 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8006022:	2302      	movs	r3, #2
  }
}
 8006024:	0018      	movs	r0, r3
 8006026:	46bd      	mov	sp, r7
 8006028:	b008      	add	sp, #32
 800602a:	bd80      	pop	{r7, pc}

0800602c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b088      	sub	sp, #32
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006034:	231e      	movs	r3, #30
 8006036:	18fb      	adds	r3, r7, r3
 8006038:	2200      	movs	r2, #0
 800603a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	689a      	ldr	r2, [r3, #8]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	431a      	orrs	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	431a      	orrs	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	69db      	ldr	r3, [r3, #28]
 8006050:	4313      	orrs	r3, r2
 8006052:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a8d      	ldr	r2, [pc, #564]	; (8006290 <UART_SetConfig+0x264>)
 800605c:	4013      	ands	r3, r2
 800605e:	0019      	movs	r1, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	430a      	orrs	r2, r1
 8006068:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	4a88      	ldr	r2, [pc, #544]	; (8006294 <UART_SetConfig+0x268>)
 8006072:	4013      	ands	r3, r2
 8006074:	0019      	movs	r1, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	68da      	ldr	r2, [r3, #12]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	430a      	orrs	r2, r1
 8006080:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	4313      	orrs	r3, r2
 8006090:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	4a7f      	ldr	r2, [pc, #508]	; (8006298 <UART_SetConfig+0x26c>)
 800609a:	4013      	ands	r3, r2
 800609c:	0019      	movs	r1, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	430a      	orrs	r2, r1
 80060a6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a7b      	ldr	r2, [pc, #492]	; (800629c <UART_SetConfig+0x270>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d127      	bne.n	8006102 <UART_SetConfig+0xd6>
 80060b2:	4b7b      	ldr	r3, [pc, #492]	; (80062a0 <UART_SetConfig+0x274>)
 80060b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b6:	2203      	movs	r2, #3
 80060b8:	4013      	ands	r3, r2
 80060ba:	2b03      	cmp	r3, #3
 80060bc:	d00d      	beq.n	80060da <UART_SetConfig+0xae>
 80060be:	d81b      	bhi.n	80060f8 <UART_SetConfig+0xcc>
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d014      	beq.n	80060ee <UART_SetConfig+0xc2>
 80060c4:	d818      	bhi.n	80060f8 <UART_SetConfig+0xcc>
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d002      	beq.n	80060d0 <UART_SetConfig+0xa4>
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d00a      	beq.n	80060e4 <UART_SetConfig+0xb8>
 80060ce:	e013      	b.n	80060f8 <UART_SetConfig+0xcc>
 80060d0:	231f      	movs	r3, #31
 80060d2:	18fb      	adds	r3, r7, r3
 80060d4:	2200      	movs	r2, #0
 80060d6:	701a      	strb	r2, [r3, #0]
 80060d8:	e021      	b.n	800611e <UART_SetConfig+0xf2>
 80060da:	231f      	movs	r3, #31
 80060dc:	18fb      	adds	r3, r7, r3
 80060de:	2202      	movs	r2, #2
 80060e0:	701a      	strb	r2, [r3, #0]
 80060e2:	e01c      	b.n	800611e <UART_SetConfig+0xf2>
 80060e4:	231f      	movs	r3, #31
 80060e6:	18fb      	adds	r3, r7, r3
 80060e8:	2204      	movs	r2, #4
 80060ea:	701a      	strb	r2, [r3, #0]
 80060ec:	e017      	b.n	800611e <UART_SetConfig+0xf2>
 80060ee:	231f      	movs	r3, #31
 80060f0:	18fb      	adds	r3, r7, r3
 80060f2:	2208      	movs	r2, #8
 80060f4:	701a      	strb	r2, [r3, #0]
 80060f6:	e012      	b.n	800611e <UART_SetConfig+0xf2>
 80060f8:	231f      	movs	r3, #31
 80060fa:	18fb      	adds	r3, r7, r3
 80060fc:	2210      	movs	r2, #16
 80060fe:	701a      	strb	r2, [r3, #0]
 8006100:	e00d      	b.n	800611e <UART_SetConfig+0xf2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a67      	ldr	r2, [pc, #412]	; (80062a4 <UART_SetConfig+0x278>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d104      	bne.n	8006116 <UART_SetConfig+0xea>
 800610c:	231f      	movs	r3, #31
 800610e:	18fb      	adds	r3, r7, r3
 8006110:	2200      	movs	r2, #0
 8006112:	701a      	strb	r2, [r3, #0]
 8006114:	e003      	b.n	800611e <UART_SetConfig+0xf2>
 8006116:	231f      	movs	r3, #31
 8006118:	18fb      	adds	r3, r7, r3
 800611a:	2210      	movs	r2, #16
 800611c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	69da      	ldr	r2, [r3, #28]
 8006122:	2380      	movs	r3, #128	; 0x80
 8006124:	021b      	lsls	r3, r3, #8
 8006126:	429a      	cmp	r2, r3
 8006128:	d15c      	bne.n	80061e4 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800612a:	231f      	movs	r3, #31
 800612c:	18fb      	adds	r3, r7, r3
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	2b08      	cmp	r3, #8
 8006132:	d015      	beq.n	8006160 <UART_SetConfig+0x134>
 8006134:	dc18      	bgt.n	8006168 <UART_SetConfig+0x13c>
 8006136:	2b04      	cmp	r3, #4
 8006138:	d00d      	beq.n	8006156 <UART_SetConfig+0x12a>
 800613a:	dc15      	bgt.n	8006168 <UART_SetConfig+0x13c>
 800613c:	2b00      	cmp	r3, #0
 800613e:	d002      	beq.n	8006146 <UART_SetConfig+0x11a>
 8006140:	2b02      	cmp	r3, #2
 8006142:	d005      	beq.n	8006150 <UART_SetConfig+0x124>
 8006144:	e010      	b.n	8006168 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006146:	f7fe fed9 	bl	8004efc <HAL_RCC_GetPCLK1Freq>
 800614a:	0003      	movs	r3, r0
 800614c:	61bb      	str	r3, [r7, #24]
        break;
 800614e:	e012      	b.n	8006176 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006150:	4b55      	ldr	r3, [pc, #340]	; (80062a8 <UART_SetConfig+0x27c>)
 8006152:	61bb      	str	r3, [r7, #24]
        break;
 8006154:	e00f      	b.n	8006176 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006156:	f7fe fe71 	bl	8004e3c <HAL_RCC_GetSysClockFreq>
 800615a:	0003      	movs	r3, r0
 800615c:	61bb      	str	r3, [r7, #24]
        break;
 800615e:	e00a      	b.n	8006176 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006160:	2380      	movs	r3, #128	; 0x80
 8006162:	021b      	lsls	r3, r3, #8
 8006164:	61bb      	str	r3, [r7, #24]
        break;
 8006166:	e006      	b.n	8006176 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8006168:	2300      	movs	r3, #0
 800616a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800616c:	231e      	movs	r3, #30
 800616e:	18fb      	adds	r3, r7, r3
 8006170:	2201      	movs	r2, #1
 8006172:	701a      	strb	r2, [r3, #0]
        break;
 8006174:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d100      	bne.n	800617e <UART_SetConfig+0x152>
 800617c:	e07a      	b.n	8006274 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	005a      	lsls	r2, r3, #1
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	085b      	lsrs	r3, r3, #1
 8006188:	18d2      	adds	r2, r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	0019      	movs	r1, r3
 8006190:	0010      	movs	r0, r2
 8006192:	f7f9 ffd5 	bl	8000140 <__udivsi3>
 8006196:	0003      	movs	r3, r0
 8006198:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	2b0f      	cmp	r3, #15
 800619e:	d91c      	bls.n	80061da <UART_SetConfig+0x1ae>
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	2380      	movs	r3, #128	; 0x80
 80061a4:	025b      	lsls	r3, r3, #9
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d217      	bcs.n	80061da <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	200e      	movs	r0, #14
 80061b0:	183b      	adds	r3, r7, r0
 80061b2:	210f      	movs	r1, #15
 80061b4:	438a      	bics	r2, r1
 80061b6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	085b      	lsrs	r3, r3, #1
 80061bc:	b29b      	uxth	r3, r3
 80061be:	2207      	movs	r2, #7
 80061c0:	4013      	ands	r3, r2
 80061c2:	b299      	uxth	r1, r3
 80061c4:	183b      	adds	r3, r7, r0
 80061c6:	183a      	adds	r2, r7, r0
 80061c8:	8812      	ldrh	r2, [r2, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	183a      	adds	r2, r7, r0
 80061d4:	8812      	ldrh	r2, [r2, #0]
 80061d6:	60da      	str	r2, [r3, #12]
 80061d8:	e04c      	b.n	8006274 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80061da:	231e      	movs	r3, #30
 80061dc:	18fb      	adds	r3, r7, r3
 80061de:	2201      	movs	r2, #1
 80061e0:	701a      	strb	r2, [r3, #0]
 80061e2:	e047      	b.n	8006274 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061e4:	231f      	movs	r3, #31
 80061e6:	18fb      	adds	r3, r7, r3
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	2b08      	cmp	r3, #8
 80061ec:	d015      	beq.n	800621a <UART_SetConfig+0x1ee>
 80061ee:	dc18      	bgt.n	8006222 <UART_SetConfig+0x1f6>
 80061f0:	2b04      	cmp	r3, #4
 80061f2:	d00d      	beq.n	8006210 <UART_SetConfig+0x1e4>
 80061f4:	dc15      	bgt.n	8006222 <UART_SetConfig+0x1f6>
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <UART_SetConfig+0x1d4>
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d005      	beq.n	800620a <UART_SetConfig+0x1de>
 80061fe:	e010      	b.n	8006222 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006200:	f7fe fe7c 	bl	8004efc <HAL_RCC_GetPCLK1Freq>
 8006204:	0003      	movs	r3, r0
 8006206:	61bb      	str	r3, [r7, #24]
        break;
 8006208:	e012      	b.n	8006230 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800620a:	4b27      	ldr	r3, [pc, #156]	; (80062a8 <UART_SetConfig+0x27c>)
 800620c:	61bb      	str	r3, [r7, #24]
        break;
 800620e:	e00f      	b.n	8006230 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006210:	f7fe fe14 	bl	8004e3c <HAL_RCC_GetSysClockFreq>
 8006214:	0003      	movs	r3, r0
 8006216:	61bb      	str	r3, [r7, #24]
        break;
 8006218:	e00a      	b.n	8006230 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800621a:	2380      	movs	r3, #128	; 0x80
 800621c:	021b      	lsls	r3, r3, #8
 800621e:	61bb      	str	r3, [r7, #24]
        break;
 8006220:	e006      	b.n	8006230 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006222:	2300      	movs	r3, #0
 8006224:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006226:	231e      	movs	r3, #30
 8006228:	18fb      	adds	r3, r7, r3
 800622a:	2201      	movs	r2, #1
 800622c:	701a      	strb	r2, [r3, #0]
        break;
 800622e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d01e      	beq.n	8006274 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	085a      	lsrs	r2, r3, #1
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	18d2      	adds	r2, r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	0019      	movs	r1, r3
 8006246:	0010      	movs	r0, r2
 8006248:	f7f9 ff7a 	bl	8000140 <__udivsi3>
 800624c:	0003      	movs	r3, r0
 800624e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	2b0f      	cmp	r3, #15
 8006254:	d90a      	bls.n	800626c <UART_SetConfig+0x240>
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	2380      	movs	r3, #128	; 0x80
 800625a:	025b      	lsls	r3, r3, #9
 800625c:	429a      	cmp	r2, r3
 800625e:	d205      	bcs.n	800626c <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	b29a      	uxth	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	60da      	str	r2, [r3, #12]
 800626a:	e003      	b.n	8006274 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800626c:	231e      	movs	r3, #30
 800626e:	18fb      	adds	r3, r7, r3
 8006270:	2201      	movs	r2, #1
 8006272:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006280:	231e      	movs	r3, #30
 8006282:	18fb      	adds	r3, r7, r3
 8006284:	781b      	ldrb	r3, [r3, #0]
}
 8006286:	0018      	movs	r0, r3
 8006288:	46bd      	mov	sp, r7
 800628a:	b008      	add	sp, #32
 800628c:	bd80      	pop	{r7, pc}
 800628e:	46c0      	nop			; (mov r8, r8)
 8006290:	ffff69f3 	.word	0xffff69f3
 8006294:	ffffcfff 	.word	0xffffcfff
 8006298:	fffff4ff 	.word	0xfffff4ff
 800629c:	40013800 	.word	0x40013800
 80062a0:	40021000 	.word	0x40021000
 80062a4:	40004400 	.word	0x40004400
 80062a8:	007a1200 	.word	0x007a1200

080062ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b8:	2201      	movs	r2, #1
 80062ba:	4013      	ands	r3, r2
 80062bc:	d00b      	beq.n	80062d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	4a4a      	ldr	r2, [pc, #296]	; (80063f0 <UART_AdvFeatureConfig+0x144>)
 80062c6:	4013      	ands	r3, r2
 80062c8:	0019      	movs	r1, r3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062da:	2202      	movs	r2, #2
 80062dc:	4013      	ands	r3, r2
 80062de:	d00b      	beq.n	80062f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	4a43      	ldr	r2, [pc, #268]	; (80063f4 <UART_AdvFeatureConfig+0x148>)
 80062e8:	4013      	ands	r3, r2
 80062ea:	0019      	movs	r1, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	430a      	orrs	r2, r1
 80062f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fc:	2204      	movs	r2, #4
 80062fe:	4013      	ands	r3, r2
 8006300:	d00b      	beq.n	800631a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	4a3b      	ldr	r2, [pc, #236]	; (80063f8 <UART_AdvFeatureConfig+0x14c>)
 800630a:	4013      	ands	r3, r2
 800630c:	0019      	movs	r1, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631e:	2208      	movs	r2, #8
 8006320:	4013      	ands	r3, r2
 8006322:	d00b      	beq.n	800633c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	4a34      	ldr	r2, [pc, #208]	; (80063fc <UART_AdvFeatureConfig+0x150>)
 800632c:	4013      	ands	r3, r2
 800632e:	0019      	movs	r1, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	430a      	orrs	r2, r1
 800633a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	2210      	movs	r2, #16
 8006342:	4013      	ands	r3, r2
 8006344:	d00b      	beq.n	800635e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	4a2c      	ldr	r2, [pc, #176]	; (8006400 <UART_AdvFeatureConfig+0x154>)
 800634e:	4013      	ands	r3, r2
 8006350:	0019      	movs	r1, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006362:	2220      	movs	r2, #32
 8006364:	4013      	ands	r3, r2
 8006366:	d00b      	beq.n	8006380 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	4a25      	ldr	r2, [pc, #148]	; (8006404 <UART_AdvFeatureConfig+0x158>)
 8006370:	4013      	ands	r3, r2
 8006372:	0019      	movs	r1, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	430a      	orrs	r2, r1
 800637e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006384:	2240      	movs	r2, #64	; 0x40
 8006386:	4013      	ands	r3, r2
 8006388:	d01d      	beq.n	80063c6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	4a1d      	ldr	r2, [pc, #116]	; (8006408 <UART_AdvFeatureConfig+0x15c>)
 8006392:	4013      	ands	r3, r2
 8006394:	0019      	movs	r1, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063a6:	2380      	movs	r3, #128	; 0x80
 80063a8:	035b      	lsls	r3, r3, #13
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d10b      	bne.n	80063c6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	4a15      	ldr	r2, [pc, #84]	; (800640c <UART_AdvFeatureConfig+0x160>)
 80063b6:	4013      	ands	r3, r2
 80063b8:	0019      	movs	r1, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	430a      	orrs	r2, r1
 80063c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ca:	2280      	movs	r2, #128	; 0x80
 80063cc:	4013      	ands	r3, r2
 80063ce:	d00b      	beq.n	80063e8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	4a0e      	ldr	r2, [pc, #56]	; (8006410 <UART_AdvFeatureConfig+0x164>)
 80063d8:	4013      	ands	r3, r2
 80063da:	0019      	movs	r1, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	430a      	orrs	r2, r1
 80063e6:	605a      	str	r2, [r3, #4]
  }
}
 80063e8:	46c0      	nop			; (mov r8, r8)
 80063ea:	46bd      	mov	sp, r7
 80063ec:	b002      	add	sp, #8
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	fffdffff 	.word	0xfffdffff
 80063f4:	fffeffff 	.word	0xfffeffff
 80063f8:	fffbffff 	.word	0xfffbffff
 80063fc:	ffff7fff 	.word	0xffff7fff
 8006400:	ffffefff 	.word	0xffffefff
 8006404:	ffffdfff 	.word	0xffffdfff
 8006408:	ffefffff 	.word	0xffefffff
 800640c:	ff9fffff 	.word	0xff9fffff
 8006410:	fff7ffff 	.word	0xfff7ffff

08006414 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b092      	sub	sp, #72	; 0x48
 8006418:	af02      	add	r7, sp, #8
 800641a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2284      	movs	r2, #132	; 0x84
 8006420:	2100      	movs	r1, #0
 8006422:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006424:	f7fc fe78 	bl	8003118 <HAL_GetTick>
 8006428:	0003      	movs	r3, r0
 800642a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2208      	movs	r2, #8
 8006434:	4013      	ands	r3, r2
 8006436:	2b08      	cmp	r3, #8
 8006438:	d12c      	bne.n	8006494 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800643a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800643c:	2280      	movs	r2, #128	; 0x80
 800643e:	0391      	lsls	r1, r2, #14
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	4a46      	ldr	r2, [pc, #280]	; (800655c <UART_CheckIdleState+0x148>)
 8006444:	9200      	str	r2, [sp, #0]
 8006446:	2200      	movs	r2, #0
 8006448:	f000 f88c 	bl	8006564 <UART_WaitOnFlagUntilTimeout>
 800644c:	1e03      	subs	r3, r0, #0
 800644e:	d021      	beq.n	8006494 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006450:	f3ef 8310 	mrs	r3, PRIMASK
 8006454:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006458:	63bb      	str	r3, [r7, #56]	; 0x38
 800645a:	2301      	movs	r3, #1
 800645c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800645e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006460:	f383 8810 	msr	PRIMASK, r3
}
 8006464:	46c0      	nop			; (mov r8, r8)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2180      	movs	r1, #128	; 0x80
 8006472:	438a      	bics	r2, r1
 8006474:	601a      	str	r2, [r3, #0]
 8006476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006478:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800647a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647c:	f383 8810 	msr	PRIMASK, r3
}
 8006480:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2220      	movs	r2, #32
 8006486:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2278      	movs	r2, #120	; 0x78
 800648c:	2100      	movs	r1, #0
 800648e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e05f      	b.n	8006554 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2204      	movs	r2, #4
 800649c:	4013      	ands	r3, r2
 800649e:	2b04      	cmp	r3, #4
 80064a0:	d146      	bne.n	8006530 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064a4:	2280      	movs	r2, #128	; 0x80
 80064a6:	03d1      	lsls	r1, r2, #15
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	4a2c      	ldr	r2, [pc, #176]	; (800655c <UART_CheckIdleState+0x148>)
 80064ac:	9200      	str	r2, [sp, #0]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f000 f858 	bl	8006564 <UART_WaitOnFlagUntilTimeout>
 80064b4:	1e03      	subs	r3, r0, #0
 80064b6:	d03b      	beq.n	8006530 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064b8:	f3ef 8310 	mrs	r3, PRIMASK
 80064bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80064be:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064c0:	637b      	str	r3, [r7, #52]	; 0x34
 80064c2:	2301      	movs	r3, #1
 80064c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	f383 8810 	msr	PRIMASK, r3
}
 80064cc:	46c0      	nop			; (mov r8, r8)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4921      	ldr	r1, [pc, #132]	; (8006560 <UART_CheckIdleState+0x14c>)
 80064da:	400a      	ands	r2, r1
 80064dc:	601a      	str	r2, [r3, #0]
 80064de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	f383 8810 	msr	PRIMASK, r3
}
 80064e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064ea:	f3ef 8310 	mrs	r3, PRIMASK
 80064ee:	61bb      	str	r3, [r7, #24]
  return(result);
 80064f0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064f2:	633b      	str	r3, [r7, #48]	; 0x30
 80064f4:	2301      	movs	r3, #1
 80064f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	f383 8810 	msr	PRIMASK, r3
}
 80064fe:	46c0      	nop			; (mov r8, r8)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689a      	ldr	r2, [r3, #8]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2101      	movs	r1, #1
 800650c:	438a      	bics	r2, r1
 800650e:	609a      	str	r2, [r3, #8]
 8006510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006512:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006514:	6a3b      	ldr	r3, [r7, #32]
 8006516:	f383 8810 	msr	PRIMASK, r3
}
 800651a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2280      	movs	r2, #128	; 0x80
 8006520:	2120      	movs	r1, #32
 8006522:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2278      	movs	r2, #120	; 0x78
 8006528:	2100      	movs	r1, #0
 800652a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e011      	b.n	8006554 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2220      	movs	r2, #32
 8006534:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2280      	movs	r2, #128	; 0x80
 800653a:	2120      	movs	r1, #32
 800653c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2278      	movs	r2, #120	; 0x78
 800654e:	2100      	movs	r1, #0
 8006550:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	0018      	movs	r0, r3
 8006556:	46bd      	mov	sp, r7
 8006558:	b010      	add	sp, #64	; 0x40
 800655a:	bd80      	pop	{r7, pc}
 800655c:	01ffffff 	.word	0x01ffffff
 8006560:	fffffedf 	.word	0xfffffedf

08006564 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	603b      	str	r3, [r7, #0]
 8006570:	1dfb      	adds	r3, r7, #7
 8006572:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006574:	e04b      	b.n	800660e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	3301      	adds	r3, #1
 800657a:	d048      	beq.n	800660e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800657c:	f7fc fdcc 	bl	8003118 <HAL_GetTick>
 8006580:	0002      	movs	r2, r0
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	69ba      	ldr	r2, [r7, #24]
 8006588:	429a      	cmp	r2, r3
 800658a:	d302      	bcc.n	8006592 <UART_WaitOnFlagUntilTimeout+0x2e>
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e04b      	b.n	800662e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2204      	movs	r2, #4
 800659e:	4013      	ands	r3, r2
 80065a0:	d035      	beq.n	800660e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	69db      	ldr	r3, [r3, #28]
 80065a8:	2208      	movs	r2, #8
 80065aa:	4013      	ands	r3, r2
 80065ac:	2b08      	cmp	r3, #8
 80065ae:	d111      	bne.n	80065d4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2208      	movs	r2, #8
 80065b6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	0018      	movs	r0, r3
 80065bc:	f000 f83c 	bl	8006638 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2284      	movs	r2, #132	; 0x84
 80065c4:	2108      	movs	r1, #8
 80065c6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2278      	movs	r2, #120	; 0x78
 80065cc:	2100      	movs	r1, #0
 80065ce:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e02c      	b.n	800662e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	69da      	ldr	r2, [r3, #28]
 80065da:	2380      	movs	r3, #128	; 0x80
 80065dc:	011b      	lsls	r3, r3, #4
 80065de:	401a      	ands	r2, r3
 80065e0:	2380      	movs	r3, #128	; 0x80
 80065e2:	011b      	lsls	r3, r3, #4
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d112      	bne.n	800660e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2280      	movs	r2, #128	; 0x80
 80065ee:	0112      	lsls	r2, r2, #4
 80065f0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	0018      	movs	r0, r3
 80065f6:	f000 f81f 	bl	8006638 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2284      	movs	r2, #132	; 0x84
 80065fe:	2120      	movs	r1, #32
 8006600:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2278      	movs	r2, #120	; 0x78
 8006606:	2100      	movs	r1, #0
 8006608:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e00f      	b.n	800662e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	4013      	ands	r3, r2
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	425a      	negs	r2, r3
 800661e:	4153      	adcs	r3, r2
 8006620:	b2db      	uxtb	r3, r3
 8006622:	001a      	movs	r2, r3
 8006624:	1dfb      	adds	r3, r7, #7
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	429a      	cmp	r2, r3
 800662a:	d0a4      	beq.n	8006576 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	0018      	movs	r0, r3
 8006630:	46bd      	mov	sp, r7
 8006632:	b004      	add	sp, #16
 8006634:	bd80      	pop	{r7, pc}
	...

08006638 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b08e      	sub	sp, #56	; 0x38
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006640:	f3ef 8310 	mrs	r3, PRIMASK
 8006644:	617b      	str	r3, [r7, #20]
  return(result);
 8006646:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006648:	637b      	str	r3, [r7, #52]	; 0x34
 800664a:	2301      	movs	r3, #1
 800664c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	f383 8810 	msr	PRIMASK, r3
}
 8006654:	46c0      	nop			; (mov r8, r8)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4926      	ldr	r1, [pc, #152]	; (80066fc <UART_EndRxTransfer+0xc4>)
 8006662:	400a      	ands	r2, r1
 8006664:	601a      	str	r2, [r3, #0]
 8006666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006668:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	f383 8810 	msr	PRIMASK, r3
}
 8006670:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006672:	f3ef 8310 	mrs	r3, PRIMASK
 8006676:	623b      	str	r3, [r7, #32]
  return(result);
 8006678:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800667a:	633b      	str	r3, [r7, #48]	; 0x30
 800667c:	2301      	movs	r3, #1
 800667e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006682:	f383 8810 	msr	PRIMASK, r3
}
 8006686:	46c0      	nop			; (mov r8, r8)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689a      	ldr	r2, [r3, #8]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2101      	movs	r1, #1
 8006694:	438a      	bics	r2, r1
 8006696:	609a      	str	r2, [r3, #8]
 8006698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800669c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669e:	f383 8810 	msr	PRIMASK, r3
}
 80066a2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d118      	bne.n	80066de <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066ac:	f3ef 8310 	mrs	r3, PRIMASK
 80066b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80066b2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066b6:	2301      	movs	r3, #1
 80066b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f383 8810 	msr	PRIMASK, r3
}
 80066c0:	46c0      	nop			; (mov r8, r8)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2110      	movs	r1, #16
 80066ce:	438a      	bics	r2, r1
 80066d0:	601a      	str	r2, [r3, #0]
 80066d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	f383 8810 	msr	PRIMASK, r3
}
 80066dc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2280      	movs	r2, #128	; 0x80
 80066e2:	2120      	movs	r1, #32
 80066e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80066f2:	46c0      	nop			; (mov r8, r8)
 80066f4:	46bd      	mov	sp, r7
 80066f6:	b00e      	add	sp, #56	; 0x38
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	46c0      	nop			; (mov r8, r8)
 80066fc:	fffffedf 	.word	0xfffffedf

08006700 <__cvt>:
 8006700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006702:	001e      	movs	r6, r3
 8006704:	2300      	movs	r3, #0
 8006706:	0014      	movs	r4, r2
 8006708:	b08b      	sub	sp, #44	; 0x2c
 800670a:	429e      	cmp	r6, r3
 800670c:	da04      	bge.n	8006718 <__cvt+0x18>
 800670e:	2180      	movs	r1, #128	; 0x80
 8006710:	0609      	lsls	r1, r1, #24
 8006712:	1873      	adds	r3, r6, r1
 8006714:	001e      	movs	r6, r3
 8006716:	232d      	movs	r3, #45	; 0x2d
 8006718:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800671a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800671c:	7013      	strb	r3, [r2, #0]
 800671e:	2320      	movs	r3, #32
 8006720:	2203      	movs	r2, #3
 8006722:	439f      	bics	r7, r3
 8006724:	2f46      	cmp	r7, #70	; 0x46
 8006726:	d007      	beq.n	8006738 <__cvt+0x38>
 8006728:	003b      	movs	r3, r7
 800672a:	3b45      	subs	r3, #69	; 0x45
 800672c:	4259      	negs	r1, r3
 800672e:	414b      	adcs	r3, r1
 8006730:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006732:	3a01      	subs	r2, #1
 8006734:	18cb      	adds	r3, r1, r3
 8006736:	9310      	str	r3, [sp, #64]	; 0x40
 8006738:	ab09      	add	r3, sp, #36	; 0x24
 800673a:	9304      	str	r3, [sp, #16]
 800673c:	ab08      	add	r3, sp, #32
 800673e:	9303      	str	r3, [sp, #12]
 8006740:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006742:	9200      	str	r2, [sp, #0]
 8006744:	9302      	str	r3, [sp, #8]
 8006746:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006748:	0022      	movs	r2, r4
 800674a:	9301      	str	r3, [sp, #4]
 800674c:	0033      	movs	r3, r6
 800674e:	f000 fe73 	bl	8007438 <_dtoa_r>
 8006752:	0005      	movs	r5, r0
 8006754:	2f47      	cmp	r7, #71	; 0x47
 8006756:	d102      	bne.n	800675e <__cvt+0x5e>
 8006758:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800675a:	07db      	lsls	r3, r3, #31
 800675c:	d528      	bpl.n	80067b0 <__cvt+0xb0>
 800675e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006760:	18eb      	adds	r3, r5, r3
 8006762:	9307      	str	r3, [sp, #28]
 8006764:	2f46      	cmp	r7, #70	; 0x46
 8006766:	d114      	bne.n	8006792 <__cvt+0x92>
 8006768:	782b      	ldrb	r3, [r5, #0]
 800676a:	2b30      	cmp	r3, #48	; 0x30
 800676c:	d10c      	bne.n	8006788 <__cvt+0x88>
 800676e:	2200      	movs	r2, #0
 8006770:	2300      	movs	r3, #0
 8006772:	0020      	movs	r0, r4
 8006774:	0031      	movs	r1, r6
 8006776:	f7f9 fe69 	bl	800044c <__aeabi_dcmpeq>
 800677a:	2800      	cmp	r0, #0
 800677c:	d104      	bne.n	8006788 <__cvt+0x88>
 800677e:	2301      	movs	r3, #1
 8006780:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006782:	1a9b      	subs	r3, r3, r2
 8006784:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006786:	6013      	str	r3, [r2, #0]
 8006788:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800678a:	9a07      	ldr	r2, [sp, #28]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	18d3      	adds	r3, r2, r3
 8006790:	9307      	str	r3, [sp, #28]
 8006792:	2200      	movs	r2, #0
 8006794:	2300      	movs	r3, #0
 8006796:	0020      	movs	r0, r4
 8006798:	0031      	movs	r1, r6
 800679a:	f7f9 fe57 	bl	800044c <__aeabi_dcmpeq>
 800679e:	2800      	cmp	r0, #0
 80067a0:	d001      	beq.n	80067a6 <__cvt+0xa6>
 80067a2:	9b07      	ldr	r3, [sp, #28]
 80067a4:	9309      	str	r3, [sp, #36]	; 0x24
 80067a6:	2230      	movs	r2, #48	; 0x30
 80067a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067aa:	9907      	ldr	r1, [sp, #28]
 80067ac:	428b      	cmp	r3, r1
 80067ae:	d306      	bcc.n	80067be <__cvt+0xbe>
 80067b0:	0028      	movs	r0, r5
 80067b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067b4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80067b6:	1b5b      	subs	r3, r3, r5
 80067b8:	6013      	str	r3, [r2, #0]
 80067ba:	b00b      	add	sp, #44	; 0x2c
 80067bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067be:	1c59      	adds	r1, r3, #1
 80067c0:	9109      	str	r1, [sp, #36]	; 0x24
 80067c2:	701a      	strb	r2, [r3, #0]
 80067c4:	e7f0      	b.n	80067a8 <__cvt+0xa8>

080067c6 <__exponent>:
 80067c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067c8:	1c83      	adds	r3, r0, #2
 80067ca:	b087      	sub	sp, #28
 80067cc:	9303      	str	r3, [sp, #12]
 80067ce:	0005      	movs	r5, r0
 80067d0:	000c      	movs	r4, r1
 80067d2:	232b      	movs	r3, #43	; 0x2b
 80067d4:	7002      	strb	r2, [r0, #0]
 80067d6:	2900      	cmp	r1, #0
 80067d8:	da01      	bge.n	80067de <__exponent+0x18>
 80067da:	424c      	negs	r4, r1
 80067dc:	3302      	adds	r3, #2
 80067de:	706b      	strb	r3, [r5, #1]
 80067e0:	2c09      	cmp	r4, #9
 80067e2:	dd2f      	ble.n	8006844 <__exponent+0x7e>
 80067e4:	270a      	movs	r7, #10
 80067e6:	ab04      	add	r3, sp, #16
 80067e8:	1dde      	adds	r6, r3, #7
 80067ea:	0020      	movs	r0, r4
 80067ec:	0039      	movs	r1, r7
 80067ee:	9601      	str	r6, [sp, #4]
 80067f0:	f7f9 fe16 	bl	8000420 <__aeabi_idivmod>
 80067f4:	3e01      	subs	r6, #1
 80067f6:	3130      	adds	r1, #48	; 0x30
 80067f8:	0020      	movs	r0, r4
 80067fa:	7031      	strb	r1, [r6, #0]
 80067fc:	0039      	movs	r1, r7
 80067fe:	9402      	str	r4, [sp, #8]
 8006800:	f7f9 fd28 	bl	8000254 <__divsi3>
 8006804:	9b02      	ldr	r3, [sp, #8]
 8006806:	0004      	movs	r4, r0
 8006808:	2b63      	cmp	r3, #99	; 0x63
 800680a:	dcee      	bgt.n	80067ea <__exponent+0x24>
 800680c:	9b01      	ldr	r3, [sp, #4]
 800680e:	3430      	adds	r4, #48	; 0x30
 8006810:	1e9a      	subs	r2, r3, #2
 8006812:	0013      	movs	r3, r2
 8006814:	9903      	ldr	r1, [sp, #12]
 8006816:	7014      	strb	r4, [r2, #0]
 8006818:	a804      	add	r0, sp, #16
 800681a:	3007      	adds	r0, #7
 800681c:	4298      	cmp	r0, r3
 800681e:	d80c      	bhi.n	800683a <__exponent+0x74>
 8006820:	2300      	movs	r3, #0
 8006822:	4282      	cmp	r2, r0
 8006824:	d804      	bhi.n	8006830 <__exponent+0x6a>
 8006826:	aa04      	add	r2, sp, #16
 8006828:	3309      	adds	r3, #9
 800682a:	189b      	adds	r3, r3, r2
 800682c:	9a01      	ldr	r2, [sp, #4]
 800682e:	1a9b      	subs	r3, r3, r2
 8006830:	9a03      	ldr	r2, [sp, #12]
 8006832:	18d3      	adds	r3, r2, r3
 8006834:	1b58      	subs	r0, r3, r5
 8006836:	b007      	add	sp, #28
 8006838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800683a:	7818      	ldrb	r0, [r3, #0]
 800683c:	3301      	adds	r3, #1
 800683e:	7008      	strb	r0, [r1, #0]
 8006840:	3101      	adds	r1, #1
 8006842:	e7e9      	b.n	8006818 <__exponent+0x52>
 8006844:	2330      	movs	r3, #48	; 0x30
 8006846:	3430      	adds	r4, #48	; 0x30
 8006848:	70ab      	strb	r3, [r5, #2]
 800684a:	70ec      	strb	r4, [r5, #3]
 800684c:	1d2b      	adds	r3, r5, #4
 800684e:	e7f1      	b.n	8006834 <__exponent+0x6e>

08006850 <_printf_float>:
 8006850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006852:	b095      	sub	sp, #84	; 0x54
 8006854:	000c      	movs	r4, r1
 8006856:	9208      	str	r2, [sp, #32]
 8006858:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800685a:	9309      	str	r3, [sp, #36]	; 0x24
 800685c:	0007      	movs	r7, r0
 800685e:	f000 fcd3 	bl	8007208 <_localeconv_r>
 8006862:	6803      	ldr	r3, [r0, #0]
 8006864:	0018      	movs	r0, r3
 8006866:	930c      	str	r3, [sp, #48]	; 0x30
 8006868:	f7f9 fc4e 	bl	8000108 <strlen>
 800686c:	2300      	movs	r3, #0
 800686e:	9312      	str	r3, [sp, #72]	; 0x48
 8006870:	7e23      	ldrb	r3, [r4, #24]
 8006872:	2207      	movs	r2, #7
 8006874:	930a      	str	r3, [sp, #40]	; 0x28
 8006876:	6823      	ldr	r3, [r4, #0]
 8006878:	900d      	str	r0, [sp, #52]	; 0x34
 800687a:	930b      	str	r3, [sp, #44]	; 0x2c
 800687c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800687e:	682b      	ldr	r3, [r5, #0]
 8006880:	05c9      	lsls	r1, r1, #23
 8006882:	d547      	bpl.n	8006914 <_printf_float+0xc4>
 8006884:	189b      	adds	r3, r3, r2
 8006886:	4393      	bics	r3, r2
 8006888:	001a      	movs	r2, r3
 800688a:	3208      	adds	r2, #8
 800688c:	602a      	str	r2, [r5, #0]
 800688e:	681e      	ldr	r6, [r3, #0]
 8006890:	685d      	ldr	r5, [r3, #4]
 8006892:	0032      	movs	r2, r6
 8006894:	002b      	movs	r3, r5
 8006896:	64a2      	str	r2, [r4, #72]	; 0x48
 8006898:	64e3      	str	r3, [r4, #76]	; 0x4c
 800689a:	2201      	movs	r2, #1
 800689c:	006b      	lsls	r3, r5, #1
 800689e:	085b      	lsrs	r3, r3, #1
 80068a0:	930e      	str	r3, [sp, #56]	; 0x38
 80068a2:	0030      	movs	r0, r6
 80068a4:	4bab      	ldr	r3, [pc, #684]	; (8006b54 <_printf_float+0x304>)
 80068a6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80068a8:	4252      	negs	r2, r2
 80068aa:	f7fb fb9b 	bl	8001fe4 <__aeabi_dcmpun>
 80068ae:	2800      	cmp	r0, #0
 80068b0:	d132      	bne.n	8006918 <_printf_float+0xc8>
 80068b2:	2201      	movs	r2, #1
 80068b4:	0030      	movs	r0, r6
 80068b6:	4ba7      	ldr	r3, [pc, #668]	; (8006b54 <_printf_float+0x304>)
 80068b8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80068ba:	4252      	negs	r2, r2
 80068bc:	f7f9 fdd6 	bl	800046c <__aeabi_dcmple>
 80068c0:	2800      	cmp	r0, #0
 80068c2:	d129      	bne.n	8006918 <_printf_float+0xc8>
 80068c4:	2200      	movs	r2, #0
 80068c6:	2300      	movs	r3, #0
 80068c8:	0030      	movs	r0, r6
 80068ca:	0029      	movs	r1, r5
 80068cc:	f7f9 fdc4 	bl	8000458 <__aeabi_dcmplt>
 80068d0:	2800      	cmp	r0, #0
 80068d2:	d003      	beq.n	80068dc <_printf_float+0x8c>
 80068d4:	0023      	movs	r3, r4
 80068d6:	222d      	movs	r2, #45	; 0x2d
 80068d8:	3343      	adds	r3, #67	; 0x43
 80068da:	701a      	strb	r2, [r3, #0]
 80068dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068de:	4d9e      	ldr	r5, [pc, #632]	; (8006b58 <_printf_float+0x308>)
 80068e0:	2b47      	cmp	r3, #71	; 0x47
 80068e2:	d900      	bls.n	80068e6 <_printf_float+0x96>
 80068e4:	4d9d      	ldr	r5, [pc, #628]	; (8006b5c <_printf_float+0x30c>)
 80068e6:	2303      	movs	r3, #3
 80068e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80068ea:	6123      	str	r3, [r4, #16]
 80068ec:	3301      	adds	r3, #1
 80068ee:	439a      	bics	r2, r3
 80068f0:	2300      	movs	r3, #0
 80068f2:	6022      	str	r2, [r4, #0]
 80068f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80068f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068f8:	0021      	movs	r1, r4
 80068fa:	9300      	str	r3, [sp, #0]
 80068fc:	0038      	movs	r0, r7
 80068fe:	9b08      	ldr	r3, [sp, #32]
 8006900:	aa13      	add	r2, sp, #76	; 0x4c
 8006902:	f000 f9fb 	bl	8006cfc <_printf_common>
 8006906:	3001      	adds	r0, #1
 8006908:	d000      	beq.n	800690c <_printf_float+0xbc>
 800690a:	e0a3      	b.n	8006a54 <_printf_float+0x204>
 800690c:	2001      	movs	r0, #1
 800690e:	4240      	negs	r0, r0
 8006910:	b015      	add	sp, #84	; 0x54
 8006912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006914:	3307      	adds	r3, #7
 8006916:	e7b6      	b.n	8006886 <_printf_float+0x36>
 8006918:	0032      	movs	r2, r6
 800691a:	002b      	movs	r3, r5
 800691c:	0030      	movs	r0, r6
 800691e:	0029      	movs	r1, r5
 8006920:	f7fb fb60 	bl	8001fe4 <__aeabi_dcmpun>
 8006924:	2800      	cmp	r0, #0
 8006926:	d00b      	beq.n	8006940 <_printf_float+0xf0>
 8006928:	2d00      	cmp	r5, #0
 800692a:	da03      	bge.n	8006934 <_printf_float+0xe4>
 800692c:	0023      	movs	r3, r4
 800692e:	222d      	movs	r2, #45	; 0x2d
 8006930:	3343      	adds	r3, #67	; 0x43
 8006932:	701a      	strb	r2, [r3, #0]
 8006934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006936:	4d8a      	ldr	r5, [pc, #552]	; (8006b60 <_printf_float+0x310>)
 8006938:	2b47      	cmp	r3, #71	; 0x47
 800693a:	d9d4      	bls.n	80068e6 <_printf_float+0x96>
 800693c:	4d89      	ldr	r5, [pc, #548]	; (8006b64 <_printf_float+0x314>)
 800693e:	e7d2      	b.n	80068e6 <_printf_float+0x96>
 8006940:	2220      	movs	r2, #32
 8006942:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006944:	6863      	ldr	r3, [r4, #4]
 8006946:	4391      	bics	r1, r2
 8006948:	910e      	str	r1, [sp, #56]	; 0x38
 800694a:	1c5a      	adds	r2, r3, #1
 800694c:	d14a      	bne.n	80069e4 <_printf_float+0x194>
 800694e:	3307      	adds	r3, #7
 8006950:	6063      	str	r3, [r4, #4]
 8006952:	2380      	movs	r3, #128	; 0x80
 8006954:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006956:	00db      	lsls	r3, r3, #3
 8006958:	4313      	orrs	r3, r2
 800695a:	2200      	movs	r2, #0
 800695c:	9206      	str	r2, [sp, #24]
 800695e:	aa12      	add	r2, sp, #72	; 0x48
 8006960:	9205      	str	r2, [sp, #20]
 8006962:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006964:	6023      	str	r3, [r4, #0]
 8006966:	9204      	str	r2, [sp, #16]
 8006968:	aa11      	add	r2, sp, #68	; 0x44
 800696a:	9203      	str	r2, [sp, #12]
 800696c:	2223      	movs	r2, #35	; 0x23
 800696e:	a908      	add	r1, sp, #32
 8006970:	9301      	str	r3, [sp, #4]
 8006972:	6863      	ldr	r3, [r4, #4]
 8006974:	1852      	adds	r2, r2, r1
 8006976:	9202      	str	r2, [sp, #8]
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	0032      	movs	r2, r6
 800697c:	002b      	movs	r3, r5
 800697e:	0038      	movs	r0, r7
 8006980:	f7ff febe 	bl	8006700 <__cvt>
 8006984:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006986:	0005      	movs	r5, r0
 8006988:	2b47      	cmp	r3, #71	; 0x47
 800698a:	d109      	bne.n	80069a0 <_printf_float+0x150>
 800698c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800698e:	1cda      	adds	r2, r3, #3
 8006990:	db02      	blt.n	8006998 <_printf_float+0x148>
 8006992:	6862      	ldr	r2, [r4, #4]
 8006994:	4293      	cmp	r3, r2
 8006996:	dd49      	ble.n	8006a2c <_printf_float+0x1dc>
 8006998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800699a:	3b02      	subs	r3, #2
 800699c:	b2db      	uxtb	r3, r3
 800699e:	930a      	str	r3, [sp, #40]	; 0x28
 80069a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069a2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80069a4:	2b65      	cmp	r3, #101	; 0x65
 80069a6:	d824      	bhi.n	80069f2 <_printf_float+0x1a2>
 80069a8:	0020      	movs	r0, r4
 80069aa:	001a      	movs	r2, r3
 80069ac:	3901      	subs	r1, #1
 80069ae:	3050      	adds	r0, #80	; 0x50
 80069b0:	9111      	str	r1, [sp, #68]	; 0x44
 80069b2:	f7ff ff08 	bl	80067c6 <__exponent>
 80069b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80069b8:	900b      	str	r0, [sp, #44]	; 0x2c
 80069ba:	1813      	adds	r3, r2, r0
 80069bc:	6123      	str	r3, [r4, #16]
 80069be:	2a01      	cmp	r2, #1
 80069c0:	dc02      	bgt.n	80069c8 <_printf_float+0x178>
 80069c2:	6822      	ldr	r2, [r4, #0]
 80069c4:	07d2      	lsls	r2, r2, #31
 80069c6:	d501      	bpl.n	80069cc <_printf_float+0x17c>
 80069c8:	3301      	adds	r3, #1
 80069ca:	6123      	str	r3, [r4, #16]
 80069cc:	2323      	movs	r3, #35	; 0x23
 80069ce:	aa08      	add	r2, sp, #32
 80069d0:	189b      	adds	r3, r3, r2
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d100      	bne.n	80069da <_printf_float+0x18a>
 80069d8:	e78d      	b.n	80068f6 <_printf_float+0xa6>
 80069da:	0023      	movs	r3, r4
 80069dc:	222d      	movs	r2, #45	; 0x2d
 80069de:	3343      	adds	r3, #67	; 0x43
 80069e0:	701a      	strb	r2, [r3, #0]
 80069e2:	e788      	b.n	80068f6 <_printf_float+0xa6>
 80069e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069e6:	2a47      	cmp	r2, #71	; 0x47
 80069e8:	d1b3      	bne.n	8006952 <_printf_float+0x102>
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1b1      	bne.n	8006952 <_printf_float+0x102>
 80069ee:	3301      	adds	r3, #1
 80069f0:	e7ae      	b.n	8006950 <_printf_float+0x100>
 80069f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069f4:	2b66      	cmp	r3, #102	; 0x66
 80069f6:	d11b      	bne.n	8006a30 <_printf_float+0x1e0>
 80069f8:	6863      	ldr	r3, [r4, #4]
 80069fa:	2900      	cmp	r1, #0
 80069fc:	dd09      	ble.n	8006a12 <_printf_float+0x1c2>
 80069fe:	6121      	str	r1, [r4, #16]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d102      	bne.n	8006a0a <_printf_float+0x1ba>
 8006a04:	6822      	ldr	r2, [r4, #0]
 8006a06:	07d2      	lsls	r2, r2, #31
 8006a08:	d50b      	bpl.n	8006a22 <_printf_float+0x1d2>
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	185b      	adds	r3, r3, r1
 8006a0e:	6123      	str	r3, [r4, #16]
 8006a10:	e007      	b.n	8006a22 <_printf_float+0x1d2>
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d103      	bne.n	8006a1e <_printf_float+0x1ce>
 8006a16:	2201      	movs	r2, #1
 8006a18:	6821      	ldr	r1, [r4, #0]
 8006a1a:	4211      	tst	r1, r2
 8006a1c:	d000      	beq.n	8006a20 <_printf_float+0x1d0>
 8006a1e:	1c9a      	adds	r2, r3, #2
 8006a20:	6122      	str	r2, [r4, #16]
 8006a22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a24:	65a3      	str	r3, [r4, #88]	; 0x58
 8006a26:	2300      	movs	r3, #0
 8006a28:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a2a:	e7cf      	b.n	80069cc <_printf_float+0x17c>
 8006a2c:	2367      	movs	r3, #103	; 0x67
 8006a2e:	930a      	str	r3, [sp, #40]	; 0x28
 8006a30:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006a32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a34:	4299      	cmp	r1, r3
 8006a36:	db06      	blt.n	8006a46 <_printf_float+0x1f6>
 8006a38:	6823      	ldr	r3, [r4, #0]
 8006a3a:	6121      	str	r1, [r4, #16]
 8006a3c:	07db      	lsls	r3, r3, #31
 8006a3e:	d5f0      	bpl.n	8006a22 <_printf_float+0x1d2>
 8006a40:	3101      	adds	r1, #1
 8006a42:	6121      	str	r1, [r4, #16]
 8006a44:	e7ed      	b.n	8006a22 <_printf_float+0x1d2>
 8006a46:	2201      	movs	r2, #1
 8006a48:	2900      	cmp	r1, #0
 8006a4a:	dc01      	bgt.n	8006a50 <_printf_float+0x200>
 8006a4c:	1892      	adds	r2, r2, r2
 8006a4e:	1a52      	subs	r2, r2, r1
 8006a50:	189b      	adds	r3, r3, r2
 8006a52:	e7dc      	b.n	8006a0e <_printf_float+0x1be>
 8006a54:	6822      	ldr	r2, [r4, #0]
 8006a56:	0553      	lsls	r3, r2, #21
 8006a58:	d408      	bmi.n	8006a6c <_printf_float+0x21c>
 8006a5a:	6923      	ldr	r3, [r4, #16]
 8006a5c:	002a      	movs	r2, r5
 8006a5e:	0038      	movs	r0, r7
 8006a60:	9908      	ldr	r1, [sp, #32]
 8006a62:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006a64:	47a8      	blx	r5
 8006a66:	3001      	adds	r0, #1
 8006a68:	d12a      	bne.n	8006ac0 <_printf_float+0x270>
 8006a6a:	e74f      	b.n	800690c <_printf_float+0xbc>
 8006a6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a6e:	2b65      	cmp	r3, #101	; 0x65
 8006a70:	d800      	bhi.n	8006a74 <_printf_float+0x224>
 8006a72:	e0ec      	b.n	8006c4e <_printf_float+0x3fe>
 8006a74:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006a76:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006a78:	2200      	movs	r2, #0
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	f7f9 fce6 	bl	800044c <__aeabi_dcmpeq>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	d034      	beq.n	8006aee <_printf_float+0x29e>
 8006a84:	2301      	movs	r3, #1
 8006a86:	0038      	movs	r0, r7
 8006a88:	4a37      	ldr	r2, [pc, #220]	; (8006b68 <_printf_float+0x318>)
 8006a8a:	9908      	ldr	r1, [sp, #32]
 8006a8c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006a8e:	47a8      	blx	r5
 8006a90:	3001      	adds	r0, #1
 8006a92:	d100      	bne.n	8006a96 <_printf_float+0x246>
 8006a94:	e73a      	b.n	800690c <_printf_float+0xbc>
 8006a96:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006a98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	db02      	blt.n	8006aa4 <_printf_float+0x254>
 8006a9e:	6823      	ldr	r3, [r4, #0]
 8006aa0:	07db      	lsls	r3, r3, #31
 8006aa2:	d50d      	bpl.n	8006ac0 <_printf_float+0x270>
 8006aa4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006aa6:	0038      	movs	r0, r7
 8006aa8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006aaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006aac:	9908      	ldr	r1, [sp, #32]
 8006aae:	47a8      	blx	r5
 8006ab0:	2500      	movs	r5, #0
 8006ab2:	3001      	adds	r0, #1
 8006ab4:	d100      	bne.n	8006ab8 <_printf_float+0x268>
 8006ab6:	e729      	b.n	800690c <_printf_float+0xbc>
 8006ab8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006aba:	3b01      	subs	r3, #1
 8006abc:	42ab      	cmp	r3, r5
 8006abe:	dc0a      	bgt.n	8006ad6 <_printf_float+0x286>
 8006ac0:	6823      	ldr	r3, [r4, #0]
 8006ac2:	079b      	lsls	r3, r3, #30
 8006ac4:	d500      	bpl.n	8006ac8 <_printf_float+0x278>
 8006ac6:	e116      	b.n	8006cf6 <_printf_float+0x4a6>
 8006ac8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006aca:	68e0      	ldr	r0, [r4, #12]
 8006acc:	4298      	cmp	r0, r3
 8006ace:	db00      	blt.n	8006ad2 <_printf_float+0x282>
 8006ad0:	e71e      	b.n	8006910 <_printf_float+0xc0>
 8006ad2:	0018      	movs	r0, r3
 8006ad4:	e71c      	b.n	8006910 <_printf_float+0xc0>
 8006ad6:	0022      	movs	r2, r4
 8006ad8:	2301      	movs	r3, #1
 8006ada:	0038      	movs	r0, r7
 8006adc:	9908      	ldr	r1, [sp, #32]
 8006ade:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006ae0:	321a      	adds	r2, #26
 8006ae2:	47b0      	blx	r6
 8006ae4:	3001      	adds	r0, #1
 8006ae6:	d100      	bne.n	8006aea <_printf_float+0x29a>
 8006ae8:	e710      	b.n	800690c <_printf_float+0xbc>
 8006aea:	3501      	adds	r5, #1
 8006aec:	e7e4      	b.n	8006ab8 <_printf_float+0x268>
 8006aee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	dc3b      	bgt.n	8006b6c <_printf_float+0x31c>
 8006af4:	2301      	movs	r3, #1
 8006af6:	0038      	movs	r0, r7
 8006af8:	4a1b      	ldr	r2, [pc, #108]	; (8006b68 <_printf_float+0x318>)
 8006afa:	9908      	ldr	r1, [sp, #32]
 8006afc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006afe:	47b0      	blx	r6
 8006b00:	3001      	adds	r0, #1
 8006b02:	d100      	bne.n	8006b06 <_printf_float+0x2b6>
 8006b04:	e702      	b.n	800690c <_printf_float+0xbc>
 8006b06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b08:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	d102      	bne.n	8006b14 <_printf_float+0x2c4>
 8006b0e:	6823      	ldr	r3, [r4, #0]
 8006b10:	07db      	lsls	r3, r3, #31
 8006b12:	d5d5      	bpl.n	8006ac0 <_printf_float+0x270>
 8006b14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b16:	0038      	movs	r0, r7
 8006b18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b1a:	9908      	ldr	r1, [sp, #32]
 8006b1c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006b1e:	47b0      	blx	r6
 8006b20:	2300      	movs	r3, #0
 8006b22:	3001      	adds	r0, #1
 8006b24:	d100      	bne.n	8006b28 <_printf_float+0x2d8>
 8006b26:	e6f1      	b.n	800690c <_printf_float+0xbc>
 8006b28:	930a      	str	r3, [sp, #40]	; 0x28
 8006b2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b2e:	425b      	negs	r3, r3
 8006b30:	4293      	cmp	r3, r2
 8006b32:	dc01      	bgt.n	8006b38 <_printf_float+0x2e8>
 8006b34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b36:	e791      	b.n	8006a5c <_printf_float+0x20c>
 8006b38:	0022      	movs	r2, r4
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	0038      	movs	r0, r7
 8006b3e:	9908      	ldr	r1, [sp, #32]
 8006b40:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006b42:	321a      	adds	r2, #26
 8006b44:	47b0      	blx	r6
 8006b46:	3001      	adds	r0, #1
 8006b48:	d100      	bne.n	8006b4c <_printf_float+0x2fc>
 8006b4a:	e6df      	b.n	800690c <_printf_float+0xbc>
 8006b4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b4e:	3301      	adds	r3, #1
 8006b50:	e7ea      	b.n	8006b28 <_printf_float+0x2d8>
 8006b52:	46c0      	nop			; (mov r8, r8)
 8006b54:	7fefffff 	.word	0x7fefffff
 8006b58:	080092a4 	.word	0x080092a4
 8006b5c:	080092a8 	.word	0x080092a8
 8006b60:	080092ac 	.word	0x080092ac
 8006b64:	080092b0 	.word	0x080092b0
 8006b68:	080092b4 	.word	0x080092b4
 8006b6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b70:	920a      	str	r2, [sp, #40]	; 0x28
 8006b72:	429a      	cmp	r2, r3
 8006b74:	dd00      	ble.n	8006b78 <_printf_float+0x328>
 8006b76:	930a      	str	r3, [sp, #40]	; 0x28
 8006b78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	dc3d      	bgt.n	8006bfa <_printf_float+0x3aa>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	930e      	str	r3, [sp, #56]	; 0x38
 8006b82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b84:	43db      	mvns	r3, r3
 8006b86:	17db      	asrs	r3, r3, #31
 8006b88:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b92:	4013      	ands	r3, r2
 8006b94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	dc36      	bgt.n	8006c0c <_printf_float+0x3bc>
 8006b9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006ba0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	db40      	blt.n	8006c28 <_printf_float+0x3d8>
 8006ba6:	6823      	ldr	r3, [r4, #0]
 8006ba8:	07db      	lsls	r3, r3, #31
 8006baa:	d43d      	bmi.n	8006c28 <_printf_float+0x3d8>
 8006bac:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8006bae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006bb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bb2:	1af3      	subs	r3, r6, r3
 8006bb4:	1ab6      	subs	r6, r6, r2
 8006bb6:	429e      	cmp	r6, r3
 8006bb8:	dd00      	ble.n	8006bbc <_printf_float+0x36c>
 8006bba:	001e      	movs	r6, r3
 8006bbc:	2e00      	cmp	r6, #0
 8006bbe:	dc3c      	bgt.n	8006c3a <_printf_float+0x3ea>
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	930a      	str	r3, [sp, #40]	; 0x28
 8006bc4:	43f3      	mvns	r3, r6
 8006bc6:	17db      	asrs	r3, r3, #31
 8006bc8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006bcc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006bce:	1a9b      	subs	r3, r3, r2
 8006bd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006bd2:	4032      	ands	r2, r6
 8006bd4:	1a9b      	subs	r3, r3, r2
 8006bd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	dc00      	bgt.n	8006bde <_printf_float+0x38e>
 8006bdc:	e770      	b.n	8006ac0 <_printf_float+0x270>
 8006bde:	0022      	movs	r2, r4
 8006be0:	2301      	movs	r3, #1
 8006be2:	0038      	movs	r0, r7
 8006be4:	9908      	ldr	r1, [sp, #32]
 8006be6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006be8:	321a      	adds	r2, #26
 8006bea:	47a8      	blx	r5
 8006bec:	3001      	adds	r0, #1
 8006bee:	d100      	bne.n	8006bf2 <_printf_float+0x3a2>
 8006bf0:	e68c      	b.n	800690c <_printf_float+0xbc>
 8006bf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	930a      	str	r3, [sp, #40]	; 0x28
 8006bf8:	e7e7      	b.n	8006bca <_printf_float+0x37a>
 8006bfa:	002a      	movs	r2, r5
 8006bfc:	0038      	movs	r0, r7
 8006bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c00:	9908      	ldr	r1, [sp, #32]
 8006c02:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006c04:	47b0      	blx	r6
 8006c06:	3001      	adds	r0, #1
 8006c08:	d1b9      	bne.n	8006b7e <_printf_float+0x32e>
 8006c0a:	e67f      	b.n	800690c <_printf_float+0xbc>
 8006c0c:	0022      	movs	r2, r4
 8006c0e:	2301      	movs	r3, #1
 8006c10:	0038      	movs	r0, r7
 8006c12:	9908      	ldr	r1, [sp, #32]
 8006c14:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006c16:	321a      	adds	r2, #26
 8006c18:	47b0      	blx	r6
 8006c1a:	3001      	adds	r0, #1
 8006c1c:	d100      	bne.n	8006c20 <_printf_float+0x3d0>
 8006c1e:	e675      	b.n	800690c <_printf_float+0xbc>
 8006c20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c22:	3301      	adds	r3, #1
 8006c24:	930e      	str	r3, [sp, #56]	; 0x38
 8006c26:	e7b0      	b.n	8006b8a <_printf_float+0x33a>
 8006c28:	0038      	movs	r0, r7
 8006c2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c2e:	9908      	ldr	r1, [sp, #32]
 8006c30:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006c32:	47b0      	blx	r6
 8006c34:	3001      	adds	r0, #1
 8006c36:	d1b9      	bne.n	8006bac <_printf_float+0x35c>
 8006c38:	e668      	b.n	800690c <_printf_float+0xbc>
 8006c3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c3c:	0038      	movs	r0, r7
 8006c3e:	18ea      	adds	r2, r5, r3
 8006c40:	9908      	ldr	r1, [sp, #32]
 8006c42:	0033      	movs	r3, r6
 8006c44:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006c46:	47a8      	blx	r5
 8006c48:	3001      	adds	r0, #1
 8006c4a:	d1b9      	bne.n	8006bc0 <_printf_float+0x370>
 8006c4c:	e65e      	b.n	800690c <_printf_float+0xbc>
 8006c4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	dc02      	bgt.n	8006c5a <_printf_float+0x40a>
 8006c54:	2301      	movs	r3, #1
 8006c56:	421a      	tst	r2, r3
 8006c58:	d03a      	beq.n	8006cd0 <_printf_float+0x480>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	002a      	movs	r2, r5
 8006c5e:	0038      	movs	r0, r7
 8006c60:	9908      	ldr	r1, [sp, #32]
 8006c62:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006c64:	47b0      	blx	r6
 8006c66:	3001      	adds	r0, #1
 8006c68:	d100      	bne.n	8006c6c <_printf_float+0x41c>
 8006c6a:	e64f      	b.n	800690c <_printf_float+0xbc>
 8006c6c:	0038      	movs	r0, r7
 8006c6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c72:	9908      	ldr	r1, [sp, #32]
 8006c74:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006c76:	47b0      	blx	r6
 8006c78:	3001      	adds	r0, #1
 8006c7a:	d100      	bne.n	8006c7e <_printf_float+0x42e>
 8006c7c:	e646      	b.n	800690c <_printf_float+0xbc>
 8006c7e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006c80:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006c82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c84:	2200      	movs	r2, #0
 8006c86:	001e      	movs	r6, r3
 8006c88:	2300      	movs	r3, #0
 8006c8a:	f7f9 fbdf 	bl	800044c <__aeabi_dcmpeq>
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	d11c      	bne.n	8006ccc <_printf_float+0x47c>
 8006c92:	0033      	movs	r3, r6
 8006c94:	1c6a      	adds	r2, r5, #1
 8006c96:	3b01      	subs	r3, #1
 8006c98:	0038      	movs	r0, r7
 8006c9a:	9908      	ldr	r1, [sp, #32]
 8006c9c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006c9e:	47a8      	blx	r5
 8006ca0:	3001      	adds	r0, #1
 8006ca2:	d10f      	bne.n	8006cc4 <_printf_float+0x474>
 8006ca4:	e632      	b.n	800690c <_printf_float+0xbc>
 8006ca6:	0022      	movs	r2, r4
 8006ca8:	2301      	movs	r3, #1
 8006caa:	0038      	movs	r0, r7
 8006cac:	9908      	ldr	r1, [sp, #32]
 8006cae:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006cb0:	321a      	adds	r2, #26
 8006cb2:	47b0      	blx	r6
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	d100      	bne.n	8006cba <_printf_float+0x46a>
 8006cb8:	e628      	b.n	800690c <_printf_float+0xbc>
 8006cba:	3501      	adds	r5, #1
 8006cbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	42ab      	cmp	r3, r5
 8006cc2:	dcf0      	bgt.n	8006ca6 <_printf_float+0x456>
 8006cc4:	0022      	movs	r2, r4
 8006cc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cc8:	3250      	adds	r2, #80	; 0x50
 8006cca:	e6c8      	b.n	8006a5e <_printf_float+0x20e>
 8006ccc:	2500      	movs	r5, #0
 8006cce:	e7f5      	b.n	8006cbc <_printf_float+0x46c>
 8006cd0:	002a      	movs	r2, r5
 8006cd2:	e7e1      	b.n	8006c98 <_printf_float+0x448>
 8006cd4:	0022      	movs	r2, r4
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	0038      	movs	r0, r7
 8006cda:	9908      	ldr	r1, [sp, #32]
 8006cdc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006cde:	3219      	adds	r2, #25
 8006ce0:	47b0      	blx	r6
 8006ce2:	3001      	adds	r0, #1
 8006ce4:	d100      	bne.n	8006ce8 <_printf_float+0x498>
 8006ce6:	e611      	b.n	800690c <_printf_float+0xbc>
 8006ce8:	3501      	adds	r5, #1
 8006cea:	68e3      	ldr	r3, [r4, #12]
 8006cec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006cee:	1a9b      	subs	r3, r3, r2
 8006cf0:	42ab      	cmp	r3, r5
 8006cf2:	dcef      	bgt.n	8006cd4 <_printf_float+0x484>
 8006cf4:	e6e8      	b.n	8006ac8 <_printf_float+0x278>
 8006cf6:	2500      	movs	r5, #0
 8006cf8:	e7f7      	b.n	8006cea <_printf_float+0x49a>
 8006cfa:	46c0      	nop			; (mov r8, r8)

08006cfc <_printf_common>:
 8006cfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cfe:	0016      	movs	r6, r2
 8006d00:	9301      	str	r3, [sp, #4]
 8006d02:	688a      	ldr	r2, [r1, #8]
 8006d04:	690b      	ldr	r3, [r1, #16]
 8006d06:	000c      	movs	r4, r1
 8006d08:	9000      	str	r0, [sp, #0]
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	da00      	bge.n	8006d10 <_printf_common+0x14>
 8006d0e:	0013      	movs	r3, r2
 8006d10:	0022      	movs	r2, r4
 8006d12:	6033      	str	r3, [r6, #0]
 8006d14:	3243      	adds	r2, #67	; 0x43
 8006d16:	7812      	ldrb	r2, [r2, #0]
 8006d18:	2a00      	cmp	r2, #0
 8006d1a:	d001      	beq.n	8006d20 <_printf_common+0x24>
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	6033      	str	r3, [r6, #0]
 8006d20:	6823      	ldr	r3, [r4, #0]
 8006d22:	069b      	lsls	r3, r3, #26
 8006d24:	d502      	bpl.n	8006d2c <_printf_common+0x30>
 8006d26:	6833      	ldr	r3, [r6, #0]
 8006d28:	3302      	adds	r3, #2
 8006d2a:	6033      	str	r3, [r6, #0]
 8006d2c:	6822      	ldr	r2, [r4, #0]
 8006d2e:	2306      	movs	r3, #6
 8006d30:	0015      	movs	r5, r2
 8006d32:	401d      	ands	r5, r3
 8006d34:	421a      	tst	r2, r3
 8006d36:	d027      	beq.n	8006d88 <_printf_common+0x8c>
 8006d38:	0023      	movs	r3, r4
 8006d3a:	3343      	adds	r3, #67	; 0x43
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	1e5a      	subs	r2, r3, #1
 8006d40:	4193      	sbcs	r3, r2
 8006d42:	6822      	ldr	r2, [r4, #0]
 8006d44:	0692      	lsls	r2, r2, #26
 8006d46:	d430      	bmi.n	8006daa <_printf_common+0xae>
 8006d48:	0022      	movs	r2, r4
 8006d4a:	9901      	ldr	r1, [sp, #4]
 8006d4c:	9800      	ldr	r0, [sp, #0]
 8006d4e:	9d08      	ldr	r5, [sp, #32]
 8006d50:	3243      	adds	r2, #67	; 0x43
 8006d52:	47a8      	blx	r5
 8006d54:	3001      	adds	r0, #1
 8006d56:	d025      	beq.n	8006da4 <_printf_common+0xa8>
 8006d58:	2206      	movs	r2, #6
 8006d5a:	6823      	ldr	r3, [r4, #0]
 8006d5c:	2500      	movs	r5, #0
 8006d5e:	4013      	ands	r3, r2
 8006d60:	2b04      	cmp	r3, #4
 8006d62:	d105      	bne.n	8006d70 <_printf_common+0x74>
 8006d64:	6833      	ldr	r3, [r6, #0]
 8006d66:	68e5      	ldr	r5, [r4, #12]
 8006d68:	1aed      	subs	r5, r5, r3
 8006d6a:	43eb      	mvns	r3, r5
 8006d6c:	17db      	asrs	r3, r3, #31
 8006d6e:	401d      	ands	r5, r3
 8006d70:	68a3      	ldr	r3, [r4, #8]
 8006d72:	6922      	ldr	r2, [r4, #16]
 8006d74:	4293      	cmp	r3, r2
 8006d76:	dd01      	ble.n	8006d7c <_printf_common+0x80>
 8006d78:	1a9b      	subs	r3, r3, r2
 8006d7a:	18ed      	adds	r5, r5, r3
 8006d7c:	2600      	movs	r6, #0
 8006d7e:	42b5      	cmp	r5, r6
 8006d80:	d120      	bne.n	8006dc4 <_printf_common+0xc8>
 8006d82:	2000      	movs	r0, #0
 8006d84:	e010      	b.n	8006da8 <_printf_common+0xac>
 8006d86:	3501      	adds	r5, #1
 8006d88:	68e3      	ldr	r3, [r4, #12]
 8006d8a:	6832      	ldr	r2, [r6, #0]
 8006d8c:	1a9b      	subs	r3, r3, r2
 8006d8e:	42ab      	cmp	r3, r5
 8006d90:	ddd2      	ble.n	8006d38 <_printf_common+0x3c>
 8006d92:	0022      	movs	r2, r4
 8006d94:	2301      	movs	r3, #1
 8006d96:	9901      	ldr	r1, [sp, #4]
 8006d98:	9800      	ldr	r0, [sp, #0]
 8006d9a:	9f08      	ldr	r7, [sp, #32]
 8006d9c:	3219      	adds	r2, #25
 8006d9e:	47b8      	blx	r7
 8006da0:	3001      	adds	r0, #1
 8006da2:	d1f0      	bne.n	8006d86 <_printf_common+0x8a>
 8006da4:	2001      	movs	r0, #1
 8006da6:	4240      	negs	r0, r0
 8006da8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006daa:	2030      	movs	r0, #48	; 0x30
 8006dac:	18e1      	adds	r1, r4, r3
 8006dae:	3143      	adds	r1, #67	; 0x43
 8006db0:	7008      	strb	r0, [r1, #0]
 8006db2:	0021      	movs	r1, r4
 8006db4:	1c5a      	adds	r2, r3, #1
 8006db6:	3145      	adds	r1, #69	; 0x45
 8006db8:	7809      	ldrb	r1, [r1, #0]
 8006dba:	18a2      	adds	r2, r4, r2
 8006dbc:	3243      	adds	r2, #67	; 0x43
 8006dbe:	3302      	adds	r3, #2
 8006dc0:	7011      	strb	r1, [r2, #0]
 8006dc2:	e7c1      	b.n	8006d48 <_printf_common+0x4c>
 8006dc4:	0022      	movs	r2, r4
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	9901      	ldr	r1, [sp, #4]
 8006dca:	9800      	ldr	r0, [sp, #0]
 8006dcc:	9f08      	ldr	r7, [sp, #32]
 8006dce:	321a      	adds	r2, #26
 8006dd0:	47b8      	blx	r7
 8006dd2:	3001      	adds	r0, #1
 8006dd4:	d0e6      	beq.n	8006da4 <_printf_common+0xa8>
 8006dd6:	3601      	adds	r6, #1
 8006dd8:	e7d1      	b.n	8006d7e <_printf_common+0x82>
	...

08006ddc <_printf_i>:
 8006ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dde:	b08b      	sub	sp, #44	; 0x2c
 8006de0:	9206      	str	r2, [sp, #24]
 8006de2:	000a      	movs	r2, r1
 8006de4:	3243      	adds	r2, #67	; 0x43
 8006de6:	9307      	str	r3, [sp, #28]
 8006de8:	9005      	str	r0, [sp, #20]
 8006dea:	9204      	str	r2, [sp, #16]
 8006dec:	7e0a      	ldrb	r2, [r1, #24]
 8006dee:	000c      	movs	r4, r1
 8006df0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006df2:	2a78      	cmp	r2, #120	; 0x78
 8006df4:	d809      	bhi.n	8006e0a <_printf_i+0x2e>
 8006df6:	2a62      	cmp	r2, #98	; 0x62
 8006df8:	d80b      	bhi.n	8006e12 <_printf_i+0x36>
 8006dfa:	2a00      	cmp	r2, #0
 8006dfc:	d100      	bne.n	8006e00 <_printf_i+0x24>
 8006dfe:	e0be      	b.n	8006f7e <_printf_i+0x1a2>
 8006e00:	497c      	ldr	r1, [pc, #496]	; (8006ff4 <_printf_i+0x218>)
 8006e02:	9103      	str	r1, [sp, #12]
 8006e04:	2a58      	cmp	r2, #88	; 0x58
 8006e06:	d100      	bne.n	8006e0a <_printf_i+0x2e>
 8006e08:	e093      	b.n	8006f32 <_printf_i+0x156>
 8006e0a:	0026      	movs	r6, r4
 8006e0c:	3642      	adds	r6, #66	; 0x42
 8006e0e:	7032      	strb	r2, [r6, #0]
 8006e10:	e022      	b.n	8006e58 <_printf_i+0x7c>
 8006e12:	0010      	movs	r0, r2
 8006e14:	3863      	subs	r0, #99	; 0x63
 8006e16:	2815      	cmp	r0, #21
 8006e18:	d8f7      	bhi.n	8006e0a <_printf_i+0x2e>
 8006e1a:	f7f9 f987 	bl	800012c <__gnu_thumb1_case_shi>
 8006e1e:	0016      	.short	0x0016
 8006e20:	fff6001f 	.word	0xfff6001f
 8006e24:	fff6fff6 	.word	0xfff6fff6
 8006e28:	001ffff6 	.word	0x001ffff6
 8006e2c:	fff6fff6 	.word	0xfff6fff6
 8006e30:	fff6fff6 	.word	0xfff6fff6
 8006e34:	003600a3 	.word	0x003600a3
 8006e38:	fff60083 	.word	0xfff60083
 8006e3c:	00b4fff6 	.word	0x00b4fff6
 8006e40:	0036fff6 	.word	0x0036fff6
 8006e44:	fff6fff6 	.word	0xfff6fff6
 8006e48:	0087      	.short	0x0087
 8006e4a:	0026      	movs	r6, r4
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	3642      	adds	r6, #66	; 0x42
 8006e50:	1d11      	adds	r1, r2, #4
 8006e52:	6019      	str	r1, [r3, #0]
 8006e54:	6813      	ldr	r3, [r2, #0]
 8006e56:	7033      	strb	r3, [r6, #0]
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e0a2      	b.n	8006fa2 <_printf_i+0x1c6>
 8006e5c:	6818      	ldr	r0, [r3, #0]
 8006e5e:	6809      	ldr	r1, [r1, #0]
 8006e60:	1d02      	adds	r2, r0, #4
 8006e62:	060d      	lsls	r5, r1, #24
 8006e64:	d50b      	bpl.n	8006e7e <_printf_i+0xa2>
 8006e66:	6805      	ldr	r5, [r0, #0]
 8006e68:	601a      	str	r2, [r3, #0]
 8006e6a:	2d00      	cmp	r5, #0
 8006e6c:	da03      	bge.n	8006e76 <_printf_i+0x9a>
 8006e6e:	232d      	movs	r3, #45	; 0x2d
 8006e70:	9a04      	ldr	r2, [sp, #16]
 8006e72:	426d      	negs	r5, r5
 8006e74:	7013      	strb	r3, [r2, #0]
 8006e76:	4b5f      	ldr	r3, [pc, #380]	; (8006ff4 <_printf_i+0x218>)
 8006e78:	270a      	movs	r7, #10
 8006e7a:	9303      	str	r3, [sp, #12]
 8006e7c:	e01b      	b.n	8006eb6 <_printf_i+0xda>
 8006e7e:	6805      	ldr	r5, [r0, #0]
 8006e80:	601a      	str	r2, [r3, #0]
 8006e82:	0649      	lsls	r1, r1, #25
 8006e84:	d5f1      	bpl.n	8006e6a <_printf_i+0x8e>
 8006e86:	b22d      	sxth	r5, r5
 8006e88:	e7ef      	b.n	8006e6a <_printf_i+0x8e>
 8006e8a:	680d      	ldr	r5, [r1, #0]
 8006e8c:	6819      	ldr	r1, [r3, #0]
 8006e8e:	1d08      	adds	r0, r1, #4
 8006e90:	6018      	str	r0, [r3, #0]
 8006e92:	062e      	lsls	r6, r5, #24
 8006e94:	d501      	bpl.n	8006e9a <_printf_i+0xbe>
 8006e96:	680d      	ldr	r5, [r1, #0]
 8006e98:	e003      	b.n	8006ea2 <_printf_i+0xc6>
 8006e9a:	066d      	lsls	r5, r5, #25
 8006e9c:	d5fb      	bpl.n	8006e96 <_printf_i+0xba>
 8006e9e:	680d      	ldr	r5, [r1, #0]
 8006ea0:	b2ad      	uxth	r5, r5
 8006ea2:	4b54      	ldr	r3, [pc, #336]	; (8006ff4 <_printf_i+0x218>)
 8006ea4:	2708      	movs	r7, #8
 8006ea6:	9303      	str	r3, [sp, #12]
 8006ea8:	2a6f      	cmp	r2, #111	; 0x6f
 8006eaa:	d000      	beq.n	8006eae <_printf_i+0xd2>
 8006eac:	3702      	adds	r7, #2
 8006eae:	0023      	movs	r3, r4
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	3343      	adds	r3, #67	; 0x43
 8006eb4:	701a      	strb	r2, [r3, #0]
 8006eb6:	6863      	ldr	r3, [r4, #4]
 8006eb8:	60a3      	str	r3, [r4, #8]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	db03      	blt.n	8006ec6 <_printf_i+0xea>
 8006ebe:	2104      	movs	r1, #4
 8006ec0:	6822      	ldr	r2, [r4, #0]
 8006ec2:	438a      	bics	r2, r1
 8006ec4:	6022      	str	r2, [r4, #0]
 8006ec6:	2d00      	cmp	r5, #0
 8006ec8:	d102      	bne.n	8006ed0 <_printf_i+0xf4>
 8006eca:	9e04      	ldr	r6, [sp, #16]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00c      	beq.n	8006eea <_printf_i+0x10e>
 8006ed0:	9e04      	ldr	r6, [sp, #16]
 8006ed2:	0028      	movs	r0, r5
 8006ed4:	0039      	movs	r1, r7
 8006ed6:	f7f9 f9b9 	bl	800024c <__aeabi_uidivmod>
 8006eda:	9b03      	ldr	r3, [sp, #12]
 8006edc:	3e01      	subs	r6, #1
 8006ede:	5c5b      	ldrb	r3, [r3, r1]
 8006ee0:	7033      	strb	r3, [r6, #0]
 8006ee2:	002b      	movs	r3, r5
 8006ee4:	0005      	movs	r5, r0
 8006ee6:	429f      	cmp	r7, r3
 8006ee8:	d9f3      	bls.n	8006ed2 <_printf_i+0xf6>
 8006eea:	2f08      	cmp	r7, #8
 8006eec:	d109      	bne.n	8006f02 <_printf_i+0x126>
 8006eee:	6823      	ldr	r3, [r4, #0]
 8006ef0:	07db      	lsls	r3, r3, #31
 8006ef2:	d506      	bpl.n	8006f02 <_printf_i+0x126>
 8006ef4:	6862      	ldr	r2, [r4, #4]
 8006ef6:	6923      	ldr	r3, [r4, #16]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	dc02      	bgt.n	8006f02 <_printf_i+0x126>
 8006efc:	2330      	movs	r3, #48	; 0x30
 8006efe:	3e01      	subs	r6, #1
 8006f00:	7033      	strb	r3, [r6, #0]
 8006f02:	9b04      	ldr	r3, [sp, #16]
 8006f04:	1b9b      	subs	r3, r3, r6
 8006f06:	6123      	str	r3, [r4, #16]
 8006f08:	9b07      	ldr	r3, [sp, #28]
 8006f0a:	0021      	movs	r1, r4
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	9805      	ldr	r0, [sp, #20]
 8006f10:	9b06      	ldr	r3, [sp, #24]
 8006f12:	aa09      	add	r2, sp, #36	; 0x24
 8006f14:	f7ff fef2 	bl	8006cfc <_printf_common>
 8006f18:	3001      	adds	r0, #1
 8006f1a:	d147      	bne.n	8006fac <_printf_i+0x1d0>
 8006f1c:	2001      	movs	r0, #1
 8006f1e:	4240      	negs	r0, r0
 8006f20:	b00b      	add	sp, #44	; 0x2c
 8006f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f24:	2220      	movs	r2, #32
 8006f26:	6809      	ldr	r1, [r1, #0]
 8006f28:	430a      	orrs	r2, r1
 8006f2a:	6022      	str	r2, [r4, #0]
 8006f2c:	2278      	movs	r2, #120	; 0x78
 8006f2e:	4932      	ldr	r1, [pc, #200]	; (8006ff8 <_printf_i+0x21c>)
 8006f30:	9103      	str	r1, [sp, #12]
 8006f32:	0021      	movs	r1, r4
 8006f34:	3145      	adds	r1, #69	; 0x45
 8006f36:	700a      	strb	r2, [r1, #0]
 8006f38:	6819      	ldr	r1, [r3, #0]
 8006f3a:	6822      	ldr	r2, [r4, #0]
 8006f3c:	c920      	ldmia	r1!, {r5}
 8006f3e:	0610      	lsls	r0, r2, #24
 8006f40:	d402      	bmi.n	8006f48 <_printf_i+0x16c>
 8006f42:	0650      	lsls	r0, r2, #25
 8006f44:	d500      	bpl.n	8006f48 <_printf_i+0x16c>
 8006f46:	b2ad      	uxth	r5, r5
 8006f48:	6019      	str	r1, [r3, #0]
 8006f4a:	07d3      	lsls	r3, r2, #31
 8006f4c:	d502      	bpl.n	8006f54 <_printf_i+0x178>
 8006f4e:	2320      	movs	r3, #32
 8006f50:	4313      	orrs	r3, r2
 8006f52:	6023      	str	r3, [r4, #0]
 8006f54:	2710      	movs	r7, #16
 8006f56:	2d00      	cmp	r5, #0
 8006f58:	d1a9      	bne.n	8006eae <_printf_i+0xd2>
 8006f5a:	2220      	movs	r2, #32
 8006f5c:	6823      	ldr	r3, [r4, #0]
 8006f5e:	4393      	bics	r3, r2
 8006f60:	6023      	str	r3, [r4, #0]
 8006f62:	e7a4      	b.n	8006eae <_printf_i+0xd2>
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	680d      	ldr	r5, [r1, #0]
 8006f68:	1d10      	adds	r0, r2, #4
 8006f6a:	6949      	ldr	r1, [r1, #20]
 8006f6c:	6018      	str	r0, [r3, #0]
 8006f6e:	6813      	ldr	r3, [r2, #0]
 8006f70:	062e      	lsls	r6, r5, #24
 8006f72:	d501      	bpl.n	8006f78 <_printf_i+0x19c>
 8006f74:	6019      	str	r1, [r3, #0]
 8006f76:	e002      	b.n	8006f7e <_printf_i+0x1a2>
 8006f78:	066d      	lsls	r5, r5, #25
 8006f7a:	d5fb      	bpl.n	8006f74 <_printf_i+0x198>
 8006f7c:	8019      	strh	r1, [r3, #0]
 8006f7e:	2300      	movs	r3, #0
 8006f80:	9e04      	ldr	r6, [sp, #16]
 8006f82:	6123      	str	r3, [r4, #16]
 8006f84:	e7c0      	b.n	8006f08 <_printf_i+0x12c>
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	1d11      	adds	r1, r2, #4
 8006f8a:	6019      	str	r1, [r3, #0]
 8006f8c:	6816      	ldr	r6, [r2, #0]
 8006f8e:	2100      	movs	r1, #0
 8006f90:	0030      	movs	r0, r6
 8006f92:	6862      	ldr	r2, [r4, #4]
 8006f94:	f000 f9b6 	bl	8007304 <memchr>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	d001      	beq.n	8006fa0 <_printf_i+0x1c4>
 8006f9c:	1b80      	subs	r0, r0, r6
 8006f9e:	6060      	str	r0, [r4, #4]
 8006fa0:	6863      	ldr	r3, [r4, #4]
 8006fa2:	6123      	str	r3, [r4, #16]
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	9a04      	ldr	r2, [sp, #16]
 8006fa8:	7013      	strb	r3, [r2, #0]
 8006faa:	e7ad      	b.n	8006f08 <_printf_i+0x12c>
 8006fac:	0032      	movs	r2, r6
 8006fae:	6923      	ldr	r3, [r4, #16]
 8006fb0:	9906      	ldr	r1, [sp, #24]
 8006fb2:	9805      	ldr	r0, [sp, #20]
 8006fb4:	9d07      	ldr	r5, [sp, #28]
 8006fb6:	47a8      	blx	r5
 8006fb8:	3001      	adds	r0, #1
 8006fba:	d0af      	beq.n	8006f1c <_printf_i+0x140>
 8006fbc:	6823      	ldr	r3, [r4, #0]
 8006fbe:	079b      	lsls	r3, r3, #30
 8006fc0:	d415      	bmi.n	8006fee <_printf_i+0x212>
 8006fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc4:	68e0      	ldr	r0, [r4, #12]
 8006fc6:	4298      	cmp	r0, r3
 8006fc8:	daaa      	bge.n	8006f20 <_printf_i+0x144>
 8006fca:	0018      	movs	r0, r3
 8006fcc:	e7a8      	b.n	8006f20 <_printf_i+0x144>
 8006fce:	0022      	movs	r2, r4
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	9906      	ldr	r1, [sp, #24]
 8006fd4:	9805      	ldr	r0, [sp, #20]
 8006fd6:	9e07      	ldr	r6, [sp, #28]
 8006fd8:	3219      	adds	r2, #25
 8006fda:	47b0      	blx	r6
 8006fdc:	3001      	adds	r0, #1
 8006fde:	d09d      	beq.n	8006f1c <_printf_i+0x140>
 8006fe0:	3501      	adds	r5, #1
 8006fe2:	68e3      	ldr	r3, [r4, #12]
 8006fe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fe6:	1a9b      	subs	r3, r3, r2
 8006fe8:	42ab      	cmp	r3, r5
 8006fea:	dcf0      	bgt.n	8006fce <_printf_i+0x1f2>
 8006fec:	e7e9      	b.n	8006fc2 <_printf_i+0x1e6>
 8006fee:	2500      	movs	r5, #0
 8006ff0:	e7f7      	b.n	8006fe2 <_printf_i+0x206>
 8006ff2:	46c0      	nop			; (mov r8, r8)
 8006ff4:	080092b6 	.word	0x080092b6
 8006ff8:	080092c7 	.word	0x080092c7

08006ffc <std>:
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	b510      	push	{r4, lr}
 8007000:	0004      	movs	r4, r0
 8007002:	6003      	str	r3, [r0, #0]
 8007004:	6043      	str	r3, [r0, #4]
 8007006:	6083      	str	r3, [r0, #8]
 8007008:	8181      	strh	r1, [r0, #12]
 800700a:	6643      	str	r3, [r0, #100]	; 0x64
 800700c:	0019      	movs	r1, r3
 800700e:	81c2      	strh	r2, [r0, #14]
 8007010:	6103      	str	r3, [r0, #16]
 8007012:	6143      	str	r3, [r0, #20]
 8007014:	6183      	str	r3, [r0, #24]
 8007016:	2208      	movs	r2, #8
 8007018:	305c      	adds	r0, #92	; 0x5c
 800701a:	f000 f8ed 	bl	80071f8 <memset>
 800701e:	4b05      	ldr	r3, [pc, #20]	; (8007034 <std+0x38>)
 8007020:	6224      	str	r4, [r4, #32]
 8007022:	6263      	str	r3, [r4, #36]	; 0x24
 8007024:	4b04      	ldr	r3, [pc, #16]	; (8007038 <std+0x3c>)
 8007026:	62a3      	str	r3, [r4, #40]	; 0x28
 8007028:	4b04      	ldr	r3, [pc, #16]	; (800703c <std+0x40>)
 800702a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800702c:	4b04      	ldr	r3, [pc, #16]	; (8007040 <std+0x44>)
 800702e:	6323      	str	r3, [r4, #48]	; 0x30
 8007030:	bd10      	pop	{r4, pc}
 8007032:	46c0      	nop			; (mov r8, r8)
 8007034:	08007161 	.word	0x08007161
 8007038:	08007189 	.word	0x08007189
 800703c:	080071c1 	.word	0x080071c1
 8007040:	080071ed 	.word	0x080071ed

08007044 <stdio_exit_handler>:
 8007044:	b510      	push	{r4, lr}
 8007046:	4a03      	ldr	r2, [pc, #12]	; (8007054 <stdio_exit_handler+0x10>)
 8007048:	4903      	ldr	r1, [pc, #12]	; (8007058 <stdio_exit_handler+0x14>)
 800704a:	4804      	ldr	r0, [pc, #16]	; (800705c <stdio_exit_handler+0x18>)
 800704c:	f000 f86c 	bl	8007128 <_fwalk_sglue>
 8007050:	bd10      	pop	{r4, pc}
 8007052:	46c0      	nop			; (mov r8, r8)
 8007054:	2000000c 	.word	0x2000000c
 8007058:	08008aad 	.word	0x08008aad
 800705c:	20000018 	.word	0x20000018

08007060 <cleanup_stdio>:
 8007060:	6841      	ldr	r1, [r0, #4]
 8007062:	4b0b      	ldr	r3, [pc, #44]	; (8007090 <cleanup_stdio+0x30>)
 8007064:	b510      	push	{r4, lr}
 8007066:	0004      	movs	r4, r0
 8007068:	4299      	cmp	r1, r3
 800706a:	d001      	beq.n	8007070 <cleanup_stdio+0x10>
 800706c:	f001 fd1e 	bl	8008aac <_fflush_r>
 8007070:	68a1      	ldr	r1, [r4, #8]
 8007072:	4b08      	ldr	r3, [pc, #32]	; (8007094 <cleanup_stdio+0x34>)
 8007074:	4299      	cmp	r1, r3
 8007076:	d002      	beq.n	800707e <cleanup_stdio+0x1e>
 8007078:	0020      	movs	r0, r4
 800707a:	f001 fd17 	bl	8008aac <_fflush_r>
 800707e:	68e1      	ldr	r1, [r4, #12]
 8007080:	4b05      	ldr	r3, [pc, #20]	; (8007098 <cleanup_stdio+0x38>)
 8007082:	4299      	cmp	r1, r3
 8007084:	d002      	beq.n	800708c <cleanup_stdio+0x2c>
 8007086:	0020      	movs	r0, r4
 8007088:	f001 fd10 	bl	8008aac <_fflush_r>
 800708c:	bd10      	pop	{r4, pc}
 800708e:	46c0      	nop			; (mov r8, r8)
 8007090:	200005dc 	.word	0x200005dc
 8007094:	20000644 	.word	0x20000644
 8007098:	200006ac 	.word	0x200006ac

0800709c <global_stdio_init.part.0>:
 800709c:	b510      	push	{r4, lr}
 800709e:	4b09      	ldr	r3, [pc, #36]	; (80070c4 <global_stdio_init.part.0+0x28>)
 80070a0:	4a09      	ldr	r2, [pc, #36]	; (80070c8 <global_stdio_init.part.0+0x2c>)
 80070a2:	2104      	movs	r1, #4
 80070a4:	601a      	str	r2, [r3, #0]
 80070a6:	4809      	ldr	r0, [pc, #36]	; (80070cc <global_stdio_init.part.0+0x30>)
 80070a8:	2200      	movs	r2, #0
 80070aa:	f7ff ffa7 	bl	8006ffc <std>
 80070ae:	2201      	movs	r2, #1
 80070b0:	2109      	movs	r1, #9
 80070b2:	4807      	ldr	r0, [pc, #28]	; (80070d0 <global_stdio_init.part.0+0x34>)
 80070b4:	f7ff ffa2 	bl	8006ffc <std>
 80070b8:	2202      	movs	r2, #2
 80070ba:	2112      	movs	r1, #18
 80070bc:	4805      	ldr	r0, [pc, #20]	; (80070d4 <global_stdio_init.part.0+0x38>)
 80070be:	f7ff ff9d 	bl	8006ffc <std>
 80070c2:	bd10      	pop	{r4, pc}
 80070c4:	20000714 	.word	0x20000714
 80070c8:	08007045 	.word	0x08007045
 80070cc:	200005dc 	.word	0x200005dc
 80070d0:	20000644 	.word	0x20000644
 80070d4:	200006ac 	.word	0x200006ac

080070d8 <__sfp_lock_acquire>:
 80070d8:	b510      	push	{r4, lr}
 80070da:	4802      	ldr	r0, [pc, #8]	; (80070e4 <__sfp_lock_acquire+0xc>)
 80070dc:	f000 f910 	bl	8007300 <__retarget_lock_acquire_recursive>
 80070e0:	bd10      	pop	{r4, pc}
 80070e2:	46c0      	nop			; (mov r8, r8)
 80070e4:	2000071d 	.word	0x2000071d

080070e8 <__sfp_lock_release>:
 80070e8:	b510      	push	{r4, lr}
 80070ea:	4802      	ldr	r0, [pc, #8]	; (80070f4 <__sfp_lock_release+0xc>)
 80070ec:	f000 f909 	bl	8007302 <__retarget_lock_release_recursive>
 80070f0:	bd10      	pop	{r4, pc}
 80070f2:	46c0      	nop			; (mov r8, r8)
 80070f4:	2000071d 	.word	0x2000071d

080070f8 <__sinit>:
 80070f8:	b510      	push	{r4, lr}
 80070fa:	0004      	movs	r4, r0
 80070fc:	f7ff ffec 	bl	80070d8 <__sfp_lock_acquire>
 8007100:	6a23      	ldr	r3, [r4, #32]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d002      	beq.n	800710c <__sinit+0x14>
 8007106:	f7ff ffef 	bl	80070e8 <__sfp_lock_release>
 800710a:	bd10      	pop	{r4, pc}
 800710c:	4b04      	ldr	r3, [pc, #16]	; (8007120 <__sinit+0x28>)
 800710e:	6223      	str	r3, [r4, #32]
 8007110:	4b04      	ldr	r3, [pc, #16]	; (8007124 <__sinit+0x2c>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1f6      	bne.n	8007106 <__sinit+0xe>
 8007118:	f7ff ffc0 	bl	800709c <global_stdio_init.part.0>
 800711c:	e7f3      	b.n	8007106 <__sinit+0xe>
 800711e:	46c0      	nop			; (mov r8, r8)
 8007120:	08007061 	.word	0x08007061
 8007124:	20000714 	.word	0x20000714

08007128 <_fwalk_sglue>:
 8007128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800712a:	0014      	movs	r4, r2
 800712c:	2600      	movs	r6, #0
 800712e:	9000      	str	r0, [sp, #0]
 8007130:	9101      	str	r1, [sp, #4]
 8007132:	68a5      	ldr	r5, [r4, #8]
 8007134:	6867      	ldr	r7, [r4, #4]
 8007136:	3f01      	subs	r7, #1
 8007138:	d504      	bpl.n	8007144 <_fwalk_sglue+0x1c>
 800713a:	6824      	ldr	r4, [r4, #0]
 800713c:	2c00      	cmp	r4, #0
 800713e:	d1f8      	bne.n	8007132 <_fwalk_sglue+0xa>
 8007140:	0030      	movs	r0, r6
 8007142:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007144:	89ab      	ldrh	r3, [r5, #12]
 8007146:	2b01      	cmp	r3, #1
 8007148:	d908      	bls.n	800715c <_fwalk_sglue+0x34>
 800714a:	220e      	movs	r2, #14
 800714c:	5eab      	ldrsh	r3, [r5, r2]
 800714e:	3301      	adds	r3, #1
 8007150:	d004      	beq.n	800715c <_fwalk_sglue+0x34>
 8007152:	0029      	movs	r1, r5
 8007154:	9800      	ldr	r0, [sp, #0]
 8007156:	9b01      	ldr	r3, [sp, #4]
 8007158:	4798      	blx	r3
 800715a:	4306      	orrs	r6, r0
 800715c:	3568      	adds	r5, #104	; 0x68
 800715e:	e7ea      	b.n	8007136 <_fwalk_sglue+0xe>

08007160 <__sread>:
 8007160:	b570      	push	{r4, r5, r6, lr}
 8007162:	000c      	movs	r4, r1
 8007164:	250e      	movs	r5, #14
 8007166:	5f49      	ldrsh	r1, [r1, r5]
 8007168:	f000 f878 	bl	800725c <_read_r>
 800716c:	2800      	cmp	r0, #0
 800716e:	db03      	blt.n	8007178 <__sread+0x18>
 8007170:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007172:	181b      	adds	r3, r3, r0
 8007174:	6563      	str	r3, [r4, #84]	; 0x54
 8007176:	bd70      	pop	{r4, r5, r6, pc}
 8007178:	89a3      	ldrh	r3, [r4, #12]
 800717a:	4a02      	ldr	r2, [pc, #8]	; (8007184 <__sread+0x24>)
 800717c:	4013      	ands	r3, r2
 800717e:	81a3      	strh	r3, [r4, #12]
 8007180:	e7f9      	b.n	8007176 <__sread+0x16>
 8007182:	46c0      	nop			; (mov r8, r8)
 8007184:	ffffefff 	.word	0xffffefff

08007188 <__swrite>:
 8007188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800718a:	001f      	movs	r7, r3
 800718c:	898b      	ldrh	r3, [r1, #12]
 800718e:	0005      	movs	r5, r0
 8007190:	000c      	movs	r4, r1
 8007192:	0016      	movs	r6, r2
 8007194:	05db      	lsls	r3, r3, #23
 8007196:	d505      	bpl.n	80071a4 <__swrite+0x1c>
 8007198:	230e      	movs	r3, #14
 800719a:	5ec9      	ldrsh	r1, [r1, r3]
 800719c:	2200      	movs	r2, #0
 800719e:	2302      	movs	r3, #2
 80071a0:	f000 f848 	bl	8007234 <_lseek_r>
 80071a4:	89a3      	ldrh	r3, [r4, #12]
 80071a6:	4a05      	ldr	r2, [pc, #20]	; (80071bc <__swrite+0x34>)
 80071a8:	0028      	movs	r0, r5
 80071aa:	4013      	ands	r3, r2
 80071ac:	81a3      	strh	r3, [r4, #12]
 80071ae:	0032      	movs	r2, r6
 80071b0:	230e      	movs	r3, #14
 80071b2:	5ee1      	ldrsh	r1, [r4, r3]
 80071b4:	003b      	movs	r3, r7
 80071b6:	f000 f865 	bl	8007284 <_write_r>
 80071ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071bc:	ffffefff 	.word	0xffffefff

080071c0 <__sseek>:
 80071c0:	b570      	push	{r4, r5, r6, lr}
 80071c2:	000c      	movs	r4, r1
 80071c4:	250e      	movs	r5, #14
 80071c6:	5f49      	ldrsh	r1, [r1, r5]
 80071c8:	f000 f834 	bl	8007234 <_lseek_r>
 80071cc:	89a3      	ldrh	r3, [r4, #12]
 80071ce:	1c42      	adds	r2, r0, #1
 80071d0:	d103      	bne.n	80071da <__sseek+0x1a>
 80071d2:	4a05      	ldr	r2, [pc, #20]	; (80071e8 <__sseek+0x28>)
 80071d4:	4013      	ands	r3, r2
 80071d6:	81a3      	strh	r3, [r4, #12]
 80071d8:	bd70      	pop	{r4, r5, r6, pc}
 80071da:	2280      	movs	r2, #128	; 0x80
 80071dc:	0152      	lsls	r2, r2, #5
 80071de:	4313      	orrs	r3, r2
 80071e0:	81a3      	strh	r3, [r4, #12]
 80071e2:	6560      	str	r0, [r4, #84]	; 0x54
 80071e4:	e7f8      	b.n	80071d8 <__sseek+0x18>
 80071e6:	46c0      	nop			; (mov r8, r8)
 80071e8:	ffffefff 	.word	0xffffefff

080071ec <__sclose>:
 80071ec:	b510      	push	{r4, lr}
 80071ee:	230e      	movs	r3, #14
 80071f0:	5ec9      	ldrsh	r1, [r1, r3]
 80071f2:	f000 f80d 	bl	8007210 <_close_r>
 80071f6:	bd10      	pop	{r4, pc}

080071f8 <memset>:
 80071f8:	0003      	movs	r3, r0
 80071fa:	1882      	adds	r2, r0, r2
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d100      	bne.n	8007202 <memset+0xa>
 8007200:	4770      	bx	lr
 8007202:	7019      	strb	r1, [r3, #0]
 8007204:	3301      	adds	r3, #1
 8007206:	e7f9      	b.n	80071fc <memset+0x4>

08007208 <_localeconv_r>:
 8007208:	4800      	ldr	r0, [pc, #0]	; (800720c <_localeconv_r+0x4>)
 800720a:	4770      	bx	lr
 800720c:	20000158 	.word	0x20000158

08007210 <_close_r>:
 8007210:	2300      	movs	r3, #0
 8007212:	b570      	push	{r4, r5, r6, lr}
 8007214:	4d06      	ldr	r5, [pc, #24]	; (8007230 <_close_r+0x20>)
 8007216:	0004      	movs	r4, r0
 8007218:	0008      	movs	r0, r1
 800721a:	602b      	str	r3, [r5, #0]
 800721c:	f7fb fe8f 	bl	8002f3e <_close>
 8007220:	1c43      	adds	r3, r0, #1
 8007222:	d103      	bne.n	800722c <_close_r+0x1c>
 8007224:	682b      	ldr	r3, [r5, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d000      	beq.n	800722c <_close_r+0x1c>
 800722a:	6023      	str	r3, [r4, #0]
 800722c:	bd70      	pop	{r4, r5, r6, pc}
 800722e:	46c0      	nop			; (mov r8, r8)
 8007230:	20000718 	.word	0x20000718

08007234 <_lseek_r>:
 8007234:	b570      	push	{r4, r5, r6, lr}
 8007236:	0004      	movs	r4, r0
 8007238:	0008      	movs	r0, r1
 800723a:	0011      	movs	r1, r2
 800723c:	001a      	movs	r2, r3
 800723e:	2300      	movs	r3, #0
 8007240:	4d05      	ldr	r5, [pc, #20]	; (8007258 <_lseek_r+0x24>)
 8007242:	602b      	str	r3, [r5, #0]
 8007244:	f7fb fe9c 	bl	8002f80 <_lseek>
 8007248:	1c43      	adds	r3, r0, #1
 800724a:	d103      	bne.n	8007254 <_lseek_r+0x20>
 800724c:	682b      	ldr	r3, [r5, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d000      	beq.n	8007254 <_lseek_r+0x20>
 8007252:	6023      	str	r3, [r4, #0]
 8007254:	bd70      	pop	{r4, r5, r6, pc}
 8007256:	46c0      	nop			; (mov r8, r8)
 8007258:	20000718 	.word	0x20000718

0800725c <_read_r>:
 800725c:	b570      	push	{r4, r5, r6, lr}
 800725e:	0004      	movs	r4, r0
 8007260:	0008      	movs	r0, r1
 8007262:	0011      	movs	r1, r2
 8007264:	001a      	movs	r2, r3
 8007266:	2300      	movs	r3, #0
 8007268:	4d05      	ldr	r5, [pc, #20]	; (8007280 <_read_r+0x24>)
 800726a:	602b      	str	r3, [r5, #0]
 800726c:	f7fb fe2e 	bl	8002ecc <_read>
 8007270:	1c43      	adds	r3, r0, #1
 8007272:	d103      	bne.n	800727c <_read_r+0x20>
 8007274:	682b      	ldr	r3, [r5, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d000      	beq.n	800727c <_read_r+0x20>
 800727a:	6023      	str	r3, [r4, #0]
 800727c:	bd70      	pop	{r4, r5, r6, pc}
 800727e:	46c0      	nop			; (mov r8, r8)
 8007280:	20000718 	.word	0x20000718

08007284 <_write_r>:
 8007284:	b570      	push	{r4, r5, r6, lr}
 8007286:	0004      	movs	r4, r0
 8007288:	0008      	movs	r0, r1
 800728a:	0011      	movs	r1, r2
 800728c:	001a      	movs	r2, r3
 800728e:	2300      	movs	r3, #0
 8007290:	4d05      	ldr	r5, [pc, #20]	; (80072a8 <_write_r+0x24>)
 8007292:	602b      	str	r3, [r5, #0]
 8007294:	f7fb fe37 	bl	8002f06 <_write>
 8007298:	1c43      	adds	r3, r0, #1
 800729a:	d103      	bne.n	80072a4 <_write_r+0x20>
 800729c:	682b      	ldr	r3, [r5, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d000      	beq.n	80072a4 <_write_r+0x20>
 80072a2:	6023      	str	r3, [r4, #0]
 80072a4:	bd70      	pop	{r4, r5, r6, pc}
 80072a6:	46c0      	nop			; (mov r8, r8)
 80072a8:	20000718 	.word	0x20000718

080072ac <__errno>:
 80072ac:	4b01      	ldr	r3, [pc, #4]	; (80072b4 <__errno+0x8>)
 80072ae:	6818      	ldr	r0, [r3, #0]
 80072b0:	4770      	bx	lr
 80072b2:	46c0      	nop			; (mov r8, r8)
 80072b4:	20000064 	.word	0x20000064

080072b8 <__libc_init_array>:
 80072b8:	b570      	push	{r4, r5, r6, lr}
 80072ba:	2600      	movs	r6, #0
 80072bc:	4c0c      	ldr	r4, [pc, #48]	; (80072f0 <__libc_init_array+0x38>)
 80072be:	4d0d      	ldr	r5, [pc, #52]	; (80072f4 <__libc_init_array+0x3c>)
 80072c0:	1b64      	subs	r4, r4, r5
 80072c2:	10a4      	asrs	r4, r4, #2
 80072c4:	42a6      	cmp	r6, r4
 80072c6:	d109      	bne.n	80072dc <__libc_init_array+0x24>
 80072c8:	2600      	movs	r6, #0
 80072ca:	f001 ff75 	bl	80091b8 <_init>
 80072ce:	4c0a      	ldr	r4, [pc, #40]	; (80072f8 <__libc_init_array+0x40>)
 80072d0:	4d0a      	ldr	r5, [pc, #40]	; (80072fc <__libc_init_array+0x44>)
 80072d2:	1b64      	subs	r4, r4, r5
 80072d4:	10a4      	asrs	r4, r4, #2
 80072d6:	42a6      	cmp	r6, r4
 80072d8:	d105      	bne.n	80072e6 <__libc_init_array+0x2e>
 80072da:	bd70      	pop	{r4, r5, r6, pc}
 80072dc:	00b3      	lsls	r3, r6, #2
 80072de:	58eb      	ldr	r3, [r5, r3]
 80072e0:	4798      	blx	r3
 80072e2:	3601      	adds	r6, #1
 80072e4:	e7ee      	b.n	80072c4 <__libc_init_array+0xc>
 80072e6:	00b3      	lsls	r3, r6, #2
 80072e8:	58eb      	ldr	r3, [r5, r3]
 80072ea:	4798      	blx	r3
 80072ec:	3601      	adds	r6, #1
 80072ee:	e7f2      	b.n	80072d6 <__libc_init_array+0x1e>
 80072f0:	08009614 	.word	0x08009614
 80072f4:	08009614 	.word	0x08009614
 80072f8:	08009618 	.word	0x08009618
 80072fc:	08009614 	.word	0x08009614

08007300 <__retarget_lock_acquire_recursive>:
 8007300:	4770      	bx	lr

08007302 <__retarget_lock_release_recursive>:
 8007302:	4770      	bx	lr

08007304 <memchr>:
 8007304:	b2c9      	uxtb	r1, r1
 8007306:	1882      	adds	r2, r0, r2
 8007308:	4290      	cmp	r0, r2
 800730a:	d101      	bne.n	8007310 <memchr+0xc>
 800730c:	2000      	movs	r0, #0
 800730e:	4770      	bx	lr
 8007310:	7803      	ldrb	r3, [r0, #0]
 8007312:	428b      	cmp	r3, r1
 8007314:	d0fb      	beq.n	800730e <memchr+0xa>
 8007316:	3001      	adds	r0, #1
 8007318:	e7f6      	b.n	8007308 <memchr+0x4>

0800731a <quorem>:
 800731a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800731c:	6902      	ldr	r2, [r0, #16]
 800731e:	690b      	ldr	r3, [r1, #16]
 8007320:	b089      	sub	sp, #36	; 0x24
 8007322:	0007      	movs	r7, r0
 8007324:	9104      	str	r1, [sp, #16]
 8007326:	2000      	movs	r0, #0
 8007328:	429a      	cmp	r2, r3
 800732a:	db69      	blt.n	8007400 <quorem+0xe6>
 800732c:	3b01      	subs	r3, #1
 800732e:	009c      	lsls	r4, r3, #2
 8007330:	9301      	str	r3, [sp, #4]
 8007332:	000b      	movs	r3, r1
 8007334:	3314      	adds	r3, #20
 8007336:	9306      	str	r3, [sp, #24]
 8007338:	191b      	adds	r3, r3, r4
 800733a:	9305      	str	r3, [sp, #20]
 800733c:	003b      	movs	r3, r7
 800733e:	3314      	adds	r3, #20
 8007340:	9303      	str	r3, [sp, #12]
 8007342:	191c      	adds	r4, r3, r4
 8007344:	9b05      	ldr	r3, [sp, #20]
 8007346:	6826      	ldr	r6, [r4, #0]
 8007348:	681d      	ldr	r5, [r3, #0]
 800734a:	0030      	movs	r0, r6
 800734c:	3501      	adds	r5, #1
 800734e:	0029      	movs	r1, r5
 8007350:	f7f8 fef6 	bl	8000140 <__udivsi3>
 8007354:	9002      	str	r0, [sp, #8]
 8007356:	42ae      	cmp	r6, r5
 8007358:	d329      	bcc.n	80073ae <quorem+0x94>
 800735a:	9b06      	ldr	r3, [sp, #24]
 800735c:	2600      	movs	r6, #0
 800735e:	469c      	mov	ip, r3
 8007360:	9d03      	ldr	r5, [sp, #12]
 8007362:	9606      	str	r6, [sp, #24]
 8007364:	4662      	mov	r2, ip
 8007366:	ca08      	ldmia	r2!, {r3}
 8007368:	6828      	ldr	r0, [r5, #0]
 800736a:	4694      	mov	ip, r2
 800736c:	9a02      	ldr	r2, [sp, #8]
 800736e:	b299      	uxth	r1, r3
 8007370:	4351      	muls	r1, r2
 8007372:	0c1b      	lsrs	r3, r3, #16
 8007374:	4353      	muls	r3, r2
 8007376:	1989      	adds	r1, r1, r6
 8007378:	0c0a      	lsrs	r2, r1, #16
 800737a:	189b      	adds	r3, r3, r2
 800737c:	9307      	str	r3, [sp, #28]
 800737e:	0c1e      	lsrs	r6, r3, #16
 8007380:	9b06      	ldr	r3, [sp, #24]
 8007382:	b282      	uxth	r2, r0
 8007384:	18d2      	adds	r2, r2, r3
 8007386:	466b      	mov	r3, sp
 8007388:	b289      	uxth	r1, r1
 800738a:	8b9b      	ldrh	r3, [r3, #28]
 800738c:	1a52      	subs	r2, r2, r1
 800738e:	0c01      	lsrs	r1, r0, #16
 8007390:	1ac9      	subs	r1, r1, r3
 8007392:	1413      	asrs	r3, r2, #16
 8007394:	18cb      	adds	r3, r1, r3
 8007396:	1419      	asrs	r1, r3, #16
 8007398:	b292      	uxth	r2, r2
 800739a:	041b      	lsls	r3, r3, #16
 800739c:	4313      	orrs	r3, r2
 800739e:	c508      	stmia	r5!, {r3}
 80073a0:	9b05      	ldr	r3, [sp, #20]
 80073a2:	9106      	str	r1, [sp, #24]
 80073a4:	4563      	cmp	r3, ip
 80073a6:	d2dd      	bcs.n	8007364 <quorem+0x4a>
 80073a8:	6823      	ldr	r3, [r4, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d030      	beq.n	8007410 <quorem+0xf6>
 80073ae:	0038      	movs	r0, r7
 80073b0:	9904      	ldr	r1, [sp, #16]
 80073b2:	f001 f9dd 	bl	8008770 <__mcmp>
 80073b6:	2800      	cmp	r0, #0
 80073b8:	db21      	blt.n	80073fe <quorem+0xe4>
 80073ba:	0038      	movs	r0, r7
 80073bc:	2600      	movs	r6, #0
 80073be:	9b02      	ldr	r3, [sp, #8]
 80073c0:	9c04      	ldr	r4, [sp, #16]
 80073c2:	3301      	adds	r3, #1
 80073c4:	9302      	str	r3, [sp, #8]
 80073c6:	3014      	adds	r0, #20
 80073c8:	3414      	adds	r4, #20
 80073ca:	6803      	ldr	r3, [r0, #0]
 80073cc:	cc02      	ldmia	r4!, {r1}
 80073ce:	b29d      	uxth	r5, r3
 80073d0:	19ad      	adds	r5, r5, r6
 80073d2:	b28a      	uxth	r2, r1
 80073d4:	1aaa      	subs	r2, r5, r2
 80073d6:	0c09      	lsrs	r1, r1, #16
 80073d8:	0c1b      	lsrs	r3, r3, #16
 80073da:	1a5b      	subs	r3, r3, r1
 80073dc:	1411      	asrs	r1, r2, #16
 80073de:	185b      	adds	r3, r3, r1
 80073e0:	141e      	asrs	r6, r3, #16
 80073e2:	b292      	uxth	r2, r2
 80073e4:	041b      	lsls	r3, r3, #16
 80073e6:	4313      	orrs	r3, r2
 80073e8:	c008      	stmia	r0!, {r3}
 80073ea:	9b05      	ldr	r3, [sp, #20]
 80073ec:	42a3      	cmp	r3, r4
 80073ee:	d2ec      	bcs.n	80073ca <quorem+0xb0>
 80073f0:	9b01      	ldr	r3, [sp, #4]
 80073f2:	9a03      	ldr	r2, [sp, #12]
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	18d3      	adds	r3, r2, r3
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	2a00      	cmp	r2, #0
 80073fc:	d015      	beq.n	800742a <quorem+0x110>
 80073fe:	9802      	ldr	r0, [sp, #8]
 8007400:	b009      	add	sp, #36	; 0x24
 8007402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007404:	6823      	ldr	r3, [r4, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d106      	bne.n	8007418 <quorem+0xfe>
 800740a:	9b01      	ldr	r3, [sp, #4]
 800740c:	3b01      	subs	r3, #1
 800740e:	9301      	str	r3, [sp, #4]
 8007410:	9b03      	ldr	r3, [sp, #12]
 8007412:	3c04      	subs	r4, #4
 8007414:	42a3      	cmp	r3, r4
 8007416:	d3f5      	bcc.n	8007404 <quorem+0xea>
 8007418:	9b01      	ldr	r3, [sp, #4]
 800741a:	613b      	str	r3, [r7, #16]
 800741c:	e7c7      	b.n	80073ae <quorem+0x94>
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	2a00      	cmp	r2, #0
 8007422:	d106      	bne.n	8007432 <quorem+0x118>
 8007424:	9a01      	ldr	r2, [sp, #4]
 8007426:	3a01      	subs	r2, #1
 8007428:	9201      	str	r2, [sp, #4]
 800742a:	9a03      	ldr	r2, [sp, #12]
 800742c:	3b04      	subs	r3, #4
 800742e:	429a      	cmp	r2, r3
 8007430:	d3f5      	bcc.n	800741e <quorem+0x104>
 8007432:	9b01      	ldr	r3, [sp, #4]
 8007434:	613b      	str	r3, [r7, #16]
 8007436:	e7e2      	b.n	80073fe <quorem+0xe4>

08007438 <_dtoa_r>:
 8007438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800743a:	0014      	movs	r4, r2
 800743c:	001d      	movs	r5, r3
 800743e:	69c6      	ldr	r6, [r0, #28]
 8007440:	b09d      	sub	sp, #116	; 0x74
 8007442:	9408      	str	r4, [sp, #32]
 8007444:	9509      	str	r5, [sp, #36]	; 0x24
 8007446:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8007448:	9004      	str	r0, [sp, #16]
 800744a:	2e00      	cmp	r6, #0
 800744c:	d10f      	bne.n	800746e <_dtoa_r+0x36>
 800744e:	2010      	movs	r0, #16
 8007450:	f000 fe4a 	bl	80080e8 <malloc>
 8007454:	9b04      	ldr	r3, [sp, #16]
 8007456:	1e02      	subs	r2, r0, #0
 8007458:	61d8      	str	r0, [r3, #28]
 800745a:	d104      	bne.n	8007466 <_dtoa_r+0x2e>
 800745c:	21ef      	movs	r1, #239	; 0xef
 800745e:	4bc6      	ldr	r3, [pc, #792]	; (8007778 <_dtoa_r+0x340>)
 8007460:	48c6      	ldr	r0, [pc, #792]	; (800777c <_dtoa_r+0x344>)
 8007462:	f001 fb6b 	bl	8008b3c <__assert_func>
 8007466:	6046      	str	r6, [r0, #4]
 8007468:	6086      	str	r6, [r0, #8]
 800746a:	6006      	str	r6, [r0, #0]
 800746c:	60c6      	str	r6, [r0, #12]
 800746e:	9b04      	ldr	r3, [sp, #16]
 8007470:	69db      	ldr	r3, [r3, #28]
 8007472:	6819      	ldr	r1, [r3, #0]
 8007474:	2900      	cmp	r1, #0
 8007476:	d00b      	beq.n	8007490 <_dtoa_r+0x58>
 8007478:	685a      	ldr	r2, [r3, #4]
 800747a:	2301      	movs	r3, #1
 800747c:	4093      	lsls	r3, r2
 800747e:	604a      	str	r2, [r1, #4]
 8007480:	608b      	str	r3, [r1, #8]
 8007482:	9804      	ldr	r0, [sp, #16]
 8007484:	f000 ff32 	bl	80082ec <_Bfree>
 8007488:	2200      	movs	r2, #0
 800748a:	9b04      	ldr	r3, [sp, #16]
 800748c:	69db      	ldr	r3, [r3, #28]
 800748e:	601a      	str	r2, [r3, #0]
 8007490:	2d00      	cmp	r5, #0
 8007492:	da1e      	bge.n	80074d2 <_dtoa_r+0x9a>
 8007494:	2301      	movs	r3, #1
 8007496:	603b      	str	r3, [r7, #0]
 8007498:	006b      	lsls	r3, r5, #1
 800749a:	085b      	lsrs	r3, r3, #1
 800749c:	9309      	str	r3, [sp, #36]	; 0x24
 800749e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80074a0:	4bb7      	ldr	r3, [pc, #732]	; (8007780 <_dtoa_r+0x348>)
 80074a2:	4ab7      	ldr	r2, [pc, #732]	; (8007780 <_dtoa_r+0x348>)
 80074a4:	403b      	ands	r3, r7
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d116      	bne.n	80074d8 <_dtoa_r+0xa0>
 80074aa:	4bb6      	ldr	r3, [pc, #728]	; (8007784 <_dtoa_r+0x34c>)
 80074ac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80074ae:	6013      	str	r3, [r2, #0]
 80074b0:	033b      	lsls	r3, r7, #12
 80074b2:	0b1b      	lsrs	r3, r3, #12
 80074b4:	4323      	orrs	r3, r4
 80074b6:	d101      	bne.n	80074bc <_dtoa_r+0x84>
 80074b8:	f000 fdb5 	bl	8008026 <_dtoa_r+0xbee>
 80074bc:	4bb2      	ldr	r3, [pc, #712]	; (8007788 <_dtoa_r+0x350>)
 80074be:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80074c0:	9306      	str	r3, [sp, #24]
 80074c2:	2a00      	cmp	r2, #0
 80074c4:	d002      	beq.n	80074cc <_dtoa_r+0x94>
 80074c6:	4bb1      	ldr	r3, [pc, #708]	; (800778c <_dtoa_r+0x354>)
 80074c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80074ca:	6013      	str	r3, [r2, #0]
 80074cc:	9806      	ldr	r0, [sp, #24]
 80074ce:	b01d      	add	sp, #116	; 0x74
 80074d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074d2:	2300      	movs	r3, #0
 80074d4:	603b      	str	r3, [r7, #0]
 80074d6:	e7e2      	b.n	800749e <_dtoa_r+0x66>
 80074d8:	9a08      	ldr	r2, [sp, #32]
 80074da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074dc:	9210      	str	r2, [sp, #64]	; 0x40
 80074de:	9311      	str	r3, [sp, #68]	; 0x44
 80074e0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80074e2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80074e4:	2200      	movs	r2, #0
 80074e6:	2300      	movs	r3, #0
 80074e8:	f7f8 ffb0 	bl	800044c <__aeabi_dcmpeq>
 80074ec:	1e06      	subs	r6, r0, #0
 80074ee:	d009      	beq.n	8007504 <_dtoa_r+0xcc>
 80074f0:	2301      	movs	r3, #1
 80074f2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80074f4:	6013      	str	r3, [r2, #0]
 80074f6:	4ba6      	ldr	r3, [pc, #664]	; (8007790 <_dtoa_r+0x358>)
 80074f8:	9306      	str	r3, [sp, #24]
 80074fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d0e5      	beq.n	80074cc <_dtoa_r+0x94>
 8007500:	4ba4      	ldr	r3, [pc, #656]	; (8007794 <_dtoa_r+0x35c>)
 8007502:	e7e1      	b.n	80074c8 <_dtoa_r+0x90>
 8007504:	ab1a      	add	r3, sp, #104	; 0x68
 8007506:	9301      	str	r3, [sp, #4]
 8007508:	ab1b      	add	r3, sp, #108	; 0x6c
 800750a:	9300      	str	r3, [sp, #0]
 800750c:	9804      	ldr	r0, [sp, #16]
 800750e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007510:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007512:	f001 f9e1 	bl	80088d8 <__d2b>
 8007516:	007a      	lsls	r2, r7, #1
 8007518:	9005      	str	r0, [sp, #20]
 800751a:	0d52      	lsrs	r2, r2, #21
 800751c:	d100      	bne.n	8007520 <_dtoa_r+0xe8>
 800751e:	e07b      	b.n	8007618 <_dtoa_r+0x1e0>
 8007520:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007522:	9617      	str	r6, [sp, #92]	; 0x5c
 8007524:	0319      	lsls	r1, r3, #12
 8007526:	4b9c      	ldr	r3, [pc, #624]	; (8007798 <_dtoa_r+0x360>)
 8007528:	0b09      	lsrs	r1, r1, #12
 800752a:	430b      	orrs	r3, r1
 800752c:	499b      	ldr	r1, [pc, #620]	; (800779c <_dtoa_r+0x364>)
 800752e:	1857      	adds	r7, r2, r1
 8007530:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007532:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007534:	0019      	movs	r1, r3
 8007536:	2200      	movs	r2, #0
 8007538:	4b99      	ldr	r3, [pc, #612]	; (80077a0 <_dtoa_r+0x368>)
 800753a:	f7fa f9d1 	bl	80018e0 <__aeabi_dsub>
 800753e:	4a99      	ldr	r2, [pc, #612]	; (80077a4 <_dtoa_r+0x36c>)
 8007540:	4b99      	ldr	r3, [pc, #612]	; (80077a8 <_dtoa_r+0x370>)
 8007542:	f7f9 ff0b 	bl	800135c <__aeabi_dmul>
 8007546:	4a99      	ldr	r2, [pc, #612]	; (80077ac <_dtoa_r+0x374>)
 8007548:	4b99      	ldr	r3, [pc, #612]	; (80077b0 <_dtoa_r+0x378>)
 800754a:	f7f8 ffad 	bl	80004a8 <__aeabi_dadd>
 800754e:	0004      	movs	r4, r0
 8007550:	0038      	movs	r0, r7
 8007552:	000d      	movs	r5, r1
 8007554:	f7fa fd9a 	bl	800208c <__aeabi_i2d>
 8007558:	4a96      	ldr	r2, [pc, #600]	; (80077b4 <_dtoa_r+0x37c>)
 800755a:	4b97      	ldr	r3, [pc, #604]	; (80077b8 <_dtoa_r+0x380>)
 800755c:	f7f9 fefe 	bl	800135c <__aeabi_dmul>
 8007560:	0002      	movs	r2, r0
 8007562:	000b      	movs	r3, r1
 8007564:	0020      	movs	r0, r4
 8007566:	0029      	movs	r1, r5
 8007568:	f7f8 ff9e 	bl	80004a8 <__aeabi_dadd>
 800756c:	0004      	movs	r4, r0
 800756e:	000d      	movs	r5, r1
 8007570:	f7fa fd56 	bl	8002020 <__aeabi_d2iz>
 8007574:	2200      	movs	r2, #0
 8007576:	9003      	str	r0, [sp, #12]
 8007578:	2300      	movs	r3, #0
 800757a:	0020      	movs	r0, r4
 800757c:	0029      	movs	r1, r5
 800757e:	f7f8 ff6b 	bl	8000458 <__aeabi_dcmplt>
 8007582:	2800      	cmp	r0, #0
 8007584:	d00b      	beq.n	800759e <_dtoa_r+0x166>
 8007586:	9803      	ldr	r0, [sp, #12]
 8007588:	f7fa fd80 	bl	800208c <__aeabi_i2d>
 800758c:	002b      	movs	r3, r5
 800758e:	0022      	movs	r2, r4
 8007590:	f7f8 ff5c 	bl	800044c <__aeabi_dcmpeq>
 8007594:	4243      	negs	r3, r0
 8007596:	4158      	adcs	r0, r3
 8007598:	9b03      	ldr	r3, [sp, #12]
 800759a:	1a1b      	subs	r3, r3, r0
 800759c:	9303      	str	r3, [sp, #12]
 800759e:	2301      	movs	r3, #1
 80075a0:	9316      	str	r3, [sp, #88]	; 0x58
 80075a2:	9b03      	ldr	r3, [sp, #12]
 80075a4:	2b16      	cmp	r3, #22
 80075a6:	d810      	bhi.n	80075ca <_dtoa_r+0x192>
 80075a8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80075aa:	9911      	ldr	r1, [sp, #68]	; 0x44
 80075ac:	9a03      	ldr	r2, [sp, #12]
 80075ae:	4b83      	ldr	r3, [pc, #524]	; (80077bc <_dtoa_r+0x384>)
 80075b0:	00d2      	lsls	r2, r2, #3
 80075b2:	189b      	adds	r3, r3, r2
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	f7f8 ff4e 	bl	8000458 <__aeabi_dcmplt>
 80075bc:	2800      	cmp	r0, #0
 80075be:	d047      	beq.n	8007650 <_dtoa_r+0x218>
 80075c0:	9b03      	ldr	r3, [sp, #12]
 80075c2:	3b01      	subs	r3, #1
 80075c4:	9303      	str	r3, [sp, #12]
 80075c6:	2300      	movs	r3, #0
 80075c8:	9316      	str	r3, [sp, #88]	; 0x58
 80075ca:	2200      	movs	r2, #0
 80075cc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80075ce:	920a      	str	r2, [sp, #40]	; 0x28
 80075d0:	1bdb      	subs	r3, r3, r7
 80075d2:	1e5a      	subs	r2, r3, #1
 80075d4:	d53e      	bpl.n	8007654 <_dtoa_r+0x21c>
 80075d6:	2201      	movs	r2, #1
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	930a      	str	r3, [sp, #40]	; 0x28
 80075dc:	2300      	movs	r3, #0
 80075de:	930c      	str	r3, [sp, #48]	; 0x30
 80075e0:	9b03      	ldr	r3, [sp, #12]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	db38      	blt.n	8007658 <_dtoa_r+0x220>
 80075e6:	9a03      	ldr	r2, [sp, #12]
 80075e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075ea:	4694      	mov	ip, r2
 80075ec:	4463      	add	r3, ip
 80075ee:	930c      	str	r3, [sp, #48]	; 0x30
 80075f0:	2300      	movs	r3, #0
 80075f2:	9213      	str	r2, [sp, #76]	; 0x4c
 80075f4:	930d      	str	r3, [sp, #52]	; 0x34
 80075f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075f8:	2401      	movs	r4, #1
 80075fa:	2b09      	cmp	r3, #9
 80075fc:	d867      	bhi.n	80076ce <_dtoa_r+0x296>
 80075fe:	2b05      	cmp	r3, #5
 8007600:	dd02      	ble.n	8007608 <_dtoa_r+0x1d0>
 8007602:	2400      	movs	r4, #0
 8007604:	3b04      	subs	r3, #4
 8007606:	9322      	str	r3, [sp, #136]	; 0x88
 8007608:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800760a:	1e98      	subs	r0, r3, #2
 800760c:	2803      	cmp	r0, #3
 800760e:	d867      	bhi.n	80076e0 <_dtoa_r+0x2a8>
 8007610:	f7f8 fd82 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007614:	5b383a2b 	.word	0x5b383a2b
 8007618:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800761a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800761c:	18f6      	adds	r6, r6, r3
 800761e:	4b68      	ldr	r3, [pc, #416]	; (80077c0 <_dtoa_r+0x388>)
 8007620:	18f2      	adds	r2, r6, r3
 8007622:	2a20      	cmp	r2, #32
 8007624:	dd0f      	ble.n	8007646 <_dtoa_r+0x20e>
 8007626:	2340      	movs	r3, #64	; 0x40
 8007628:	1a9b      	subs	r3, r3, r2
 800762a:	409f      	lsls	r7, r3
 800762c:	4b65      	ldr	r3, [pc, #404]	; (80077c4 <_dtoa_r+0x38c>)
 800762e:	0038      	movs	r0, r7
 8007630:	18f3      	adds	r3, r6, r3
 8007632:	40dc      	lsrs	r4, r3
 8007634:	4320      	orrs	r0, r4
 8007636:	f7fa fd59 	bl	80020ec <__aeabi_ui2d>
 800763a:	2201      	movs	r2, #1
 800763c:	4b62      	ldr	r3, [pc, #392]	; (80077c8 <_dtoa_r+0x390>)
 800763e:	1e77      	subs	r7, r6, #1
 8007640:	18cb      	adds	r3, r1, r3
 8007642:	9217      	str	r2, [sp, #92]	; 0x5c
 8007644:	e776      	b.n	8007534 <_dtoa_r+0xfc>
 8007646:	2320      	movs	r3, #32
 8007648:	0020      	movs	r0, r4
 800764a:	1a9b      	subs	r3, r3, r2
 800764c:	4098      	lsls	r0, r3
 800764e:	e7f2      	b.n	8007636 <_dtoa_r+0x1fe>
 8007650:	9016      	str	r0, [sp, #88]	; 0x58
 8007652:	e7ba      	b.n	80075ca <_dtoa_r+0x192>
 8007654:	920c      	str	r2, [sp, #48]	; 0x30
 8007656:	e7c3      	b.n	80075e0 <_dtoa_r+0x1a8>
 8007658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800765a:	9a03      	ldr	r2, [sp, #12]
 800765c:	1a9b      	subs	r3, r3, r2
 800765e:	930a      	str	r3, [sp, #40]	; 0x28
 8007660:	4253      	negs	r3, r2
 8007662:	930d      	str	r3, [sp, #52]	; 0x34
 8007664:	2300      	movs	r3, #0
 8007666:	9313      	str	r3, [sp, #76]	; 0x4c
 8007668:	e7c5      	b.n	80075f6 <_dtoa_r+0x1be>
 800766a:	2300      	movs	r3, #0
 800766c:	930f      	str	r3, [sp, #60]	; 0x3c
 800766e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007670:	930b      	str	r3, [sp, #44]	; 0x2c
 8007672:	9307      	str	r3, [sp, #28]
 8007674:	2b00      	cmp	r3, #0
 8007676:	dc13      	bgt.n	80076a0 <_dtoa_r+0x268>
 8007678:	2301      	movs	r3, #1
 800767a:	001a      	movs	r2, r3
 800767c:	930b      	str	r3, [sp, #44]	; 0x2c
 800767e:	9307      	str	r3, [sp, #28]
 8007680:	9223      	str	r2, [sp, #140]	; 0x8c
 8007682:	e00d      	b.n	80076a0 <_dtoa_r+0x268>
 8007684:	2301      	movs	r3, #1
 8007686:	e7f1      	b.n	800766c <_dtoa_r+0x234>
 8007688:	2300      	movs	r3, #0
 800768a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800768c:	930f      	str	r3, [sp, #60]	; 0x3c
 800768e:	4694      	mov	ip, r2
 8007690:	9b03      	ldr	r3, [sp, #12]
 8007692:	4463      	add	r3, ip
 8007694:	930b      	str	r3, [sp, #44]	; 0x2c
 8007696:	3301      	adds	r3, #1
 8007698:	9307      	str	r3, [sp, #28]
 800769a:	2b00      	cmp	r3, #0
 800769c:	dc00      	bgt.n	80076a0 <_dtoa_r+0x268>
 800769e:	2301      	movs	r3, #1
 80076a0:	9a04      	ldr	r2, [sp, #16]
 80076a2:	2100      	movs	r1, #0
 80076a4:	69d0      	ldr	r0, [r2, #28]
 80076a6:	2204      	movs	r2, #4
 80076a8:	0015      	movs	r5, r2
 80076aa:	3514      	adds	r5, #20
 80076ac:	429d      	cmp	r5, r3
 80076ae:	d91b      	bls.n	80076e8 <_dtoa_r+0x2b0>
 80076b0:	6041      	str	r1, [r0, #4]
 80076b2:	9804      	ldr	r0, [sp, #16]
 80076b4:	f000 fdd6 	bl	8008264 <_Balloc>
 80076b8:	9006      	str	r0, [sp, #24]
 80076ba:	2800      	cmp	r0, #0
 80076bc:	d117      	bne.n	80076ee <_dtoa_r+0x2b6>
 80076be:	21b0      	movs	r1, #176	; 0xb0
 80076c0:	4b42      	ldr	r3, [pc, #264]	; (80077cc <_dtoa_r+0x394>)
 80076c2:	482e      	ldr	r0, [pc, #184]	; (800777c <_dtoa_r+0x344>)
 80076c4:	9a06      	ldr	r2, [sp, #24]
 80076c6:	31ff      	adds	r1, #255	; 0xff
 80076c8:	e6cb      	b.n	8007462 <_dtoa_r+0x2a>
 80076ca:	2301      	movs	r3, #1
 80076cc:	e7dd      	b.n	800768a <_dtoa_r+0x252>
 80076ce:	2300      	movs	r3, #0
 80076d0:	940f      	str	r4, [sp, #60]	; 0x3c
 80076d2:	9322      	str	r3, [sp, #136]	; 0x88
 80076d4:	3b01      	subs	r3, #1
 80076d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80076d8:	9307      	str	r3, [sp, #28]
 80076da:	2200      	movs	r2, #0
 80076dc:	3313      	adds	r3, #19
 80076de:	e7cf      	b.n	8007680 <_dtoa_r+0x248>
 80076e0:	2301      	movs	r3, #1
 80076e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80076e4:	3b02      	subs	r3, #2
 80076e6:	e7f6      	b.n	80076d6 <_dtoa_r+0x29e>
 80076e8:	3101      	adds	r1, #1
 80076ea:	0052      	lsls	r2, r2, #1
 80076ec:	e7dc      	b.n	80076a8 <_dtoa_r+0x270>
 80076ee:	9b04      	ldr	r3, [sp, #16]
 80076f0:	9a06      	ldr	r2, [sp, #24]
 80076f2:	69db      	ldr	r3, [r3, #28]
 80076f4:	601a      	str	r2, [r3, #0]
 80076f6:	9b07      	ldr	r3, [sp, #28]
 80076f8:	2b0e      	cmp	r3, #14
 80076fa:	d900      	bls.n	80076fe <_dtoa_r+0x2c6>
 80076fc:	e0e5      	b.n	80078ca <_dtoa_r+0x492>
 80076fe:	2c00      	cmp	r4, #0
 8007700:	d100      	bne.n	8007704 <_dtoa_r+0x2cc>
 8007702:	e0e2      	b.n	80078ca <_dtoa_r+0x492>
 8007704:	9b03      	ldr	r3, [sp, #12]
 8007706:	2b00      	cmp	r3, #0
 8007708:	dd64      	ble.n	80077d4 <_dtoa_r+0x39c>
 800770a:	210f      	movs	r1, #15
 800770c:	9a03      	ldr	r2, [sp, #12]
 800770e:	4b2b      	ldr	r3, [pc, #172]	; (80077bc <_dtoa_r+0x384>)
 8007710:	400a      	ands	r2, r1
 8007712:	00d2      	lsls	r2, r2, #3
 8007714:	189b      	adds	r3, r3, r2
 8007716:	681e      	ldr	r6, [r3, #0]
 8007718:	685f      	ldr	r7, [r3, #4]
 800771a:	9b03      	ldr	r3, [sp, #12]
 800771c:	2402      	movs	r4, #2
 800771e:	111d      	asrs	r5, r3, #4
 8007720:	05db      	lsls	r3, r3, #23
 8007722:	d50a      	bpl.n	800773a <_dtoa_r+0x302>
 8007724:	4b2a      	ldr	r3, [pc, #168]	; (80077d0 <_dtoa_r+0x398>)
 8007726:	400d      	ands	r5, r1
 8007728:	6a1a      	ldr	r2, [r3, #32]
 800772a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800772e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007730:	f7f9 fa1a 	bl	8000b68 <__aeabi_ddiv>
 8007734:	9008      	str	r0, [sp, #32]
 8007736:	9109      	str	r1, [sp, #36]	; 0x24
 8007738:	3401      	adds	r4, #1
 800773a:	4b25      	ldr	r3, [pc, #148]	; (80077d0 <_dtoa_r+0x398>)
 800773c:	930e      	str	r3, [sp, #56]	; 0x38
 800773e:	2d00      	cmp	r5, #0
 8007740:	d108      	bne.n	8007754 <_dtoa_r+0x31c>
 8007742:	9808      	ldr	r0, [sp, #32]
 8007744:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007746:	0032      	movs	r2, r6
 8007748:	003b      	movs	r3, r7
 800774a:	f7f9 fa0d 	bl	8000b68 <__aeabi_ddiv>
 800774e:	9008      	str	r0, [sp, #32]
 8007750:	9109      	str	r1, [sp, #36]	; 0x24
 8007752:	e05a      	b.n	800780a <_dtoa_r+0x3d2>
 8007754:	2301      	movs	r3, #1
 8007756:	421d      	tst	r5, r3
 8007758:	d009      	beq.n	800776e <_dtoa_r+0x336>
 800775a:	18e4      	adds	r4, r4, r3
 800775c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800775e:	0030      	movs	r0, r6
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	0039      	movs	r1, r7
 8007766:	f7f9 fdf9 	bl	800135c <__aeabi_dmul>
 800776a:	0006      	movs	r6, r0
 800776c:	000f      	movs	r7, r1
 800776e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007770:	106d      	asrs	r5, r5, #1
 8007772:	3308      	adds	r3, #8
 8007774:	e7e2      	b.n	800773c <_dtoa_r+0x304>
 8007776:	46c0      	nop			; (mov r8, r8)
 8007778:	080092e5 	.word	0x080092e5
 800777c:	080092fc 	.word	0x080092fc
 8007780:	7ff00000 	.word	0x7ff00000
 8007784:	0000270f 	.word	0x0000270f
 8007788:	080092e1 	.word	0x080092e1
 800778c:	080092e4 	.word	0x080092e4
 8007790:	080092b4 	.word	0x080092b4
 8007794:	080092b5 	.word	0x080092b5
 8007798:	3ff00000 	.word	0x3ff00000
 800779c:	fffffc01 	.word	0xfffffc01
 80077a0:	3ff80000 	.word	0x3ff80000
 80077a4:	636f4361 	.word	0x636f4361
 80077a8:	3fd287a7 	.word	0x3fd287a7
 80077ac:	8b60c8b3 	.word	0x8b60c8b3
 80077b0:	3fc68a28 	.word	0x3fc68a28
 80077b4:	509f79fb 	.word	0x509f79fb
 80077b8:	3fd34413 	.word	0x3fd34413
 80077bc:	080093e8 	.word	0x080093e8
 80077c0:	00000432 	.word	0x00000432
 80077c4:	00000412 	.word	0x00000412
 80077c8:	fe100000 	.word	0xfe100000
 80077cc:	08009354 	.word	0x08009354
 80077d0:	080093c0 	.word	0x080093c0
 80077d4:	9b03      	ldr	r3, [sp, #12]
 80077d6:	2402      	movs	r4, #2
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d016      	beq.n	800780a <_dtoa_r+0x3d2>
 80077dc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80077de:	9911      	ldr	r1, [sp, #68]	; 0x44
 80077e0:	220f      	movs	r2, #15
 80077e2:	425d      	negs	r5, r3
 80077e4:	402a      	ands	r2, r5
 80077e6:	4bdd      	ldr	r3, [pc, #884]	; (8007b5c <_dtoa_r+0x724>)
 80077e8:	00d2      	lsls	r2, r2, #3
 80077ea:	189b      	adds	r3, r3, r2
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	f7f9 fdb4 	bl	800135c <__aeabi_dmul>
 80077f4:	2701      	movs	r7, #1
 80077f6:	2300      	movs	r3, #0
 80077f8:	9008      	str	r0, [sp, #32]
 80077fa:	9109      	str	r1, [sp, #36]	; 0x24
 80077fc:	4ed8      	ldr	r6, [pc, #864]	; (8007b60 <_dtoa_r+0x728>)
 80077fe:	112d      	asrs	r5, r5, #4
 8007800:	2d00      	cmp	r5, #0
 8007802:	d000      	beq.n	8007806 <_dtoa_r+0x3ce>
 8007804:	e091      	b.n	800792a <_dtoa_r+0x4f2>
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1a1      	bne.n	800774e <_dtoa_r+0x316>
 800780a:	9e08      	ldr	r6, [sp, #32]
 800780c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800780e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007810:	2b00      	cmp	r3, #0
 8007812:	d100      	bne.n	8007816 <_dtoa_r+0x3de>
 8007814:	e094      	b.n	8007940 <_dtoa_r+0x508>
 8007816:	2200      	movs	r2, #0
 8007818:	0030      	movs	r0, r6
 800781a:	0039      	movs	r1, r7
 800781c:	4bd1      	ldr	r3, [pc, #836]	; (8007b64 <_dtoa_r+0x72c>)
 800781e:	f7f8 fe1b 	bl	8000458 <__aeabi_dcmplt>
 8007822:	2800      	cmp	r0, #0
 8007824:	d100      	bne.n	8007828 <_dtoa_r+0x3f0>
 8007826:	e08b      	b.n	8007940 <_dtoa_r+0x508>
 8007828:	9b07      	ldr	r3, [sp, #28]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d100      	bne.n	8007830 <_dtoa_r+0x3f8>
 800782e:	e087      	b.n	8007940 <_dtoa_r+0x508>
 8007830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007832:	2b00      	cmp	r3, #0
 8007834:	dd45      	ble.n	80078c2 <_dtoa_r+0x48a>
 8007836:	9b03      	ldr	r3, [sp, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	3b01      	subs	r3, #1
 800783c:	930e      	str	r3, [sp, #56]	; 0x38
 800783e:	0030      	movs	r0, r6
 8007840:	4bc9      	ldr	r3, [pc, #804]	; (8007b68 <_dtoa_r+0x730>)
 8007842:	0039      	movs	r1, r7
 8007844:	f7f9 fd8a 	bl	800135c <__aeabi_dmul>
 8007848:	9008      	str	r0, [sp, #32]
 800784a:	9109      	str	r1, [sp, #36]	; 0x24
 800784c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800784e:	3401      	adds	r4, #1
 8007850:	0020      	movs	r0, r4
 8007852:	9e08      	ldr	r6, [sp, #32]
 8007854:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007856:	9312      	str	r3, [sp, #72]	; 0x48
 8007858:	f7fa fc18 	bl	800208c <__aeabi_i2d>
 800785c:	0032      	movs	r2, r6
 800785e:	003b      	movs	r3, r7
 8007860:	f7f9 fd7c 	bl	800135c <__aeabi_dmul>
 8007864:	2200      	movs	r2, #0
 8007866:	4bc1      	ldr	r3, [pc, #772]	; (8007b6c <_dtoa_r+0x734>)
 8007868:	f7f8 fe1e 	bl	80004a8 <__aeabi_dadd>
 800786c:	4ac0      	ldr	r2, [pc, #768]	; (8007b70 <_dtoa_r+0x738>)
 800786e:	9014      	str	r0, [sp, #80]	; 0x50
 8007870:	9115      	str	r1, [sp, #84]	; 0x54
 8007872:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007874:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8007876:	4694      	mov	ip, r2
 8007878:	9308      	str	r3, [sp, #32]
 800787a:	9409      	str	r4, [sp, #36]	; 0x24
 800787c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800787e:	4463      	add	r3, ip
 8007880:	9318      	str	r3, [sp, #96]	; 0x60
 8007882:	9309      	str	r3, [sp, #36]	; 0x24
 8007884:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007886:	2b00      	cmp	r3, #0
 8007888:	d15e      	bne.n	8007948 <_dtoa_r+0x510>
 800788a:	2200      	movs	r2, #0
 800788c:	4bb9      	ldr	r3, [pc, #740]	; (8007b74 <_dtoa_r+0x73c>)
 800788e:	0030      	movs	r0, r6
 8007890:	0039      	movs	r1, r7
 8007892:	f7fa f825 	bl	80018e0 <__aeabi_dsub>
 8007896:	9a08      	ldr	r2, [sp, #32]
 8007898:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800789a:	0004      	movs	r4, r0
 800789c:	000d      	movs	r5, r1
 800789e:	f7f8 fdef 	bl	8000480 <__aeabi_dcmpgt>
 80078a2:	2800      	cmp	r0, #0
 80078a4:	d000      	beq.n	80078a8 <_dtoa_r+0x470>
 80078a6:	e2b3      	b.n	8007e10 <_dtoa_r+0x9d8>
 80078a8:	48b3      	ldr	r0, [pc, #716]	; (8007b78 <_dtoa_r+0x740>)
 80078aa:	9915      	ldr	r1, [sp, #84]	; 0x54
 80078ac:	4684      	mov	ip, r0
 80078ae:	4461      	add	r1, ip
 80078b0:	000b      	movs	r3, r1
 80078b2:	0020      	movs	r0, r4
 80078b4:	0029      	movs	r1, r5
 80078b6:	9a08      	ldr	r2, [sp, #32]
 80078b8:	f7f8 fdce 	bl	8000458 <__aeabi_dcmplt>
 80078bc:	2800      	cmp	r0, #0
 80078be:	d000      	beq.n	80078c2 <_dtoa_r+0x48a>
 80078c0:	e2a3      	b.n	8007e0a <_dtoa_r+0x9d2>
 80078c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078c4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80078c6:	9308      	str	r3, [sp, #32]
 80078c8:	9409      	str	r4, [sp, #36]	; 0x24
 80078ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	da00      	bge.n	80078d2 <_dtoa_r+0x49a>
 80078d0:	e179      	b.n	8007bc6 <_dtoa_r+0x78e>
 80078d2:	9a03      	ldr	r2, [sp, #12]
 80078d4:	2a0e      	cmp	r2, #14
 80078d6:	dd00      	ble.n	80078da <_dtoa_r+0x4a2>
 80078d8:	e175      	b.n	8007bc6 <_dtoa_r+0x78e>
 80078da:	4ba0      	ldr	r3, [pc, #640]	; (8007b5c <_dtoa_r+0x724>)
 80078dc:	00d2      	lsls	r2, r2, #3
 80078de:	189b      	adds	r3, r3, r2
 80078e0:	681e      	ldr	r6, [r3, #0]
 80078e2:	685f      	ldr	r7, [r3, #4]
 80078e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	db00      	blt.n	80078ec <_dtoa_r+0x4b4>
 80078ea:	e0e5      	b.n	8007ab8 <_dtoa_r+0x680>
 80078ec:	9b07      	ldr	r3, [sp, #28]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	dd00      	ble.n	80078f4 <_dtoa_r+0x4bc>
 80078f2:	e0e1      	b.n	8007ab8 <_dtoa_r+0x680>
 80078f4:	d000      	beq.n	80078f8 <_dtoa_r+0x4c0>
 80078f6:	e288      	b.n	8007e0a <_dtoa_r+0x9d2>
 80078f8:	2200      	movs	r2, #0
 80078fa:	0030      	movs	r0, r6
 80078fc:	0039      	movs	r1, r7
 80078fe:	4b9d      	ldr	r3, [pc, #628]	; (8007b74 <_dtoa_r+0x73c>)
 8007900:	f7f9 fd2c 	bl	800135c <__aeabi_dmul>
 8007904:	9a08      	ldr	r2, [sp, #32]
 8007906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007908:	f7f8 fdc4 	bl	8000494 <__aeabi_dcmpge>
 800790c:	9e07      	ldr	r6, [sp, #28]
 800790e:	0037      	movs	r7, r6
 8007910:	2800      	cmp	r0, #0
 8007912:	d000      	beq.n	8007916 <_dtoa_r+0x4de>
 8007914:	e25f      	b.n	8007dd6 <_dtoa_r+0x99e>
 8007916:	9b06      	ldr	r3, [sp, #24]
 8007918:	9a06      	ldr	r2, [sp, #24]
 800791a:	3301      	adds	r3, #1
 800791c:	9308      	str	r3, [sp, #32]
 800791e:	2331      	movs	r3, #49	; 0x31
 8007920:	7013      	strb	r3, [r2, #0]
 8007922:	9b03      	ldr	r3, [sp, #12]
 8007924:	3301      	adds	r3, #1
 8007926:	9303      	str	r3, [sp, #12]
 8007928:	e25a      	b.n	8007de0 <_dtoa_r+0x9a8>
 800792a:	423d      	tst	r5, r7
 800792c:	d005      	beq.n	800793a <_dtoa_r+0x502>
 800792e:	6832      	ldr	r2, [r6, #0]
 8007930:	6873      	ldr	r3, [r6, #4]
 8007932:	f7f9 fd13 	bl	800135c <__aeabi_dmul>
 8007936:	003b      	movs	r3, r7
 8007938:	3401      	adds	r4, #1
 800793a:	106d      	asrs	r5, r5, #1
 800793c:	3608      	adds	r6, #8
 800793e:	e75f      	b.n	8007800 <_dtoa_r+0x3c8>
 8007940:	9b03      	ldr	r3, [sp, #12]
 8007942:	930e      	str	r3, [sp, #56]	; 0x38
 8007944:	9b07      	ldr	r3, [sp, #28]
 8007946:	e783      	b.n	8007850 <_dtoa_r+0x418>
 8007948:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800794a:	4b84      	ldr	r3, [pc, #528]	; (8007b5c <_dtoa_r+0x724>)
 800794c:	3a01      	subs	r2, #1
 800794e:	00d2      	lsls	r2, r2, #3
 8007950:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007952:	189b      	adds	r3, r3, r2
 8007954:	9c08      	ldr	r4, [sp, #32]
 8007956:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	2900      	cmp	r1, #0
 800795e:	d051      	beq.n	8007a04 <_dtoa_r+0x5cc>
 8007960:	2000      	movs	r0, #0
 8007962:	4986      	ldr	r1, [pc, #536]	; (8007b7c <_dtoa_r+0x744>)
 8007964:	f7f9 f900 	bl	8000b68 <__aeabi_ddiv>
 8007968:	0022      	movs	r2, r4
 800796a:	002b      	movs	r3, r5
 800796c:	f7f9 ffb8 	bl	80018e0 <__aeabi_dsub>
 8007970:	9a06      	ldr	r2, [sp, #24]
 8007972:	0004      	movs	r4, r0
 8007974:	4694      	mov	ip, r2
 8007976:	000d      	movs	r5, r1
 8007978:	9b06      	ldr	r3, [sp, #24]
 800797a:	9314      	str	r3, [sp, #80]	; 0x50
 800797c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800797e:	4463      	add	r3, ip
 8007980:	9318      	str	r3, [sp, #96]	; 0x60
 8007982:	0039      	movs	r1, r7
 8007984:	0030      	movs	r0, r6
 8007986:	f7fa fb4b 	bl	8002020 <__aeabi_d2iz>
 800798a:	9012      	str	r0, [sp, #72]	; 0x48
 800798c:	f7fa fb7e 	bl	800208c <__aeabi_i2d>
 8007990:	0002      	movs	r2, r0
 8007992:	000b      	movs	r3, r1
 8007994:	0030      	movs	r0, r6
 8007996:	0039      	movs	r1, r7
 8007998:	f7f9 ffa2 	bl	80018e0 <__aeabi_dsub>
 800799c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800799e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80079a0:	3301      	adds	r3, #1
 80079a2:	9308      	str	r3, [sp, #32]
 80079a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079a6:	0006      	movs	r6, r0
 80079a8:	3330      	adds	r3, #48	; 0x30
 80079aa:	7013      	strb	r3, [r2, #0]
 80079ac:	0022      	movs	r2, r4
 80079ae:	002b      	movs	r3, r5
 80079b0:	000f      	movs	r7, r1
 80079b2:	f7f8 fd51 	bl	8000458 <__aeabi_dcmplt>
 80079b6:	2800      	cmp	r0, #0
 80079b8:	d174      	bne.n	8007aa4 <_dtoa_r+0x66c>
 80079ba:	0032      	movs	r2, r6
 80079bc:	003b      	movs	r3, r7
 80079be:	2000      	movs	r0, #0
 80079c0:	4968      	ldr	r1, [pc, #416]	; (8007b64 <_dtoa_r+0x72c>)
 80079c2:	f7f9 ff8d 	bl	80018e0 <__aeabi_dsub>
 80079c6:	0022      	movs	r2, r4
 80079c8:	002b      	movs	r3, r5
 80079ca:	f7f8 fd45 	bl	8000458 <__aeabi_dcmplt>
 80079ce:	2800      	cmp	r0, #0
 80079d0:	d000      	beq.n	80079d4 <_dtoa_r+0x59c>
 80079d2:	e0d7      	b.n	8007b84 <_dtoa_r+0x74c>
 80079d4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80079d6:	9a08      	ldr	r2, [sp, #32]
 80079d8:	4293      	cmp	r3, r2
 80079da:	d100      	bne.n	80079de <_dtoa_r+0x5a6>
 80079dc:	e771      	b.n	80078c2 <_dtoa_r+0x48a>
 80079de:	2200      	movs	r2, #0
 80079e0:	0020      	movs	r0, r4
 80079e2:	0029      	movs	r1, r5
 80079e4:	4b60      	ldr	r3, [pc, #384]	; (8007b68 <_dtoa_r+0x730>)
 80079e6:	f7f9 fcb9 	bl	800135c <__aeabi_dmul>
 80079ea:	4b5f      	ldr	r3, [pc, #380]	; (8007b68 <_dtoa_r+0x730>)
 80079ec:	0004      	movs	r4, r0
 80079ee:	000d      	movs	r5, r1
 80079f0:	0030      	movs	r0, r6
 80079f2:	0039      	movs	r1, r7
 80079f4:	2200      	movs	r2, #0
 80079f6:	f7f9 fcb1 	bl	800135c <__aeabi_dmul>
 80079fa:	9b08      	ldr	r3, [sp, #32]
 80079fc:	0006      	movs	r6, r0
 80079fe:	000f      	movs	r7, r1
 8007a00:	9314      	str	r3, [sp, #80]	; 0x50
 8007a02:	e7be      	b.n	8007982 <_dtoa_r+0x54a>
 8007a04:	0020      	movs	r0, r4
 8007a06:	0029      	movs	r1, r5
 8007a08:	f7f9 fca8 	bl	800135c <__aeabi_dmul>
 8007a0c:	9a06      	ldr	r2, [sp, #24]
 8007a0e:	9b06      	ldr	r3, [sp, #24]
 8007a10:	4694      	mov	ip, r2
 8007a12:	9308      	str	r3, [sp, #32]
 8007a14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a16:	9014      	str	r0, [sp, #80]	; 0x50
 8007a18:	9115      	str	r1, [sp, #84]	; 0x54
 8007a1a:	4463      	add	r3, ip
 8007a1c:	9319      	str	r3, [sp, #100]	; 0x64
 8007a1e:	0030      	movs	r0, r6
 8007a20:	0039      	movs	r1, r7
 8007a22:	f7fa fafd 	bl	8002020 <__aeabi_d2iz>
 8007a26:	9018      	str	r0, [sp, #96]	; 0x60
 8007a28:	f7fa fb30 	bl	800208c <__aeabi_i2d>
 8007a2c:	0002      	movs	r2, r0
 8007a2e:	000b      	movs	r3, r1
 8007a30:	0030      	movs	r0, r6
 8007a32:	0039      	movs	r1, r7
 8007a34:	f7f9 ff54 	bl	80018e0 <__aeabi_dsub>
 8007a38:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8007a3a:	9b08      	ldr	r3, [sp, #32]
 8007a3c:	3630      	adds	r6, #48	; 0x30
 8007a3e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007a40:	701e      	strb	r6, [r3, #0]
 8007a42:	3301      	adds	r3, #1
 8007a44:	0004      	movs	r4, r0
 8007a46:	000d      	movs	r5, r1
 8007a48:	9308      	str	r3, [sp, #32]
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d12d      	bne.n	8007aaa <_dtoa_r+0x672>
 8007a4e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8007a50:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007a52:	9a06      	ldr	r2, [sp, #24]
 8007a54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a56:	4694      	mov	ip, r2
 8007a58:	4463      	add	r3, ip
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	9308      	str	r3, [sp, #32]
 8007a5e:	4b47      	ldr	r3, [pc, #284]	; (8007b7c <_dtoa_r+0x744>)
 8007a60:	f7f8 fd22 	bl	80004a8 <__aeabi_dadd>
 8007a64:	0002      	movs	r2, r0
 8007a66:	000b      	movs	r3, r1
 8007a68:	0020      	movs	r0, r4
 8007a6a:	0029      	movs	r1, r5
 8007a6c:	f7f8 fd08 	bl	8000480 <__aeabi_dcmpgt>
 8007a70:	2800      	cmp	r0, #0
 8007a72:	d000      	beq.n	8007a76 <_dtoa_r+0x63e>
 8007a74:	e086      	b.n	8007b84 <_dtoa_r+0x74c>
 8007a76:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007a78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a7a:	2000      	movs	r0, #0
 8007a7c:	493f      	ldr	r1, [pc, #252]	; (8007b7c <_dtoa_r+0x744>)
 8007a7e:	f7f9 ff2f 	bl	80018e0 <__aeabi_dsub>
 8007a82:	0002      	movs	r2, r0
 8007a84:	000b      	movs	r3, r1
 8007a86:	0020      	movs	r0, r4
 8007a88:	0029      	movs	r1, r5
 8007a8a:	f7f8 fce5 	bl	8000458 <__aeabi_dcmplt>
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	d100      	bne.n	8007a94 <_dtoa_r+0x65c>
 8007a92:	e716      	b.n	80078c2 <_dtoa_r+0x48a>
 8007a94:	9b08      	ldr	r3, [sp, #32]
 8007a96:	001a      	movs	r2, r3
 8007a98:	3a01      	subs	r2, #1
 8007a9a:	9208      	str	r2, [sp, #32]
 8007a9c:	7812      	ldrb	r2, [r2, #0]
 8007a9e:	2a30      	cmp	r2, #48	; 0x30
 8007aa0:	d0f8      	beq.n	8007a94 <_dtoa_r+0x65c>
 8007aa2:	9308      	str	r3, [sp, #32]
 8007aa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007aa6:	9303      	str	r3, [sp, #12]
 8007aa8:	e046      	b.n	8007b38 <_dtoa_r+0x700>
 8007aaa:	2200      	movs	r2, #0
 8007aac:	4b2e      	ldr	r3, [pc, #184]	; (8007b68 <_dtoa_r+0x730>)
 8007aae:	f7f9 fc55 	bl	800135c <__aeabi_dmul>
 8007ab2:	0006      	movs	r6, r0
 8007ab4:	000f      	movs	r7, r1
 8007ab6:	e7b2      	b.n	8007a1e <_dtoa_r+0x5e6>
 8007ab8:	9b06      	ldr	r3, [sp, #24]
 8007aba:	9a06      	ldr	r2, [sp, #24]
 8007abc:	930a      	str	r3, [sp, #40]	; 0x28
 8007abe:	9b07      	ldr	r3, [sp, #28]
 8007ac0:	9c08      	ldr	r4, [sp, #32]
 8007ac2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	189b      	adds	r3, r3, r2
 8007ac8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007aca:	0032      	movs	r2, r6
 8007acc:	003b      	movs	r3, r7
 8007ace:	0020      	movs	r0, r4
 8007ad0:	0029      	movs	r1, r5
 8007ad2:	f7f9 f849 	bl	8000b68 <__aeabi_ddiv>
 8007ad6:	f7fa faa3 	bl	8002020 <__aeabi_d2iz>
 8007ada:	9007      	str	r0, [sp, #28]
 8007adc:	f7fa fad6 	bl	800208c <__aeabi_i2d>
 8007ae0:	0032      	movs	r2, r6
 8007ae2:	003b      	movs	r3, r7
 8007ae4:	f7f9 fc3a 	bl	800135c <__aeabi_dmul>
 8007ae8:	0002      	movs	r2, r0
 8007aea:	000b      	movs	r3, r1
 8007aec:	0020      	movs	r0, r4
 8007aee:	0029      	movs	r1, r5
 8007af0:	f7f9 fef6 	bl	80018e0 <__aeabi_dsub>
 8007af4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007af6:	001a      	movs	r2, r3
 8007af8:	3201      	adds	r2, #1
 8007afa:	920a      	str	r2, [sp, #40]	; 0x28
 8007afc:	9208      	str	r2, [sp, #32]
 8007afe:	9a07      	ldr	r2, [sp, #28]
 8007b00:	3230      	adds	r2, #48	; 0x30
 8007b02:	701a      	strb	r2, [r3, #0]
 8007b04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d14f      	bne.n	8007baa <_dtoa_r+0x772>
 8007b0a:	0002      	movs	r2, r0
 8007b0c:	000b      	movs	r3, r1
 8007b0e:	f7f8 fccb 	bl	80004a8 <__aeabi_dadd>
 8007b12:	0032      	movs	r2, r6
 8007b14:	003b      	movs	r3, r7
 8007b16:	0004      	movs	r4, r0
 8007b18:	000d      	movs	r5, r1
 8007b1a:	f7f8 fcb1 	bl	8000480 <__aeabi_dcmpgt>
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	d12e      	bne.n	8007b80 <_dtoa_r+0x748>
 8007b22:	0032      	movs	r2, r6
 8007b24:	003b      	movs	r3, r7
 8007b26:	0020      	movs	r0, r4
 8007b28:	0029      	movs	r1, r5
 8007b2a:	f7f8 fc8f 	bl	800044c <__aeabi_dcmpeq>
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	d002      	beq.n	8007b38 <_dtoa_r+0x700>
 8007b32:	9b07      	ldr	r3, [sp, #28]
 8007b34:	07de      	lsls	r6, r3, #31
 8007b36:	d423      	bmi.n	8007b80 <_dtoa_r+0x748>
 8007b38:	9905      	ldr	r1, [sp, #20]
 8007b3a:	9804      	ldr	r0, [sp, #16]
 8007b3c:	f000 fbd6 	bl	80082ec <_Bfree>
 8007b40:	2300      	movs	r3, #0
 8007b42:	9a08      	ldr	r2, [sp, #32]
 8007b44:	7013      	strb	r3, [r2, #0]
 8007b46:	9b03      	ldr	r3, [sp, #12]
 8007b48:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	6013      	str	r3, [r2, #0]
 8007b4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d100      	bne.n	8007b56 <_dtoa_r+0x71e>
 8007b54:	e4ba      	b.n	80074cc <_dtoa_r+0x94>
 8007b56:	9a08      	ldr	r2, [sp, #32]
 8007b58:	601a      	str	r2, [r3, #0]
 8007b5a:	e4b7      	b.n	80074cc <_dtoa_r+0x94>
 8007b5c:	080093e8 	.word	0x080093e8
 8007b60:	080093c0 	.word	0x080093c0
 8007b64:	3ff00000 	.word	0x3ff00000
 8007b68:	40240000 	.word	0x40240000
 8007b6c:	401c0000 	.word	0x401c0000
 8007b70:	fcc00000 	.word	0xfcc00000
 8007b74:	40140000 	.word	0x40140000
 8007b78:	7cc00000 	.word	0x7cc00000
 8007b7c:	3fe00000 	.word	0x3fe00000
 8007b80:	9b03      	ldr	r3, [sp, #12]
 8007b82:	930e      	str	r3, [sp, #56]	; 0x38
 8007b84:	9b08      	ldr	r3, [sp, #32]
 8007b86:	9308      	str	r3, [sp, #32]
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	781a      	ldrb	r2, [r3, #0]
 8007b8c:	2a39      	cmp	r2, #57	; 0x39
 8007b8e:	d108      	bne.n	8007ba2 <_dtoa_r+0x76a>
 8007b90:	9a06      	ldr	r2, [sp, #24]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d1f7      	bne.n	8007b86 <_dtoa_r+0x74e>
 8007b96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b98:	9906      	ldr	r1, [sp, #24]
 8007b9a:	3201      	adds	r2, #1
 8007b9c:	920e      	str	r2, [sp, #56]	; 0x38
 8007b9e:	2230      	movs	r2, #48	; 0x30
 8007ba0:	700a      	strb	r2, [r1, #0]
 8007ba2:	781a      	ldrb	r2, [r3, #0]
 8007ba4:	3201      	adds	r2, #1
 8007ba6:	701a      	strb	r2, [r3, #0]
 8007ba8:	e77c      	b.n	8007aa4 <_dtoa_r+0x66c>
 8007baa:	2200      	movs	r2, #0
 8007bac:	4ba9      	ldr	r3, [pc, #676]	; (8007e54 <_dtoa_r+0xa1c>)
 8007bae:	f7f9 fbd5 	bl	800135c <__aeabi_dmul>
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	0004      	movs	r4, r0
 8007bb8:	000d      	movs	r5, r1
 8007bba:	f7f8 fc47 	bl	800044c <__aeabi_dcmpeq>
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	d100      	bne.n	8007bc4 <_dtoa_r+0x78c>
 8007bc2:	e782      	b.n	8007aca <_dtoa_r+0x692>
 8007bc4:	e7b8      	b.n	8007b38 <_dtoa_r+0x700>
 8007bc6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8007bc8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007bca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007bcc:	2f00      	cmp	r7, #0
 8007bce:	d012      	beq.n	8007bf6 <_dtoa_r+0x7be>
 8007bd0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007bd2:	2a01      	cmp	r2, #1
 8007bd4:	dc6e      	bgt.n	8007cb4 <_dtoa_r+0x87c>
 8007bd6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007bd8:	2a00      	cmp	r2, #0
 8007bda:	d065      	beq.n	8007ca8 <_dtoa_r+0x870>
 8007bdc:	4a9e      	ldr	r2, [pc, #632]	; (8007e58 <_dtoa_r+0xa20>)
 8007bde:	189b      	adds	r3, r3, r2
 8007be0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007be2:	2101      	movs	r1, #1
 8007be4:	18d2      	adds	r2, r2, r3
 8007be6:	920a      	str	r2, [sp, #40]	; 0x28
 8007be8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bea:	9804      	ldr	r0, [sp, #16]
 8007bec:	18d3      	adds	r3, r2, r3
 8007bee:	930c      	str	r3, [sp, #48]	; 0x30
 8007bf0:	f000 fc2c 	bl	800844c <__i2b>
 8007bf4:	0007      	movs	r7, r0
 8007bf6:	2c00      	cmp	r4, #0
 8007bf8:	d00e      	beq.n	8007c18 <_dtoa_r+0x7e0>
 8007bfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	dd0b      	ble.n	8007c18 <_dtoa_r+0x7e0>
 8007c00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c02:	0023      	movs	r3, r4
 8007c04:	4294      	cmp	r4, r2
 8007c06:	dd00      	ble.n	8007c0a <_dtoa_r+0x7d2>
 8007c08:	0013      	movs	r3, r2
 8007c0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c0c:	1ae4      	subs	r4, r4, r3
 8007c0e:	1ad2      	subs	r2, r2, r3
 8007c10:	920a      	str	r2, [sp, #40]	; 0x28
 8007c12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	930c      	str	r3, [sp, #48]	; 0x30
 8007c18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d01e      	beq.n	8007c5c <_dtoa_r+0x824>
 8007c1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d05c      	beq.n	8007cde <_dtoa_r+0x8a6>
 8007c24:	2d00      	cmp	r5, #0
 8007c26:	dd10      	ble.n	8007c4a <_dtoa_r+0x812>
 8007c28:	0039      	movs	r1, r7
 8007c2a:	002a      	movs	r2, r5
 8007c2c:	9804      	ldr	r0, [sp, #16]
 8007c2e:	f000 fcd5 	bl	80085dc <__pow5mult>
 8007c32:	9a05      	ldr	r2, [sp, #20]
 8007c34:	0001      	movs	r1, r0
 8007c36:	0007      	movs	r7, r0
 8007c38:	9804      	ldr	r0, [sp, #16]
 8007c3a:	f000 fc1f 	bl	800847c <__multiply>
 8007c3e:	0006      	movs	r6, r0
 8007c40:	9905      	ldr	r1, [sp, #20]
 8007c42:	9804      	ldr	r0, [sp, #16]
 8007c44:	f000 fb52 	bl	80082ec <_Bfree>
 8007c48:	9605      	str	r6, [sp, #20]
 8007c4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c4c:	1b5a      	subs	r2, r3, r5
 8007c4e:	42ab      	cmp	r3, r5
 8007c50:	d004      	beq.n	8007c5c <_dtoa_r+0x824>
 8007c52:	9905      	ldr	r1, [sp, #20]
 8007c54:	9804      	ldr	r0, [sp, #16]
 8007c56:	f000 fcc1 	bl	80085dc <__pow5mult>
 8007c5a:	9005      	str	r0, [sp, #20]
 8007c5c:	2101      	movs	r1, #1
 8007c5e:	9804      	ldr	r0, [sp, #16]
 8007c60:	f000 fbf4 	bl	800844c <__i2b>
 8007c64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c66:	0006      	movs	r6, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	dd3a      	ble.n	8007ce2 <_dtoa_r+0x8aa>
 8007c6c:	001a      	movs	r2, r3
 8007c6e:	0001      	movs	r1, r0
 8007c70:	9804      	ldr	r0, [sp, #16]
 8007c72:	f000 fcb3 	bl	80085dc <__pow5mult>
 8007c76:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c78:	0006      	movs	r6, r0
 8007c7a:	2500      	movs	r5, #0
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	dc38      	bgt.n	8007cf2 <_dtoa_r+0x8ba>
 8007c80:	2500      	movs	r5, #0
 8007c82:	9b08      	ldr	r3, [sp, #32]
 8007c84:	42ab      	cmp	r3, r5
 8007c86:	d130      	bne.n	8007cea <_dtoa_r+0x8b2>
 8007c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c8a:	031b      	lsls	r3, r3, #12
 8007c8c:	42ab      	cmp	r3, r5
 8007c8e:	d12c      	bne.n	8007cea <_dtoa_r+0x8b2>
 8007c90:	4b72      	ldr	r3, [pc, #456]	; (8007e5c <_dtoa_r+0xa24>)
 8007c92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c94:	4213      	tst	r3, r2
 8007c96:	d028      	beq.n	8007cea <_dtoa_r+0x8b2>
 8007c98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c9a:	3501      	adds	r5, #1
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	930a      	str	r3, [sp, #40]	; 0x28
 8007ca0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	930c      	str	r3, [sp, #48]	; 0x30
 8007ca6:	e020      	b.n	8007cea <_dtoa_r+0x8b2>
 8007ca8:	2336      	movs	r3, #54	; 0x36
 8007caa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007cac:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007cae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007cb0:	1a9b      	subs	r3, r3, r2
 8007cb2:	e795      	b.n	8007be0 <_dtoa_r+0x7a8>
 8007cb4:	9b07      	ldr	r3, [sp, #28]
 8007cb6:	1e5d      	subs	r5, r3, #1
 8007cb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cba:	42ab      	cmp	r3, r5
 8007cbc:	db07      	blt.n	8007cce <_dtoa_r+0x896>
 8007cbe:	1b5d      	subs	r5, r3, r5
 8007cc0:	9b07      	ldr	r3, [sp, #28]
 8007cc2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	da8b      	bge.n	8007be0 <_dtoa_r+0x7a8>
 8007cc8:	1ae4      	subs	r4, r4, r3
 8007cca:	2300      	movs	r3, #0
 8007ccc:	e788      	b.n	8007be0 <_dtoa_r+0x7a8>
 8007cce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007cd2:	1aeb      	subs	r3, r5, r3
 8007cd4:	18d3      	adds	r3, r2, r3
 8007cd6:	950d      	str	r5, [sp, #52]	; 0x34
 8007cd8:	9313      	str	r3, [sp, #76]	; 0x4c
 8007cda:	2500      	movs	r5, #0
 8007cdc:	e7f0      	b.n	8007cc0 <_dtoa_r+0x888>
 8007cde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ce0:	e7b7      	b.n	8007c52 <_dtoa_r+0x81a>
 8007ce2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ce4:	2500      	movs	r5, #0
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	ddca      	ble.n	8007c80 <_dtoa_r+0x848>
 8007cea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007cec:	2001      	movs	r0, #1
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d008      	beq.n	8007d04 <_dtoa_r+0x8cc>
 8007cf2:	6933      	ldr	r3, [r6, #16]
 8007cf4:	3303      	adds	r3, #3
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	18f3      	adds	r3, r6, r3
 8007cfa:	6858      	ldr	r0, [r3, #4]
 8007cfc:	f000 fb5e 	bl	80083bc <__hi0bits>
 8007d00:	2320      	movs	r3, #32
 8007d02:	1a18      	subs	r0, r3, r0
 8007d04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d06:	1818      	adds	r0, r3, r0
 8007d08:	0002      	movs	r2, r0
 8007d0a:	231f      	movs	r3, #31
 8007d0c:	401a      	ands	r2, r3
 8007d0e:	4218      	tst	r0, r3
 8007d10:	d047      	beq.n	8007da2 <_dtoa_r+0x96a>
 8007d12:	3301      	adds	r3, #1
 8007d14:	1a9b      	subs	r3, r3, r2
 8007d16:	2b04      	cmp	r3, #4
 8007d18:	dd3f      	ble.n	8007d9a <_dtoa_r+0x962>
 8007d1a:	231c      	movs	r3, #28
 8007d1c:	1a9b      	subs	r3, r3, r2
 8007d1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d20:	18e4      	adds	r4, r4, r3
 8007d22:	18d2      	adds	r2, r2, r3
 8007d24:	920a      	str	r2, [sp, #40]	; 0x28
 8007d26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d28:	18d3      	adds	r3, r2, r3
 8007d2a:	930c      	str	r3, [sp, #48]	; 0x30
 8007d2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	dd05      	ble.n	8007d3e <_dtoa_r+0x906>
 8007d32:	001a      	movs	r2, r3
 8007d34:	9905      	ldr	r1, [sp, #20]
 8007d36:	9804      	ldr	r0, [sp, #16]
 8007d38:	f000 fcac 	bl	8008694 <__lshift>
 8007d3c:	9005      	str	r0, [sp, #20]
 8007d3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	dd05      	ble.n	8007d50 <_dtoa_r+0x918>
 8007d44:	0031      	movs	r1, r6
 8007d46:	001a      	movs	r2, r3
 8007d48:	9804      	ldr	r0, [sp, #16]
 8007d4a:	f000 fca3 	bl	8008694 <__lshift>
 8007d4e:	0006      	movs	r6, r0
 8007d50:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d027      	beq.n	8007da6 <_dtoa_r+0x96e>
 8007d56:	0031      	movs	r1, r6
 8007d58:	9805      	ldr	r0, [sp, #20]
 8007d5a:	f000 fd09 	bl	8008770 <__mcmp>
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	da21      	bge.n	8007da6 <_dtoa_r+0x96e>
 8007d62:	9b03      	ldr	r3, [sp, #12]
 8007d64:	220a      	movs	r2, #10
 8007d66:	3b01      	subs	r3, #1
 8007d68:	9303      	str	r3, [sp, #12]
 8007d6a:	9905      	ldr	r1, [sp, #20]
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	9804      	ldr	r0, [sp, #16]
 8007d70:	f000 fae0 	bl	8008334 <__multadd>
 8007d74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d76:	9005      	str	r0, [sp, #20]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d100      	bne.n	8007d7e <_dtoa_r+0x946>
 8007d7c:	e15d      	b.n	800803a <_dtoa_r+0xc02>
 8007d7e:	2300      	movs	r3, #0
 8007d80:	0039      	movs	r1, r7
 8007d82:	220a      	movs	r2, #10
 8007d84:	9804      	ldr	r0, [sp, #16]
 8007d86:	f000 fad5 	bl	8008334 <__multadd>
 8007d8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d8c:	0007      	movs	r7, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	dc49      	bgt.n	8007e26 <_dtoa_r+0x9ee>
 8007d92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d94:	2b02      	cmp	r3, #2
 8007d96:	dc0e      	bgt.n	8007db6 <_dtoa_r+0x97e>
 8007d98:	e045      	b.n	8007e26 <_dtoa_r+0x9ee>
 8007d9a:	2b04      	cmp	r3, #4
 8007d9c:	d0c6      	beq.n	8007d2c <_dtoa_r+0x8f4>
 8007d9e:	331c      	adds	r3, #28
 8007da0:	e7bd      	b.n	8007d1e <_dtoa_r+0x8e6>
 8007da2:	0013      	movs	r3, r2
 8007da4:	e7fb      	b.n	8007d9e <_dtoa_r+0x966>
 8007da6:	9b07      	ldr	r3, [sp, #28]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	dc36      	bgt.n	8007e1a <_dtoa_r+0x9e2>
 8007dac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	dd33      	ble.n	8007e1a <_dtoa_r+0x9e2>
 8007db2:	9b07      	ldr	r3, [sp, #28]
 8007db4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007db6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d10c      	bne.n	8007dd6 <_dtoa_r+0x99e>
 8007dbc:	0031      	movs	r1, r6
 8007dbe:	2205      	movs	r2, #5
 8007dc0:	9804      	ldr	r0, [sp, #16]
 8007dc2:	f000 fab7 	bl	8008334 <__multadd>
 8007dc6:	0006      	movs	r6, r0
 8007dc8:	0001      	movs	r1, r0
 8007dca:	9805      	ldr	r0, [sp, #20]
 8007dcc:	f000 fcd0 	bl	8008770 <__mcmp>
 8007dd0:	2800      	cmp	r0, #0
 8007dd2:	dd00      	ble.n	8007dd6 <_dtoa_r+0x99e>
 8007dd4:	e59f      	b.n	8007916 <_dtoa_r+0x4de>
 8007dd6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007dd8:	43db      	mvns	r3, r3
 8007dda:	9303      	str	r3, [sp, #12]
 8007ddc:	9b06      	ldr	r3, [sp, #24]
 8007dde:	9308      	str	r3, [sp, #32]
 8007de0:	2500      	movs	r5, #0
 8007de2:	0031      	movs	r1, r6
 8007de4:	9804      	ldr	r0, [sp, #16]
 8007de6:	f000 fa81 	bl	80082ec <_Bfree>
 8007dea:	2f00      	cmp	r7, #0
 8007dec:	d100      	bne.n	8007df0 <_dtoa_r+0x9b8>
 8007dee:	e6a3      	b.n	8007b38 <_dtoa_r+0x700>
 8007df0:	2d00      	cmp	r5, #0
 8007df2:	d005      	beq.n	8007e00 <_dtoa_r+0x9c8>
 8007df4:	42bd      	cmp	r5, r7
 8007df6:	d003      	beq.n	8007e00 <_dtoa_r+0x9c8>
 8007df8:	0029      	movs	r1, r5
 8007dfa:	9804      	ldr	r0, [sp, #16]
 8007dfc:	f000 fa76 	bl	80082ec <_Bfree>
 8007e00:	0039      	movs	r1, r7
 8007e02:	9804      	ldr	r0, [sp, #16]
 8007e04:	f000 fa72 	bl	80082ec <_Bfree>
 8007e08:	e696      	b.n	8007b38 <_dtoa_r+0x700>
 8007e0a:	2600      	movs	r6, #0
 8007e0c:	0037      	movs	r7, r6
 8007e0e:	e7e2      	b.n	8007dd6 <_dtoa_r+0x99e>
 8007e10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e12:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8007e14:	9303      	str	r3, [sp, #12]
 8007e16:	0037      	movs	r7, r6
 8007e18:	e57d      	b.n	8007916 <_dtoa_r+0x4de>
 8007e1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d100      	bne.n	8007e22 <_dtoa_r+0x9ea>
 8007e20:	e0c3      	b.n	8007faa <_dtoa_r+0xb72>
 8007e22:	9b07      	ldr	r3, [sp, #28]
 8007e24:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e26:	2c00      	cmp	r4, #0
 8007e28:	dd05      	ble.n	8007e36 <_dtoa_r+0x9fe>
 8007e2a:	0039      	movs	r1, r7
 8007e2c:	0022      	movs	r2, r4
 8007e2e:	9804      	ldr	r0, [sp, #16]
 8007e30:	f000 fc30 	bl	8008694 <__lshift>
 8007e34:	0007      	movs	r7, r0
 8007e36:	0038      	movs	r0, r7
 8007e38:	2d00      	cmp	r5, #0
 8007e3a:	d024      	beq.n	8007e86 <_dtoa_r+0xa4e>
 8007e3c:	6879      	ldr	r1, [r7, #4]
 8007e3e:	9804      	ldr	r0, [sp, #16]
 8007e40:	f000 fa10 	bl	8008264 <_Balloc>
 8007e44:	1e04      	subs	r4, r0, #0
 8007e46:	d111      	bne.n	8007e6c <_dtoa_r+0xa34>
 8007e48:	0022      	movs	r2, r4
 8007e4a:	4b05      	ldr	r3, [pc, #20]	; (8007e60 <_dtoa_r+0xa28>)
 8007e4c:	4805      	ldr	r0, [pc, #20]	; (8007e64 <_dtoa_r+0xa2c>)
 8007e4e:	4906      	ldr	r1, [pc, #24]	; (8007e68 <_dtoa_r+0xa30>)
 8007e50:	f7ff fb07 	bl	8007462 <_dtoa_r+0x2a>
 8007e54:	40240000 	.word	0x40240000
 8007e58:	00000433 	.word	0x00000433
 8007e5c:	7ff00000 	.word	0x7ff00000
 8007e60:	08009354 	.word	0x08009354
 8007e64:	080092fc 	.word	0x080092fc
 8007e68:	000002ef 	.word	0x000002ef
 8007e6c:	0039      	movs	r1, r7
 8007e6e:	693a      	ldr	r2, [r7, #16]
 8007e70:	310c      	adds	r1, #12
 8007e72:	3202      	adds	r2, #2
 8007e74:	0092      	lsls	r2, r2, #2
 8007e76:	300c      	adds	r0, #12
 8007e78:	f000 fe56 	bl	8008b28 <memcpy>
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	0021      	movs	r1, r4
 8007e80:	9804      	ldr	r0, [sp, #16]
 8007e82:	f000 fc07 	bl	8008694 <__lshift>
 8007e86:	9b06      	ldr	r3, [sp, #24]
 8007e88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e8a:	9307      	str	r3, [sp, #28]
 8007e8c:	3b01      	subs	r3, #1
 8007e8e:	189b      	adds	r3, r3, r2
 8007e90:	2201      	movs	r2, #1
 8007e92:	003d      	movs	r5, r7
 8007e94:	0007      	movs	r7, r0
 8007e96:	930e      	str	r3, [sp, #56]	; 0x38
 8007e98:	9b08      	ldr	r3, [sp, #32]
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	930d      	str	r3, [sp, #52]	; 0x34
 8007e9e:	0031      	movs	r1, r6
 8007ea0:	9805      	ldr	r0, [sp, #20]
 8007ea2:	f7ff fa3a 	bl	800731a <quorem>
 8007ea6:	0029      	movs	r1, r5
 8007ea8:	0004      	movs	r4, r0
 8007eaa:	900b      	str	r0, [sp, #44]	; 0x2c
 8007eac:	9805      	ldr	r0, [sp, #20]
 8007eae:	f000 fc5f 	bl	8008770 <__mcmp>
 8007eb2:	003a      	movs	r2, r7
 8007eb4:	900c      	str	r0, [sp, #48]	; 0x30
 8007eb6:	0031      	movs	r1, r6
 8007eb8:	9804      	ldr	r0, [sp, #16]
 8007eba:	f000 fc75 	bl	80087a8 <__mdiff>
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	68c3      	ldr	r3, [r0, #12]
 8007ec2:	3430      	adds	r4, #48	; 0x30
 8007ec4:	9008      	str	r0, [sp, #32]
 8007ec6:	920a      	str	r2, [sp, #40]	; 0x28
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d104      	bne.n	8007ed6 <_dtoa_r+0xa9e>
 8007ecc:	0001      	movs	r1, r0
 8007ece:	9805      	ldr	r0, [sp, #20]
 8007ed0:	f000 fc4e 	bl	8008770 <__mcmp>
 8007ed4:	900a      	str	r0, [sp, #40]	; 0x28
 8007ed6:	9908      	ldr	r1, [sp, #32]
 8007ed8:	9804      	ldr	r0, [sp, #16]
 8007eda:	f000 fa07 	bl	80082ec <_Bfree>
 8007ede:	9b07      	ldr	r3, [sp, #28]
 8007ee0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	9308      	str	r3, [sp, #32]
 8007ee6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007eec:	4313      	orrs	r3, r2
 8007eee:	d109      	bne.n	8007f04 <_dtoa_r+0xacc>
 8007ef0:	2c39      	cmp	r4, #57	; 0x39
 8007ef2:	d022      	beq.n	8007f3a <_dtoa_r+0xb02>
 8007ef4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	dd01      	ble.n	8007efe <_dtoa_r+0xac6>
 8007efa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007efc:	3431      	adds	r4, #49	; 0x31
 8007efe:	9b07      	ldr	r3, [sp, #28]
 8007f00:	701c      	strb	r4, [r3, #0]
 8007f02:	e76e      	b.n	8007de2 <_dtoa_r+0x9aa>
 8007f04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	db04      	blt.n	8007f14 <_dtoa_r+0xadc>
 8007f0a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f10:	4313      	orrs	r3, r2
 8007f12:	d11e      	bne.n	8007f52 <_dtoa_r+0xb1a>
 8007f14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	ddf1      	ble.n	8007efe <_dtoa_r+0xac6>
 8007f1a:	9905      	ldr	r1, [sp, #20]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	9804      	ldr	r0, [sp, #16]
 8007f20:	f000 fbb8 	bl	8008694 <__lshift>
 8007f24:	0031      	movs	r1, r6
 8007f26:	9005      	str	r0, [sp, #20]
 8007f28:	f000 fc22 	bl	8008770 <__mcmp>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	dc02      	bgt.n	8007f36 <_dtoa_r+0xafe>
 8007f30:	d1e5      	bne.n	8007efe <_dtoa_r+0xac6>
 8007f32:	07e3      	lsls	r3, r4, #31
 8007f34:	d5e3      	bpl.n	8007efe <_dtoa_r+0xac6>
 8007f36:	2c39      	cmp	r4, #57	; 0x39
 8007f38:	d1df      	bne.n	8007efa <_dtoa_r+0xac2>
 8007f3a:	2339      	movs	r3, #57	; 0x39
 8007f3c:	9a07      	ldr	r2, [sp, #28]
 8007f3e:	7013      	strb	r3, [r2, #0]
 8007f40:	9b08      	ldr	r3, [sp, #32]
 8007f42:	9308      	str	r3, [sp, #32]
 8007f44:	3b01      	subs	r3, #1
 8007f46:	781a      	ldrb	r2, [r3, #0]
 8007f48:	2a39      	cmp	r2, #57	; 0x39
 8007f4a:	d063      	beq.n	8008014 <_dtoa_r+0xbdc>
 8007f4c:	3201      	adds	r2, #1
 8007f4e:	701a      	strb	r2, [r3, #0]
 8007f50:	e747      	b.n	8007de2 <_dtoa_r+0x9aa>
 8007f52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	dd03      	ble.n	8007f60 <_dtoa_r+0xb28>
 8007f58:	2c39      	cmp	r4, #57	; 0x39
 8007f5a:	d0ee      	beq.n	8007f3a <_dtoa_r+0xb02>
 8007f5c:	3401      	adds	r4, #1
 8007f5e:	e7ce      	b.n	8007efe <_dtoa_r+0xac6>
 8007f60:	9b07      	ldr	r3, [sp, #28]
 8007f62:	9a07      	ldr	r2, [sp, #28]
 8007f64:	701c      	strb	r4, [r3, #0]
 8007f66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d03e      	beq.n	8007fea <_dtoa_r+0xbb2>
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	220a      	movs	r2, #10
 8007f70:	9905      	ldr	r1, [sp, #20]
 8007f72:	9804      	ldr	r0, [sp, #16]
 8007f74:	f000 f9de 	bl	8008334 <__multadd>
 8007f78:	2300      	movs	r3, #0
 8007f7a:	9005      	str	r0, [sp, #20]
 8007f7c:	220a      	movs	r2, #10
 8007f7e:	0029      	movs	r1, r5
 8007f80:	9804      	ldr	r0, [sp, #16]
 8007f82:	42bd      	cmp	r5, r7
 8007f84:	d106      	bne.n	8007f94 <_dtoa_r+0xb5c>
 8007f86:	f000 f9d5 	bl	8008334 <__multadd>
 8007f8a:	0005      	movs	r5, r0
 8007f8c:	0007      	movs	r7, r0
 8007f8e:	9b08      	ldr	r3, [sp, #32]
 8007f90:	9307      	str	r3, [sp, #28]
 8007f92:	e784      	b.n	8007e9e <_dtoa_r+0xa66>
 8007f94:	f000 f9ce 	bl	8008334 <__multadd>
 8007f98:	0039      	movs	r1, r7
 8007f9a:	0005      	movs	r5, r0
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	220a      	movs	r2, #10
 8007fa0:	9804      	ldr	r0, [sp, #16]
 8007fa2:	f000 f9c7 	bl	8008334 <__multadd>
 8007fa6:	0007      	movs	r7, r0
 8007fa8:	e7f1      	b.n	8007f8e <_dtoa_r+0xb56>
 8007faa:	9b07      	ldr	r3, [sp, #28]
 8007fac:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fae:	2500      	movs	r5, #0
 8007fb0:	0031      	movs	r1, r6
 8007fb2:	9805      	ldr	r0, [sp, #20]
 8007fb4:	f7ff f9b1 	bl	800731a <quorem>
 8007fb8:	9b06      	ldr	r3, [sp, #24]
 8007fba:	3030      	adds	r0, #48	; 0x30
 8007fbc:	5558      	strb	r0, [r3, r5]
 8007fbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fc0:	3501      	adds	r5, #1
 8007fc2:	0004      	movs	r4, r0
 8007fc4:	42ab      	cmp	r3, r5
 8007fc6:	dd07      	ble.n	8007fd8 <_dtoa_r+0xba0>
 8007fc8:	2300      	movs	r3, #0
 8007fca:	220a      	movs	r2, #10
 8007fcc:	9905      	ldr	r1, [sp, #20]
 8007fce:	9804      	ldr	r0, [sp, #16]
 8007fd0:	f000 f9b0 	bl	8008334 <__multadd>
 8007fd4:	9005      	str	r0, [sp, #20]
 8007fd6:	e7eb      	b.n	8007fb0 <_dtoa_r+0xb78>
 8007fd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007fda:	2301      	movs	r3, #1
 8007fdc:	2a00      	cmp	r2, #0
 8007fde:	dd00      	ble.n	8007fe2 <_dtoa_r+0xbaa>
 8007fe0:	0013      	movs	r3, r2
 8007fe2:	2500      	movs	r5, #0
 8007fe4:	9a06      	ldr	r2, [sp, #24]
 8007fe6:	18d3      	adds	r3, r2, r3
 8007fe8:	9308      	str	r3, [sp, #32]
 8007fea:	9905      	ldr	r1, [sp, #20]
 8007fec:	2201      	movs	r2, #1
 8007fee:	9804      	ldr	r0, [sp, #16]
 8007ff0:	f000 fb50 	bl	8008694 <__lshift>
 8007ff4:	0031      	movs	r1, r6
 8007ff6:	9005      	str	r0, [sp, #20]
 8007ff8:	f000 fbba 	bl	8008770 <__mcmp>
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	dc9f      	bgt.n	8007f40 <_dtoa_r+0xb08>
 8008000:	d101      	bne.n	8008006 <_dtoa_r+0xbce>
 8008002:	07e4      	lsls	r4, r4, #31
 8008004:	d49c      	bmi.n	8007f40 <_dtoa_r+0xb08>
 8008006:	9b08      	ldr	r3, [sp, #32]
 8008008:	9308      	str	r3, [sp, #32]
 800800a:	3b01      	subs	r3, #1
 800800c:	781a      	ldrb	r2, [r3, #0]
 800800e:	2a30      	cmp	r2, #48	; 0x30
 8008010:	d0fa      	beq.n	8008008 <_dtoa_r+0xbd0>
 8008012:	e6e6      	b.n	8007de2 <_dtoa_r+0x9aa>
 8008014:	9a06      	ldr	r2, [sp, #24]
 8008016:	429a      	cmp	r2, r3
 8008018:	d193      	bne.n	8007f42 <_dtoa_r+0xb0a>
 800801a:	9b03      	ldr	r3, [sp, #12]
 800801c:	3301      	adds	r3, #1
 800801e:	9303      	str	r3, [sp, #12]
 8008020:	2331      	movs	r3, #49	; 0x31
 8008022:	7013      	strb	r3, [r2, #0]
 8008024:	e6dd      	b.n	8007de2 <_dtoa_r+0x9aa>
 8008026:	4b09      	ldr	r3, [pc, #36]	; (800804c <_dtoa_r+0xc14>)
 8008028:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800802a:	9306      	str	r3, [sp, #24]
 800802c:	4b08      	ldr	r3, [pc, #32]	; (8008050 <_dtoa_r+0xc18>)
 800802e:	2a00      	cmp	r2, #0
 8008030:	d001      	beq.n	8008036 <_dtoa_r+0xbfe>
 8008032:	f7ff fa49 	bl	80074c8 <_dtoa_r+0x90>
 8008036:	f7ff fa49 	bl	80074cc <_dtoa_r+0x94>
 800803a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800803c:	2b00      	cmp	r3, #0
 800803e:	dcb6      	bgt.n	8007fae <_dtoa_r+0xb76>
 8008040:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008042:	2b02      	cmp	r3, #2
 8008044:	dd00      	ble.n	8008048 <_dtoa_r+0xc10>
 8008046:	e6b6      	b.n	8007db6 <_dtoa_r+0x97e>
 8008048:	e7b1      	b.n	8007fae <_dtoa_r+0xb76>
 800804a:	46c0      	nop			; (mov r8, r8)
 800804c:	080092d8 	.word	0x080092d8
 8008050:	080092e0 	.word	0x080092e0

08008054 <_free_r>:
 8008054:	b570      	push	{r4, r5, r6, lr}
 8008056:	0005      	movs	r5, r0
 8008058:	2900      	cmp	r1, #0
 800805a:	d010      	beq.n	800807e <_free_r+0x2a>
 800805c:	1f0c      	subs	r4, r1, #4
 800805e:	6823      	ldr	r3, [r4, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	da00      	bge.n	8008066 <_free_r+0x12>
 8008064:	18e4      	adds	r4, r4, r3
 8008066:	0028      	movs	r0, r5
 8008068:	f000 f8ec 	bl	8008244 <__malloc_lock>
 800806c:	4a1d      	ldr	r2, [pc, #116]	; (80080e4 <_free_r+0x90>)
 800806e:	6813      	ldr	r3, [r2, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d105      	bne.n	8008080 <_free_r+0x2c>
 8008074:	6063      	str	r3, [r4, #4]
 8008076:	6014      	str	r4, [r2, #0]
 8008078:	0028      	movs	r0, r5
 800807a:	f000 f8eb 	bl	8008254 <__malloc_unlock>
 800807e:	bd70      	pop	{r4, r5, r6, pc}
 8008080:	42a3      	cmp	r3, r4
 8008082:	d908      	bls.n	8008096 <_free_r+0x42>
 8008084:	6820      	ldr	r0, [r4, #0]
 8008086:	1821      	adds	r1, r4, r0
 8008088:	428b      	cmp	r3, r1
 800808a:	d1f3      	bne.n	8008074 <_free_r+0x20>
 800808c:	6819      	ldr	r1, [r3, #0]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	1809      	adds	r1, r1, r0
 8008092:	6021      	str	r1, [r4, #0]
 8008094:	e7ee      	b.n	8008074 <_free_r+0x20>
 8008096:	001a      	movs	r2, r3
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d001      	beq.n	80080a2 <_free_r+0x4e>
 800809e:	42a3      	cmp	r3, r4
 80080a0:	d9f9      	bls.n	8008096 <_free_r+0x42>
 80080a2:	6811      	ldr	r1, [r2, #0]
 80080a4:	1850      	adds	r0, r2, r1
 80080a6:	42a0      	cmp	r0, r4
 80080a8:	d10b      	bne.n	80080c2 <_free_r+0x6e>
 80080aa:	6820      	ldr	r0, [r4, #0]
 80080ac:	1809      	adds	r1, r1, r0
 80080ae:	1850      	adds	r0, r2, r1
 80080b0:	6011      	str	r1, [r2, #0]
 80080b2:	4283      	cmp	r3, r0
 80080b4:	d1e0      	bne.n	8008078 <_free_r+0x24>
 80080b6:	6818      	ldr	r0, [r3, #0]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	1841      	adds	r1, r0, r1
 80080bc:	6011      	str	r1, [r2, #0]
 80080be:	6053      	str	r3, [r2, #4]
 80080c0:	e7da      	b.n	8008078 <_free_r+0x24>
 80080c2:	42a0      	cmp	r0, r4
 80080c4:	d902      	bls.n	80080cc <_free_r+0x78>
 80080c6:	230c      	movs	r3, #12
 80080c8:	602b      	str	r3, [r5, #0]
 80080ca:	e7d5      	b.n	8008078 <_free_r+0x24>
 80080cc:	6820      	ldr	r0, [r4, #0]
 80080ce:	1821      	adds	r1, r4, r0
 80080d0:	428b      	cmp	r3, r1
 80080d2:	d103      	bne.n	80080dc <_free_r+0x88>
 80080d4:	6819      	ldr	r1, [r3, #0]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	1809      	adds	r1, r1, r0
 80080da:	6021      	str	r1, [r4, #0]
 80080dc:	6063      	str	r3, [r4, #4]
 80080de:	6054      	str	r4, [r2, #4]
 80080e0:	e7ca      	b.n	8008078 <_free_r+0x24>
 80080e2:	46c0      	nop			; (mov r8, r8)
 80080e4:	20000720 	.word	0x20000720

080080e8 <malloc>:
 80080e8:	b510      	push	{r4, lr}
 80080ea:	4b03      	ldr	r3, [pc, #12]	; (80080f8 <malloc+0x10>)
 80080ec:	0001      	movs	r1, r0
 80080ee:	6818      	ldr	r0, [r3, #0]
 80080f0:	f000 f826 	bl	8008140 <_malloc_r>
 80080f4:	bd10      	pop	{r4, pc}
 80080f6:	46c0      	nop			; (mov r8, r8)
 80080f8:	20000064 	.word	0x20000064

080080fc <sbrk_aligned>:
 80080fc:	b570      	push	{r4, r5, r6, lr}
 80080fe:	4e0f      	ldr	r6, [pc, #60]	; (800813c <sbrk_aligned+0x40>)
 8008100:	000d      	movs	r5, r1
 8008102:	6831      	ldr	r1, [r6, #0]
 8008104:	0004      	movs	r4, r0
 8008106:	2900      	cmp	r1, #0
 8008108:	d102      	bne.n	8008110 <sbrk_aligned+0x14>
 800810a:	f000 fcfb 	bl	8008b04 <_sbrk_r>
 800810e:	6030      	str	r0, [r6, #0]
 8008110:	0029      	movs	r1, r5
 8008112:	0020      	movs	r0, r4
 8008114:	f000 fcf6 	bl	8008b04 <_sbrk_r>
 8008118:	1c43      	adds	r3, r0, #1
 800811a:	d00a      	beq.n	8008132 <sbrk_aligned+0x36>
 800811c:	2303      	movs	r3, #3
 800811e:	1cc5      	adds	r5, r0, #3
 8008120:	439d      	bics	r5, r3
 8008122:	42a8      	cmp	r0, r5
 8008124:	d007      	beq.n	8008136 <sbrk_aligned+0x3a>
 8008126:	1a29      	subs	r1, r5, r0
 8008128:	0020      	movs	r0, r4
 800812a:	f000 fceb 	bl	8008b04 <_sbrk_r>
 800812e:	3001      	adds	r0, #1
 8008130:	d101      	bne.n	8008136 <sbrk_aligned+0x3a>
 8008132:	2501      	movs	r5, #1
 8008134:	426d      	negs	r5, r5
 8008136:	0028      	movs	r0, r5
 8008138:	bd70      	pop	{r4, r5, r6, pc}
 800813a:	46c0      	nop			; (mov r8, r8)
 800813c:	20000724 	.word	0x20000724

08008140 <_malloc_r>:
 8008140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008142:	2203      	movs	r2, #3
 8008144:	1ccb      	adds	r3, r1, #3
 8008146:	4393      	bics	r3, r2
 8008148:	3308      	adds	r3, #8
 800814a:	0006      	movs	r6, r0
 800814c:	001f      	movs	r7, r3
 800814e:	2b0c      	cmp	r3, #12
 8008150:	d238      	bcs.n	80081c4 <_malloc_r+0x84>
 8008152:	270c      	movs	r7, #12
 8008154:	42b9      	cmp	r1, r7
 8008156:	d837      	bhi.n	80081c8 <_malloc_r+0x88>
 8008158:	0030      	movs	r0, r6
 800815a:	f000 f873 	bl	8008244 <__malloc_lock>
 800815e:	4b38      	ldr	r3, [pc, #224]	; (8008240 <_malloc_r+0x100>)
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	001c      	movs	r4, r3
 8008166:	2c00      	cmp	r4, #0
 8008168:	d133      	bne.n	80081d2 <_malloc_r+0x92>
 800816a:	0039      	movs	r1, r7
 800816c:	0030      	movs	r0, r6
 800816e:	f7ff ffc5 	bl	80080fc <sbrk_aligned>
 8008172:	0004      	movs	r4, r0
 8008174:	1c43      	adds	r3, r0, #1
 8008176:	d15e      	bne.n	8008236 <_malloc_r+0xf6>
 8008178:	9b00      	ldr	r3, [sp, #0]
 800817a:	681c      	ldr	r4, [r3, #0]
 800817c:	0025      	movs	r5, r4
 800817e:	2d00      	cmp	r5, #0
 8008180:	d14e      	bne.n	8008220 <_malloc_r+0xe0>
 8008182:	2c00      	cmp	r4, #0
 8008184:	d051      	beq.n	800822a <_malloc_r+0xea>
 8008186:	6823      	ldr	r3, [r4, #0]
 8008188:	0029      	movs	r1, r5
 800818a:	18e3      	adds	r3, r4, r3
 800818c:	0030      	movs	r0, r6
 800818e:	9301      	str	r3, [sp, #4]
 8008190:	f000 fcb8 	bl	8008b04 <_sbrk_r>
 8008194:	9b01      	ldr	r3, [sp, #4]
 8008196:	4283      	cmp	r3, r0
 8008198:	d147      	bne.n	800822a <_malloc_r+0xea>
 800819a:	6823      	ldr	r3, [r4, #0]
 800819c:	0030      	movs	r0, r6
 800819e:	1aff      	subs	r7, r7, r3
 80081a0:	0039      	movs	r1, r7
 80081a2:	f7ff ffab 	bl	80080fc <sbrk_aligned>
 80081a6:	3001      	adds	r0, #1
 80081a8:	d03f      	beq.n	800822a <_malloc_r+0xea>
 80081aa:	6823      	ldr	r3, [r4, #0]
 80081ac:	19db      	adds	r3, r3, r7
 80081ae:	6023      	str	r3, [r4, #0]
 80081b0:	9b00      	ldr	r3, [sp, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d040      	beq.n	800823a <_malloc_r+0xfa>
 80081b8:	685a      	ldr	r2, [r3, #4]
 80081ba:	42a2      	cmp	r2, r4
 80081bc:	d133      	bne.n	8008226 <_malloc_r+0xe6>
 80081be:	2200      	movs	r2, #0
 80081c0:	605a      	str	r2, [r3, #4]
 80081c2:	e014      	b.n	80081ee <_malloc_r+0xae>
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	dac5      	bge.n	8008154 <_malloc_r+0x14>
 80081c8:	230c      	movs	r3, #12
 80081ca:	2500      	movs	r5, #0
 80081cc:	6033      	str	r3, [r6, #0]
 80081ce:	0028      	movs	r0, r5
 80081d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80081d2:	6821      	ldr	r1, [r4, #0]
 80081d4:	1bc9      	subs	r1, r1, r7
 80081d6:	d420      	bmi.n	800821a <_malloc_r+0xda>
 80081d8:	290b      	cmp	r1, #11
 80081da:	d918      	bls.n	800820e <_malloc_r+0xce>
 80081dc:	19e2      	adds	r2, r4, r7
 80081de:	6027      	str	r7, [r4, #0]
 80081e0:	42a3      	cmp	r3, r4
 80081e2:	d112      	bne.n	800820a <_malloc_r+0xca>
 80081e4:	9b00      	ldr	r3, [sp, #0]
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	6863      	ldr	r3, [r4, #4]
 80081ea:	6011      	str	r1, [r2, #0]
 80081ec:	6053      	str	r3, [r2, #4]
 80081ee:	0030      	movs	r0, r6
 80081f0:	0025      	movs	r5, r4
 80081f2:	f000 f82f 	bl	8008254 <__malloc_unlock>
 80081f6:	2207      	movs	r2, #7
 80081f8:	350b      	adds	r5, #11
 80081fa:	1d23      	adds	r3, r4, #4
 80081fc:	4395      	bics	r5, r2
 80081fe:	1aea      	subs	r2, r5, r3
 8008200:	429d      	cmp	r5, r3
 8008202:	d0e4      	beq.n	80081ce <_malloc_r+0x8e>
 8008204:	1b5b      	subs	r3, r3, r5
 8008206:	50a3      	str	r3, [r4, r2]
 8008208:	e7e1      	b.n	80081ce <_malloc_r+0x8e>
 800820a:	605a      	str	r2, [r3, #4]
 800820c:	e7ec      	b.n	80081e8 <_malloc_r+0xa8>
 800820e:	6862      	ldr	r2, [r4, #4]
 8008210:	42a3      	cmp	r3, r4
 8008212:	d1d5      	bne.n	80081c0 <_malloc_r+0x80>
 8008214:	9b00      	ldr	r3, [sp, #0]
 8008216:	601a      	str	r2, [r3, #0]
 8008218:	e7e9      	b.n	80081ee <_malloc_r+0xae>
 800821a:	0023      	movs	r3, r4
 800821c:	6864      	ldr	r4, [r4, #4]
 800821e:	e7a2      	b.n	8008166 <_malloc_r+0x26>
 8008220:	002c      	movs	r4, r5
 8008222:	686d      	ldr	r5, [r5, #4]
 8008224:	e7ab      	b.n	800817e <_malloc_r+0x3e>
 8008226:	0013      	movs	r3, r2
 8008228:	e7c4      	b.n	80081b4 <_malloc_r+0x74>
 800822a:	230c      	movs	r3, #12
 800822c:	0030      	movs	r0, r6
 800822e:	6033      	str	r3, [r6, #0]
 8008230:	f000 f810 	bl	8008254 <__malloc_unlock>
 8008234:	e7cb      	b.n	80081ce <_malloc_r+0x8e>
 8008236:	6027      	str	r7, [r4, #0]
 8008238:	e7d9      	b.n	80081ee <_malloc_r+0xae>
 800823a:	605b      	str	r3, [r3, #4]
 800823c:	deff      	udf	#255	; 0xff
 800823e:	46c0      	nop			; (mov r8, r8)
 8008240:	20000720 	.word	0x20000720

08008244 <__malloc_lock>:
 8008244:	b510      	push	{r4, lr}
 8008246:	4802      	ldr	r0, [pc, #8]	; (8008250 <__malloc_lock+0xc>)
 8008248:	f7ff f85a 	bl	8007300 <__retarget_lock_acquire_recursive>
 800824c:	bd10      	pop	{r4, pc}
 800824e:	46c0      	nop			; (mov r8, r8)
 8008250:	2000071c 	.word	0x2000071c

08008254 <__malloc_unlock>:
 8008254:	b510      	push	{r4, lr}
 8008256:	4802      	ldr	r0, [pc, #8]	; (8008260 <__malloc_unlock+0xc>)
 8008258:	f7ff f853 	bl	8007302 <__retarget_lock_release_recursive>
 800825c:	bd10      	pop	{r4, pc}
 800825e:	46c0      	nop			; (mov r8, r8)
 8008260:	2000071c 	.word	0x2000071c

08008264 <_Balloc>:
 8008264:	b570      	push	{r4, r5, r6, lr}
 8008266:	69c5      	ldr	r5, [r0, #28]
 8008268:	0006      	movs	r6, r0
 800826a:	000c      	movs	r4, r1
 800826c:	2d00      	cmp	r5, #0
 800826e:	d10e      	bne.n	800828e <_Balloc+0x2a>
 8008270:	2010      	movs	r0, #16
 8008272:	f7ff ff39 	bl	80080e8 <malloc>
 8008276:	1e02      	subs	r2, r0, #0
 8008278:	61f0      	str	r0, [r6, #28]
 800827a:	d104      	bne.n	8008286 <_Balloc+0x22>
 800827c:	216b      	movs	r1, #107	; 0x6b
 800827e:	4b19      	ldr	r3, [pc, #100]	; (80082e4 <_Balloc+0x80>)
 8008280:	4819      	ldr	r0, [pc, #100]	; (80082e8 <_Balloc+0x84>)
 8008282:	f000 fc5b 	bl	8008b3c <__assert_func>
 8008286:	6045      	str	r5, [r0, #4]
 8008288:	6085      	str	r5, [r0, #8]
 800828a:	6005      	str	r5, [r0, #0]
 800828c:	60c5      	str	r5, [r0, #12]
 800828e:	69f5      	ldr	r5, [r6, #28]
 8008290:	68eb      	ldr	r3, [r5, #12]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d013      	beq.n	80082be <_Balloc+0x5a>
 8008296:	69f3      	ldr	r3, [r6, #28]
 8008298:	00a2      	lsls	r2, r4, #2
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	189b      	adds	r3, r3, r2
 800829e:	6818      	ldr	r0, [r3, #0]
 80082a0:	2800      	cmp	r0, #0
 80082a2:	d118      	bne.n	80082d6 <_Balloc+0x72>
 80082a4:	2101      	movs	r1, #1
 80082a6:	000d      	movs	r5, r1
 80082a8:	40a5      	lsls	r5, r4
 80082aa:	1d6a      	adds	r2, r5, #5
 80082ac:	0030      	movs	r0, r6
 80082ae:	0092      	lsls	r2, r2, #2
 80082b0:	f000 fc62 	bl	8008b78 <_calloc_r>
 80082b4:	2800      	cmp	r0, #0
 80082b6:	d00c      	beq.n	80082d2 <_Balloc+0x6e>
 80082b8:	6044      	str	r4, [r0, #4]
 80082ba:	6085      	str	r5, [r0, #8]
 80082bc:	e00d      	b.n	80082da <_Balloc+0x76>
 80082be:	2221      	movs	r2, #33	; 0x21
 80082c0:	2104      	movs	r1, #4
 80082c2:	0030      	movs	r0, r6
 80082c4:	f000 fc58 	bl	8008b78 <_calloc_r>
 80082c8:	69f3      	ldr	r3, [r6, #28]
 80082ca:	60e8      	str	r0, [r5, #12]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1e1      	bne.n	8008296 <_Balloc+0x32>
 80082d2:	2000      	movs	r0, #0
 80082d4:	bd70      	pop	{r4, r5, r6, pc}
 80082d6:	6802      	ldr	r2, [r0, #0]
 80082d8:	601a      	str	r2, [r3, #0]
 80082da:	2300      	movs	r3, #0
 80082dc:	6103      	str	r3, [r0, #16]
 80082de:	60c3      	str	r3, [r0, #12]
 80082e0:	e7f8      	b.n	80082d4 <_Balloc+0x70>
 80082e2:	46c0      	nop			; (mov r8, r8)
 80082e4:	080092e5 	.word	0x080092e5
 80082e8:	08009365 	.word	0x08009365

080082ec <_Bfree>:
 80082ec:	b570      	push	{r4, r5, r6, lr}
 80082ee:	69c6      	ldr	r6, [r0, #28]
 80082f0:	0005      	movs	r5, r0
 80082f2:	000c      	movs	r4, r1
 80082f4:	2e00      	cmp	r6, #0
 80082f6:	d10e      	bne.n	8008316 <_Bfree+0x2a>
 80082f8:	2010      	movs	r0, #16
 80082fa:	f7ff fef5 	bl	80080e8 <malloc>
 80082fe:	1e02      	subs	r2, r0, #0
 8008300:	61e8      	str	r0, [r5, #28]
 8008302:	d104      	bne.n	800830e <_Bfree+0x22>
 8008304:	218f      	movs	r1, #143	; 0x8f
 8008306:	4b09      	ldr	r3, [pc, #36]	; (800832c <_Bfree+0x40>)
 8008308:	4809      	ldr	r0, [pc, #36]	; (8008330 <_Bfree+0x44>)
 800830a:	f000 fc17 	bl	8008b3c <__assert_func>
 800830e:	6046      	str	r6, [r0, #4]
 8008310:	6086      	str	r6, [r0, #8]
 8008312:	6006      	str	r6, [r0, #0]
 8008314:	60c6      	str	r6, [r0, #12]
 8008316:	2c00      	cmp	r4, #0
 8008318:	d007      	beq.n	800832a <_Bfree+0x3e>
 800831a:	69eb      	ldr	r3, [r5, #28]
 800831c:	6862      	ldr	r2, [r4, #4]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	0092      	lsls	r2, r2, #2
 8008322:	189b      	adds	r3, r3, r2
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	6022      	str	r2, [r4, #0]
 8008328:	601c      	str	r4, [r3, #0]
 800832a:	bd70      	pop	{r4, r5, r6, pc}
 800832c:	080092e5 	.word	0x080092e5
 8008330:	08009365 	.word	0x08009365

08008334 <__multadd>:
 8008334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008336:	000e      	movs	r6, r1
 8008338:	9001      	str	r0, [sp, #4]
 800833a:	000c      	movs	r4, r1
 800833c:	001d      	movs	r5, r3
 800833e:	2000      	movs	r0, #0
 8008340:	690f      	ldr	r7, [r1, #16]
 8008342:	3614      	adds	r6, #20
 8008344:	6833      	ldr	r3, [r6, #0]
 8008346:	3001      	adds	r0, #1
 8008348:	b299      	uxth	r1, r3
 800834a:	4351      	muls	r1, r2
 800834c:	0c1b      	lsrs	r3, r3, #16
 800834e:	4353      	muls	r3, r2
 8008350:	1949      	adds	r1, r1, r5
 8008352:	0c0d      	lsrs	r5, r1, #16
 8008354:	195b      	adds	r3, r3, r5
 8008356:	0c1d      	lsrs	r5, r3, #16
 8008358:	b289      	uxth	r1, r1
 800835a:	041b      	lsls	r3, r3, #16
 800835c:	185b      	adds	r3, r3, r1
 800835e:	c608      	stmia	r6!, {r3}
 8008360:	4287      	cmp	r7, r0
 8008362:	dcef      	bgt.n	8008344 <__multadd+0x10>
 8008364:	2d00      	cmp	r5, #0
 8008366:	d022      	beq.n	80083ae <__multadd+0x7a>
 8008368:	68a3      	ldr	r3, [r4, #8]
 800836a:	42bb      	cmp	r3, r7
 800836c:	dc19      	bgt.n	80083a2 <__multadd+0x6e>
 800836e:	6861      	ldr	r1, [r4, #4]
 8008370:	9801      	ldr	r0, [sp, #4]
 8008372:	3101      	adds	r1, #1
 8008374:	f7ff ff76 	bl	8008264 <_Balloc>
 8008378:	1e06      	subs	r6, r0, #0
 800837a:	d105      	bne.n	8008388 <__multadd+0x54>
 800837c:	0032      	movs	r2, r6
 800837e:	21ba      	movs	r1, #186	; 0xba
 8008380:	4b0c      	ldr	r3, [pc, #48]	; (80083b4 <__multadd+0x80>)
 8008382:	480d      	ldr	r0, [pc, #52]	; (80083b8 <__multadd+0x84>)
 8008384:	f000 fbda 	bl	8008b3c <__assert_func>
 8008388:	0021      	movs	r1, r4
 800838a:	6922      	ldr	r2, [r4, #16]
 800838c:	310c      	adds	r1, #12
 800838e:	3202      	adds	r2, #2
 8008390:	0092      	lsls	r2, r2, #2
 8008392:	300c      	adds	r0, #12
 8008394:	f000 fbc8 	bl	8008b28 <memcpy>
 8008398:	0021      	movs	r1, r4
 800839a:	9801      	ldr	r0, [sp, #4]
 800839c:	f7ff ffa6 	bl	80082ec <_Bfree>
 80083a0:	0034      	movs	r4, r6
 80083a2:	1d3b      	adds	r3, r7, #4
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	18e3      	adds	r3, r4, r3
 80083a8:	605d      	str	r5, [r3, #4]
 80083aa:	1c7b      	adds	r3, r7, #1
 80083ac:	6123      	str	r3, [r4, #16]
 80083ae:	0020      	movs	r0, r4
 80083b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80083b2:	46c0      	nop			; (mov r8, r8)
 80083b4:	08009354 	.word	0x08009354
 80083b8:	08009365 	.word	0x08009365

080083bc <__hi0bits>:
 80083bc:	0003      	movs	r3, r0
 80083be:	0c02      	lsrs	r2, r0, #16
 80083c0:	2000      	movs	r0, #0
 80083c2:	4282      	cmp	r2, r0
 80083c4:	d101      	bne.n	80083ca <__hi0bits+0xe>
 80083c6:	041b      	lsls	r3, r3, #16
 80083c8:	3010      	adds	r0, #16
 80083ca:	0e1a      	lsrs	r2, r3, #24
 80083cc:	d101      	bne.n	80083d2 <__hi0bits+0x16>
 80083ce:	3008      	adds	r0, #8
 80083d0:	021b      	lsls	r3, r3, #8
 80083d2:	0f1a      	lsrs	r2, r3, #28
 80083d4:	d101      	bne.n	80083da <__hi0bits+0x1e>
 80083d6:	3004      	adds	r0, #4
 80083d8:	011b      	lsls	r3, r3, #4
 80083da:	0f9a      	lsrs	r2, r3, #30
 80083dc:	d101      	bne.n	80083e2 <__hi0bits+0x26>
 80083de:	3002      	adds	r0, #2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	db03      	blt.n	80083ee <__hi0bits+0x32>
 80083e6:	3001      	adds	r0, #1
 80083e8:	005b      	lsls	r3, r3, #1
 80083ea:	d400      	bmi.n	80083ee <__hi0bits+0x32>
 80083ec:	2020      	movs	r0, #32
 80083ee:	4770      	bx	lr

080083f0 <__lo0bits>:
 80083f0:	6803      	ldr	r3, [r0, #0]
 80083f2:	0001      	movs	r1, r0
 80083f4:	2207      	movs	r2, #7
 80083f6:	0018      	movs	r0, r3
 80083f8:	4010      	ands	r0, r2
 80083fa:	4213      	tst	r3, r2
 80083fc:	d00d      	beq.n	800841a <__lo0bits+0x2a>
 80083fe:	3a06      	subs	r2, #6
 8008400:	2000      	movs	r0, #0
 8008402:	4213      	tst	r3, r2
 8008404:	d105      	bne.n	8008412 <__lo0bits+0x22>
 8008406:	3002      	adds	r0, #2
 8008408:	4203      	tst	r3, r0
 800840a:	d003      	beq.n	8008414 <__lo0bits+0x24>
 800840c:	40d3      	lsrs	r3, r2
 800840e:	0010      	movs	r0, r2
 8008410:	600b      	str	r3, [r1, #0]
 8008412:	4770      	bx	lr
 8008414:	089b      	lsrs	r3, r3, #2
 8008416:	600b      	str	r3, [r1, #0]
 8008418:	e7fb      	b.n	8008412 <__lo0bits+0x22>
 800841a:	b29a      	uxth	r2, r3
 800841c:	2a00      	cmp	r2, #0
 800841e:	d101      	bne.n	8008424 <__lo0bits+0x34>
 8008420:	2010      	movs	r0, #16
 8008422:	0c1b      	lsrs	r3, r3, #16
 8008424:	b2da      	uxtb	r2, r3
 8008426:	2a00      	cmp	r2, #0
 8008428:	d101      	bne.n	800842e <__lo0bits+0x3e>
 800842a:	3008      	adds	r0, #8
 800842c:	0a1b      	lsrs	r3, r3, #8
 800842e:	071a      	lsls	r2, r3, #28
 8008430:	d101      	bne.n	8008436 <__lo0bits+0x46>
 8008432:	3004      	adds	r0, #4
 8008434:	091b      	lsrs	r3, r3, #4
 8008436:	079a      	lsls	r2, r3, #30
 8008438:	d101      	bne.n	800843e <__lo0bits+0x4e>
 800843a:	3002      	adds	r0, #2
 800843c:	089b      	lsrs	r3, r3, #2
 800843e:	07da      	lsls	r2, r3, #31
 8008440:	d4e9      	bmi.n	8008416 <__lo0bits+0x26>
 8008442:	3001      	adds	r0, #1
 8008444:	085b      	lsrs	r3, r3, #1
 8008446:	d1e6      	bne.n	8008416 <__lo0bits+0x26>
 8008448:	2020      	movs	r0, #32
 800844a:	e7e2      	b.n	8008412 <__lo0bits+0x22>

0800844c <__i2b>:
 800844c:	b510      	push	{r4, lr}
 800844e:	000c      	movs	r4, r1
 8008450:	2101      	movs	r1, #1
 8008452:	f7ff ff07 	bl	8008264 <_Balloc>
 8008456:	2800      	cmp	r0, #0
 8008458:	d107      	bne.n	800846a <__i2b+0x1e>
 800845a:	2146      	movs	r1, #70	; 0x46
 800845c:	4c05      	ldr	r4, [pc, #20]	; (8008474 <__i2b+0x28>)
 800845e:	0002      	movs	r2, r0
 8008460:	4b05      	ldr	r3, [pc, #20]	; (8008478 <__i2b+0x2c>)
 8008462:	0020      	movs	r0, r4
 8008464:	31ff      	adds	r1, #255	; 0xff
 8008466:	f000 fb69 	bl	8008b3c <__assert_func>
 800846a:	2301      	movs	r3, #1
 800846c:	6144      	str	r4, [r0, #20]
 800846e:	6103      	str	r3, [r0, #16]
 8008470:	bd10      	pop	{r4, pc}
 8008472:	46c0      	nop			; (mov r8, r8)
 8008474:	08009365 	.word	0x08009365
 8008478:	08009354 	.word	0x08009354

0800847c <__multiply>:
 800847c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800847e:	0015      	movs	r5, r2
 8008480:	690a      	ldr	r2, [r1, #16]
 8008482:	692b      	ldr	r3, [r5, #16]
 8008484:	000c      	movs	r4, r1
 8008486:	b08b      	sub	sp, #44	; 0x2c
 8008488:	429a      	cmp	r2, r3
 800848a:	da01      	bge.n	8008490 <__multiply+0x14>
 800848c:	002c      	movs	r4, r5
 800848e:	000d      	movs	r5, r1
 8008490:	6927      	ldr	r7, [r4, #16]
 8008492:	692e      	ldr	r6, [r5, #16]
 8008494:	6861      	ldr	r1, [r4, #4]
 8008496:	19bb      	adds	r3, r7, r6
 8008498:	9303      	str	r3, [sp, #12]
 800849a:	68a3      	ldr	r3, [r4, #8]
 800849c:	19ba      	adds	r2, r7, r6
 800849e:	4293      	cmp	r3, r2
 80084a0:	da00      	bge.n	80084a4 <__multiply+0x28>
 80084a2:	3101      	adds	r1, #1
 80084a4:	f7ff fede 	bl	8008264 <_Balloc>
 80084a8:	9002      	str	r0, [sp, #8]
 80084aa:	2800      	cmp	r0, #0
 80084ac:	d106      	bne.n	80084bc <__multiply+0x40>
 80084ae:	21b1      	movs	r1, #177	; 0xb1
 80084b0:	4b48      	ldr	r3, [pc, #288]	; (80085d4 <__multiply+0x158>)
 80084b2:	4849      	ldr	r0, [pc, #292]	; (80085d8 <__multiply+0x15c>)
 80084b4:	9a02      	ldr	r2, [sp, #8]
 80084b6:	0049      	lsls	r1, r1, #1
 80084b8:	f000 fb40 	bl	8008b3c <__assert_func>
 80084bc:	9b02      	ldr	r3, [sp, #8]
 80084be:	2200      	movs	r2, #0
 80084c0:	3314      	adds	r3, #20
 80084c2:	469c      	mov	ip, r3
 80084c4:	19bb      	adds	r3, r7, r6
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	4463      	add	r3, ip
 80084ca:	9304      	str	r3, [sp, #16]
 80084cc:	4663      	mov	r3, ip
 80084ce:	9904      	ldr	r1, [sp, #16]
 80084d0:	428b      	cmp	r3, r1
 80084d2:	d32a      	bcc.n	800852a <__multiply+0xae>
 80084d4:	0023      	movs	r3, r4
 80084d6:	00bf      	lsls	r7, r7, #2
 80084d8:	3314      	adds	r3, #20
 80084da:	3514      	adds	r5, #20
 80084dc:	9308      	str	r3, [sp, #32]
 80084de:	00b6      	lsls	r6, r6, #2
 80084e0:	19db      	adds	r3, r3, r7
 80084e2:	9305      	str	r3, [sp, #20]
 80084e4:	19ab      	adds	r3, r5, r6
 80084e6:	9309      	str	r3, [sp, #36]	; 0x24
 80084e8:	2304      	movs	r3, #4
 80084ea:	9306      	str	r3, [sp, #24]
 80084ec:	0023      	movs	r3, r4
 80084ee:	9a05      	ldr	r2, [sp, #20]
 80084f0:	3315      	adds	r3, #21
 80084f2:	9501      	str	r5, [sp, #4]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d305      	bcc.n	8008504 <__multiply+0x88>
 80084f8:	1b13      	subs	r3, r2, r4
 80084fa:	3b15      	subs	r3, #21
 80084fc:	089b      	lsrs	r3, r3, #2
 80084fe:	3301      	adds	r3, #1
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	9306      	str	r3, [sp, #24]
 8008504:	9b01      	ldr	r3, [sp, #4]
 8008506:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008508:	4293      	cmp	r3, r2
 800850a:	d310      	bcc.n	800852e <__multiply+0xb2>
 800850c:	9b03      	ldr	r3, [sp, #12]
 800850e:	2b00      	cmp	r3, #0
 8008510:	dd05      	ble.n	800851e <__multiply+0xa2>
 8008512:	9b04      	ldr	r3, [sp, #16]
 8008514:	3b04      	subs	r3, #4
 8008516:	9304      	str	r3, [sp, #16]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d056      	beq.n	80085cc <__multiply+0x150>
 800851e:	9b02      	ldr	r3, [sp, #8]
 8008520:	9a03      	ldr	r2, [sp, #12]
 8008522:	0018      	movs	r0, r3
 8008524:	611a      	str	r2, [r3, #16]
 8008526:	b00b      	add	sp, #44	; 0x2c
 8008528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800852a:	c304      	stmia	r3!, {r2}
 800852c:	e7cf      	b.n	80084ce <__multiply+0x52>
 800852e:	9b01      	ldr	r3, [sp, #4]
 8008530:	6818      	ldr	r0, [r3, #0]
 8008532:	b280      	uxth	r0, r0
 8008534:	2800      	cmp	r0, #0
 8008536:	d01e      	beq.n	8008576 <__multiply+0xfa>
 8008538:	4667      	mov	r7, ip
 800853a:	2500      	movs	r5, #0
 800853c:	9e08      	ldr	r6, [sp, #32]
 800853e:	ce02      	ldmia	r6!, {r1}
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	9307      	str	r3, [sp, #28]
 8008544:	b28b      	uxth	r3, r1
 8008546:	4343      	muls	r3, r0
 8008548:	001a      	movs	r2, r3
 800854a:	466b      	mov	r3, sp
 800854c:	8b9b      	ldrh	r3, [r3, #28]
 800854e:	18d3      	adds	r3, r2, r3
 8008550:	195b      	adds	r3, r3, r5
 8008552:	0c0d      	lsrs	r5, r1, #16
 8008554:	4345      	muls	r5, r0
 8008556:	9a07      	ldr	r2, [sp, #28]
 8008558:	0c11      	lsrs	r1, r2, #16
 800855a:	1869      	adds	r1, r5, r1
 800855c:	0c1a      	lsrs	r2, r3, #16
 800855e:	188a      	adds	r2, r1, r2
 8008560:	b29b      	uxth	r3, r3
 8008562:	0c15      	lsrs	r5, r2, #16
 8008564:	0412      	lsls	r2, r2, #16
 8008566:	431a      	orrs	r2, r3
 8008568:	9b05      	ldr	r3, [sp, #20]
 800856a:	c704      	stmia	r7!, {r2}
 800856c:	42b3      	cmp	r3, r6
 800856e:	d8e6      	bhi.n	800853e <__multiply+0xc2>
 8008570:	4663      	mov	r3, ip
 8008572:	9a06      	ldr	r2, [sp, #24]
 8008574:	509d      	str	r5, [r3, r2]
 8008576:	9b01      	ldr	r3, [sp, #4]
 8008578:	6818      	ldr	r0, [r3, #0]
 800857a:	0c00      	lsrs	r0, r0, #16
 800857c:	d020      	beq.n	80085c0 <__multiply+0x144>
 800857e:	4663      	mov	r3, ip
 8008580:	0025      	movs	r5, r4
 8008582:	4661      	mov	r1, ip
 8008584:	2700      	movs	r7, #0
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	3514      	adds	r5, #20
 800858a:	682a      	ldr	r2, [r5, #0]
 800858c:	680e      	ldr	r6, [r1, #0]
 800858e:	b292      	uxth	r2, r2
 8008590:	4342      	muls	r2, r0
 8008592:	0c36      	lsrs	r6, r6, #16
 8008594:	1992      	adds	r2, r2, r6
 8008596:	19d2      	adds	r2, r2, r7
 8008598:	0416      	lsls	r6, r2, #16
 800859a:	b29b      	uxth	r3, r3
 800859c:	431e      	orrs	r6, r3
 800859e:	600e      	str	r6, [r1, #0]
 80085a0:	cd40      	ldmia	r5!, {r6}
 80085a2:	684b      	ldr	r3, [r1, #4]
 80085a4:	0c36      	lsrs	r6, r6, #16
 80085a6:	4346      	muls	r6, r0
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	0c12      	lsrs	r2, r2, #16
 80085ac:	18f3      	adds	r3, r6, r3
 80085ae:	189b      	adds	r3, r3, r2
 80085b0:	9a05      	ldr	r2, [sp, #20]
 80085b2:	0c1f      	lsrs	r7, r3, #16
 80085b4:	3104      	adds	r1, #4
 80085b6:	42aa      	cmp	r2, r5
 80085b8:	d8e7      	bhi.n	800858a <__multiply+0x10e>
 80085ba:	4662      	mov	r2, ip
 80085bc:	9906      	ldr	r1, [sp, #24]
 80085be:	5053      	str	r3, [r2, r1]
 80085c0:	9b01      	ldr	r3, [sp, #4]
 80085c2:	3304      	adds	r3, #4
 80085c4:	9301      	str	r3, [sp, #4]
 80085c6:	2304      	movs	r3, #4
 80085c8:	449c      	add	ip, r3
 80085ca:	e79b      	b.n	8008504 <__multiply+0x88>
 80085cc:	9b03      	ldr	r3, [sp, #12]
 80085ce:	3b01      	subs	r3, #1
 80085d0:	9303      	str	r3, [sp, #12]
 80085d2:	e79b      	b.n	800850c <__multiply+0x90>
 80085d4:	08009354 	.word	0x08009354
 80085d8:	08009365 	.word	0x08009365

080085dc <__pow5mult>:
 80085dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085de:	2303      	movs	r3, #3
 80085e0:	0015      	movs	r5, r2
 80085e2:	0007      	movs	r7, r0
 80085e4:	000e      	movs	r6, r1
 80085e6:	401a      	ands	r2, r3
 80085e8:	421d      	tst	r5, r3
 80085ea:	d008      	beq.n	80085fe <__pow5mult+0x22>
 80085ec:	4925      	ldr	r1, [pc, #148]	; (8008684 <__pow5mult+0xa8>)
 80085ee:	3a01      	subs	r2, #1
 80085f0:	0092      	lsls	r2, r2, #2
 80085f2:	5852      	ldr	r2, [r2, r1]
 80085f4:	2300      	movs	r3, #0
 80085f6:	0031      	movs	r1, r6
 80085f8:	f7ff fe9c 	bl	8008334 <__multadd>
 80085fc:	0006      	movs	r6, r0
 80085fe:	10ad      	asrs	r5, r5, #2
 8008600:	d03d      	beq.n	800867e <__pow5mult+0xa2>
 8008602:	69fc      	ldr	r4, [r7, #28]
 8008604:	2c00      	cmp	r4, #0
 8008606:	d10f      	bne.n	8008628 <__pow5mult+0x4c>
 8008608:	2010      	movs	r0, #16
 800860a:	f7ff fd6d 	bl	80080e8 <malloc>
 800860e:	1e02      	subs	r2, r0, #0
 8008610:	61f8      	str	r0, [r7, #28]
 8008612:	d105      	bne.n	8008620 <__pow5mult+0x44>
 8008614:	21b4      	movs	r1, #180	; 0xb4
 8008616:	4b1c      	ldr	r3, [pc, #112]	; (8008688 <__pow5mult+0xac>)
 8008618:	481c      	ldr	r0, [pc, #112]	; (800868c <__pow5mult+0xb0>)
 800861a:	31ff      	adds	r1, #255	; 0xff
 800861c:	f000 fa8e 	bl	8008b3c <__assert_func>
 8008620:	6044      	str	r4, [r0, #4]
 8008622:	6084      	str	r4, [r0, #8]
 8008624:	6004      	str	r4, [r0, #0]
 8008626:	60c4      	str	r4, [r0, #12]
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	689c      	ldr	r4, [r3, #8]
 800862c:	9301      	str	r3, [sp, #4]
 800862e:	2c00      	cmp	r4, #0
 8008630:	d108      	bne.n	8008644 <__pow5mult+0x68>
 8008632:	0038      	movs	r0, r7
 8008634:	4916      	ldr	r1, [pc, #88]	; (8008690 <__pow5mult+0xb4>)
 8008636:	f7ff ff09 	bl	800844c <__i2b>
 800863a:	9b01      	ldr	r3, [sp, #4]
 800863c:	0004      	movs	r4, r0
 800863e:	6098      	str	r0, [r3, #8]
 8008640:	2300      	movs	r3, #0
 8008642:	6003      	str	r3, [r0, #0]
 8008644:	2301      	movs	r3, #1
 8008646:	421d      	tst	r5, r3
 8008648:	d00a      	beq.n	8008660 <__pow5mult+0x84>
 800864a:	0031      	movs	r1, r6
 800864c:	0022      	movs	r2, r4
 800864e:	0038      	movs	r0, r7
 8008650:	f7ff ff14 	bl	800847c <__multiply>
 8008654:	0031      	movs	r1, r6
 8008656:	9001      	str	r0, [sp, #4]
 8008658:	0038      	movs	r0, r7
 800865a:	f7ff fe47 	bl	80082ec <_Bfree>
 800865e:	9e01      	ldr	r6, [sp, #4]
 8008660:	106d      	asrs	r5, r5, #1
 8008662:	d00c      	beq.n	800867e <__pow5mult+0xa2>
 8008664:	6820      	ldr	r0, [r4, #0]
 8008666:	2800      	cmp	r0, #0
 8008668:	d107      	bne.n	800867a <__pow5mult+0x9e>
 800866a:	0022      	movs	r2, r4
 800866c:	0021      	movs	r1, r4
 800866e:	0038      	movs	r0, r7
 8008670:	f7ff ff04 	bl	800847c <__multiply>
 8008674:	2300      	movs	r3, #0
 8008676:	6020      	str	r0, [r4, #0]
 8008678:	6003      	str	r3, [r0, #0]
 800867a:	0004      	movs	r4, r0
 800867c:	e7e2      	b.n	8008644 <__pow5mult+0x68>
 800867e:	0030      	movs	r0, r6
 8008680:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008682:	46c0      	nop			; (mov r8, r8)
 8008684:	080094b0 	.word	0x080094b0
 8008688:	080092e5 	.word	0x080092e5
 800868c:	08009365 	.word	0x08009365
 8008690:	00000271 	.word	0x00000271

08008694 <__lshift>:
 8008694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008696:	000c      	movs	r4, r1
 8008698:	0017      	movs	r7, r2
 800869a:	6923      	ldr	r3, [r4, #16]
 800869c:	1155      	asrs	r5, r2, #5
 800869e:	b087      	sub	sp, #28
 80086a0:	18eb      	adds	r3, r5, r3
 80086a2:	9302      	str	r3, [sp, #8]
 80086a4:	3301      	adds	r3, #1
 80086a6:	9301      	str	r3, [sp, #4]
 80086a8:	6849      	ldr	r1, [r1, #4]
 80086aa:	68a3      	ldr	r3, [r4, #8]
 80086ac:	9004      	str	r0, [sp, #16]
 80086ae:	9a01      	ldr	r2, [sp, #4]
 80086b0:	4293      	cmp	r3, r2
 80086b2:	db10      	blt.n	80086d6 <__lshift+0x42>
 80086b4:	9804      	ldr	r0, [sp, #16]
 80086b6:	f7ff fdd5 	bl	8008264 <_Balloc>
 80086ba:	2300      	movs	r3, #0
 80086bc:	0002      	movs	r2, r0
 80086be:	0006      	movs	r6, r0
 80086c0:	0019      	movs	r1, r3
 80086c2:	3214      	adds	r2, #20
 80086c4:	4298      	cmp	r0, r3
 80086c6:	d10c      	bne.n	80086e2 <__lshift+0x4e>
 80086c8:	31df      	adds	r1, #223	; 0xdf
 80086ca:	0032      	movs	r2, r6
 80086cc:	4b26      	ldr	r3, [pc, #152]	; (8008768 <__lshift+0xd4>)
 80086ce:	4827      	ldr	r0, [pc, #156]	; (800876c <__lshift+0xd8>)
 80086d0:	31ff      	adds	r1, #255	; 0xff
 80086d2:	f000 fa33 	bl	8008b3c <__assert_func>
 80086d6:	3101      	adds	r1, #1
 80086d8:	005b      	lsls	r3, r3, #1
 80086da:	e7e8      	b.n	80086ae <__lshift+0x1a>
 80086dc:	0098      	lsls	r0, r3, #2
 80086de:	5011      	str	r1, [r2, r0]
 80086e0:	3301      	adds	r3, #1
 80086e2:	42ab      	cmp	r3, r5
 80086e4:	dbfa      	blt.n	80086dc <__lshift+0x48>
 80086e6:	43eb      	mvns	r3, r5
 80086e8:	17db      	asrs	r3, r3, #31
 80086ea:	401d      	ands	r5, r3
 80086ec:	211f      	movs	r1, #31
 80086ee:	0023      	movs	r3, r4
 80086f0:	0038      	movs	r0, r7
 80086f2:	00ad      	lsls	r5, r5, #2
 80086f4:	1955      	adds	r5, r2, r5
 80086f6:	6922      	ldr	r2, [r4, #16]
 80086f8:	3314      	adds	r3, #20
 80086fa:	0092      	lsls	r2, r2, #2
 80086fc:	4008      	ands	r0, r1
 80086fe:	4684      	mov	ip, r0
 8008700:	189a      	adds	r2, r3, r2
 8008702:	420f      	tst	r7, r1
 8008704:	d02a      	beq.n	800875c <__lshift+0xc8>
 8008706:	3101      	adds	r1, #1
 8008708:	1a09      	subs	r1, r1, r0
 800870a:	9105      	str	r1, [sp, #20]
 800870c:	2100      	movs	r1, #0
 800870e:	9503      	str	r5, [sp, #12]
 8008710:	4667      	mov	r7, ip
 8008712:	6818      	ldr	r0, [r3, #0]
 8008714:	40b8      	lsls	r0, r7
 8008716:	4308      	orrs	r0, r1
 8008718:	9903      	ldr	r1, [sp, #12]
 800871a:	c101      	stmia	r1!, {r0}
 800871c:	9103      	str	r1, [sp, #12]
 800871e:	9805      	ldr	r0, [sp, #20]
 8008720:	cb02      	ldmia	r3!, {r1}
 8008722:	40c1      	lsrs	r1, r0
 8008724:	429a      	cmp	r2, r3
 8008726:	d8f3      	bhi.n	8008710 <__lshift+0x7c>
 8008728:	0020      	movs	r0, r4
 800872a:	3015      	adds	r0, #21
 800872c:	2304      	movs	r3, #4
 800872e:	4282      	cmp	r2, r0
 8008730:	d304      	bcc.n	800873c <__lshift+0xa8>
 8008732:	1b13      	subs	r3, r2, r4
 8008734:	3b15      	subs	r3, #21
 8008736:	089b      	lsrs	r3, r3, #2
 8008738:	3301      	adds	r3, #1
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	50e9      	str	r1, [r5, r3]
 800873e:	2900      	cmp	r1, #0
 8008740:	d002      	beq.n	8008748 <__lshift+0xb4>
 8008742:	9b02      	ldr	r3, [sp, #8]
 8008744:	3302      	adds	r3, #2
 8008746:	9301      	str	r3, [sp, #4]
 8008748:	9b01      	ldr	r3, [sp, #4]
 800874a:	9804      	ldr	r0, [sp, #16]
 800874c:	3b01      	subs	r3, #1
 800874e:	0021      	movs	r1, r4
 8008750:	6133      	str	r3, [r6, #16]
 8008752:	f7ff fdcb 	bl	80082ec <_Bfree>
 8008756:	0030      	movs	r0, r6
 8008758:	b007      	add	sp, #28
 800875a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800875c:	cb02      	ldmia	r3!, {r1}
 800875e:	c502      	stmia	r5!, {r1}
 8008760:	429a      	cmp	r2, r3
 8008762:	d8fb      	bhi.n	800875c <__lshift+0xc8>
 8008764:	e7f0      	b.n	8008748 <__lshift+0xb4>
 8008766:	46c0      	nop			; (mov r8, r8)
 8008768:	08009354 	.word	0x08009354
 800876c:	08009365 	.word	0x08009365

08008770 <__mcmp>:
 8008770:	b530      	push	{r4, r5, lr}
 8008772:	690b      	ldr	r3, [r1, #16]
 8008774:	6904      	ldr	r4, [r0, #16]
 8008776:	0002      	movs	r2, r0
 8008778:	1ae0      	subs	r0, r4, r3
 800877a:	429c      	cmp	r4, r3
 800877c:	d10e      	bne.n	800879c <__mcmp+0x2c>
 800877e:	3214      	adds	r2, #20
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	3114      	adds	r1, #20
 8008784:	0014      	movs	r4, r2
 8008786:	18c9      	adds	r1, r1, r3
 8008788:	18d2      	adds	r2, r2, r3
 800878a:	3a04      	subs	r2, #4
 800878c:	3904      	subs	r1, #4
 800878e:	6815      	ldr	r5, [r2, #0]
 8008790:	680b      	ldr	r3, [r1, #0]
 8008792:	429d      	cmp	r5, r3
 8008794:	d003      	beq.n	800879e <__mcmp+0x2e>
 8008796:	2001      	movs	r0, #1
 8008798:	429d      	cmp	r5, r3
 800879a:	d303      	bcc.n	80087a4 <__mcmp+0x34>
 800879c:	bd30      	pop	{r4, r5, pc}
 800879e:	4294      	cmp	r4, r2
 80087a0:	d3f3      	bcc.n	800878a <__mcmp+0x1a>
 80087a2:	e7fb      	b.n	800879c <__mcmp+0x2c>
 80087a4:	4240      	negs	r0, r0
 80087a6:	e7f9      	b.n	800879c <__mcmp+0x2c>

080087a8 <__mdiff>:
 80087a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087aa:	000e      	movs	r6, r1
 80087ac:	0007      	movs	r7, r0
 80087ae:	0011      	movs	r1, r2
 80087b0:	0030      	movs	r0, r6
 80087b2:	b087      	sub	sp, #28
 80087b4:	0014      	movs	r4, r2
 80087b6:	f7ff ffdb 	bl	8008770 <__mcmp>
 80087ba:	1e05      	subs	r5, r0, #0
 80087bc:	d110      	bne.n	80087e0 <__mdiff+0x38>
 80087be:	0001      	movs	r1, r0
 80087c0:	0038      	movs	r0, r7
 80087c2:	f7ff fd4f 	bl	8008264 <_Balloc>
 80087c6:	1e02      	subs	r2, r0, #0
 80087c8:	d104      	bne.n	80087d4 <__mdiff+0x2c>
 80087ca:	4b3f      	ldr	r3, [pc, #252]	; (80088c8 <__mdiff+0x120>)
 80087cc:	483f      	ldr	r0, [pc, #252]	; (80088cc <__mdiff+0x124>)
 80087ce:	4940      	ldr	r1, [pc, #256]	; (80088d0 <__mdiff+0x128>)
 80087d0:	f000 f9b4 	bl	8008b3c <__assert_func>
 80087d4:	2301      	movs	r3, #1
 80087d6:	6145      	str	r5, [r0, #20]
 80087d8:	6103      	str	r3, [r0, #16]
 80087da:	0010      	movs	r0, r2
 80087dc:	b007      	add	sp, #28
 80087de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087e0:	2301      	movs	r3, #1
 80087e2:	9301      	str	r3, [sp, #4]
 80087e4:	2800      	cmp	r0, #0
 80087e6:	db04      	blt.n	80087f2 <__mdiff+0x4a>
 80087e8:	0023      	movs	r3, r4
 80087ea:	0034      	movs	r4, r6
 80087ec:	001e      	movs	r6, r3
 80087ee:	2300      	movs	r3, #0
 80087f0:	9301      	str	r3, [sp, #4]
 80087f2:	0038      	movs	r0, r7
 80087f4:	6861      	ldr	r1, [r4, #4]
 80087f6:	f7ff fd35 	bl	8008264 <_Balloc>
 80087fa:	1e02      	subs	r2, r0, #0
 80087fc:	d103      	bne.n	8008806 <__mdiff+0x5e>
 80087fe:	4b32      	ldr	r3, [pc, #200]	; (80088c8 <__mdiff+0x120>)
 8008800:	4832      	ldr	r0, [pc, #200]	; (80088cc <__mdiff+0x124>)
 8008802:	4934      	ldr	r1, [pc, #208]	; (80088d4 <__mdiff+0x12c>)
 8008804:	e7e4      	b.n	80087d0 <__mdiff+0x28>
 8008806:	9b01      	ldr	r3, [sp, #4]
 8008808:	2700      	movs	r7, #0
 800880a:	60c3      	str	r3, [r0, #12]
 800880c:	6920      	ldr	r0, [r4, #16]
 800880e:	3414      	adds	r4, #20
 8008810:	0083      	lsls	r3, r0, #2
 8008812:	18e3      	adds	r3, r4, r3
 8008814:	0021      	movs	r1, r4
 8008816:	9401      	str	r4, [sp, #4]
 8008818:	0034      	movs	r4, r6
 800881a:	9302      	str	r3, [sp, #8]
 800881c:	6933      	ldr	r3, [r6, #16]
 800881e:	3414      	adds	r4, #20
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	18e3      	adds	r3, r4, r3
 8008824:	9303      	str	r3, [sp, #12]
 8008826:	0013      	movs	r3, r2
 8008828:	3314      	adds	r3, #20
 800882a:	469c      	mov	ip, r3
 800882c:	9305      	str	r3, [sp, #20]
 800882e:	9104      	str	r1, [sp, #16]
 8008830:	9b04      	ldr	r3, [sp, #16]
 8008832:	cc02      	ldmia	r4!, {r1}
 8008834:	cb20      	ldmia	r3!, {r5}
 8008836:	9304      	str	r3, [sp, #16]
 8008838:	b2ab      	uxth	r3, r5
 800883a:	19df      	adds	r7, r3, r7
 800883c:	b28b      	uxth	r3, r1
 800883e:	1afb      	subs	r3, r7, r3
 8008840:	0c09      	lsrs	r1, r1, #16
 8008842:	0c2d      	lsrs	r5, r5, #16
 8008844:	1a6d      	subs	r5, r5, r1
 8008846:	1419      	asrs	r1, r3, #16
 8008848:	1869      	adds	r1, r5, r1
 800884a:	b29b      	uxth	r3, r3
 800884c:	140f      	asrs	r7, r1, #16
 800884e:	0409      	lsls	r1, r1, #16
 8008850:	4319      	orrs	r1, r3
 8008852:	4663      	mov	r3, ip
 8008854:	c302      	stmia	r3!, {r1}
 8008856:	469c      	mov	ip, r3
 8008858:	9b03      	ldr	r3, [sp, #12]
 800885a:	42a3      	cmp	r3, r4
 800885c:	d8e8      	bhi.n	8008830 <__mdiff+0x88>
 800885e:	0031      	movs	r1, r6
 8008860:	9c03      	ldr	r4, [sp, #12]
 8008862:	3115      	adds	r1, #21
 8008864:	2304      	movs	r3, #4
 8008866:	428c      	cmp	r4, r1
 8008868:	d304      	bcc.n	8008874 <__mdiff+0xcc>
 800886a:	1ba3      	subs	r3, r4, r6
 800886c:	3b15      	subs	r3, #21
 800886e:	089b      	lsrs	r3, r3, #2
 8008870:	3301      	adds	r3, #1
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	9901      	ldr	r1, [sp, #4]
 8008876:	18cd      	adds	r5, r1, r3
 8008878:	9905      	ldr	r1, [sp, #20]
 800887a:	002e      	movs	r6, r5
 800887c:	18cb      	adds	r3, r1, r3
 800887e:	469c      	mov	ip, r3
 8008880:	9902      	ldr	r1, [sp, #8]
 8008882:	428e      	cmp	r6, r1
 8008884:	d310      	bcc.n	80088a8 <__mdiff+0x100>
 8008886:	9e02      	ldr	r6, [sp, #8]
 8008888:	1ee9      	subs	r1, r5, #3
 800888a:	2400      	movs	r4, #0
 800888c:	428e      	cmp	r6, r1
 800888e:	d304      	bcc.n	800889a <__mdiff+0xf2>
 8008890:	0031      	movs	r1, r6
 8008892:	3103      	adds	r1, #3
 8008894:	1b49      	subs	r1, r1, r5
 8008896:	0889      	lsrs	r1, r1, #2
 8008898:	008c      	lsls	r4, r1, #2
 800889a:	191b      	adds	r3, r3, r4
 800889c:	3b04      	subs	r3, #4
 800889e:	6819      	ldr	r1, [r3, #0]
 80088a0:	2900      	cmp	r1, #0
 80088a2:	d00f      	beq.n	80088c4 <__mdiff+0x11c>
 80088a4:	6110      	str	r0, [r2, #16]
 80088a6:	e798      	b.n	80087da <__mdiff+0x32>
 80088a8:	ce02      	ldmia	r6!, {r1}
 80088aa:	b28c      	uxth	r4, r1
 80088ac:	19e4      	adds	r4, r4, r7
 80088ae:	0c0f      	lsrs	r7, r1, #16
 80088b0:	1421      	asrs	r1, r4, #16
 80088b2:	1879      	adds	r1, r7, r1
 80088b4:	b2a4      	uxth	r4, r4
 80088b6:	140f      	asrs	r7, r1, #16
 80088b8:	0409      	lsls	r1, r1, #16
 80088ba:	4321      	orrs	r1, r4
 80088bc:	4664      	mov	r4, ip
 80088be:	c402      	stmia	r4!, {r1}
 80088c0:	46a4      	mov	ip, r4
 80088c2:	e7dd      	b.n	8008880 <__mdiff+0xd8>
 80088c4:	3801      	subs	r0, #1
 80088c6:	e7e9      	b.n	800889c <__mdiff+0xf4>
 80088c8:	08009354 	.word	0x08009354
 80088cc:	08009365 	.word	0x08009365
 80088d0:	00000237 	.word	0x00000237
 80088d4:	00000245 	.word	0x00000245

080088d8 <__d2b>:
 80088d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088da:	2101      	movs	r1, #1
 80088dc:	0014      	movs	r4, r2
 80088de:	001d      	movs	r5, r3
 80088e0:	9f08      	ldr	r7, [sp, #32]
 80088e2:	f7ff fcbf 	bl	8008264 <_Balloc>
 80088e6:	1e06      	subs	r6, r0, #0
 80088e8:	d105      	bne.n	80088f6 <__d2b+0x1e>
 80088ea:	0032      	movs	r2, r6
 80088ec:	4b24      	ldr	r3, [pc, #144]	; (8008980 <__d2b+0xa8>)
 80088ee:	4825      	ldr	r0, [pc, #148]	; (8008984 <__d2b+0xac>)
 80088f0:	4925      	ldr	r1, [pc, #148]	; (8008988 <__d2b+0xb0>)
 80088f2:	f000 f923 	bl	8008b3c <__assert_func>
 80088f6:	032b      	lsls	r3, r5, #12
 80088f8:	006d      	lsls	r5, r5, #1
 80088fa:	0b1b      	lsrs	r3, r3, #12
 80088fc:	0d6d      	lsrs	r5, r5, #21
 80088fe:	d125      	bne.n	800894c <__d2b+0x74>
 8008900:	9301      	str	r3, [sp, #4]
 8008902:	2c00      	cmp	r4, #0
 8008904:	d028      	beq.n	8008958 <__d2b+0x80>
 8008906:	4668      	mov	r0, sp
 8008908:	9400      	str	r4, [sp, #0]
 800890a:	f7ff fd71 	bl	80083f0 <__lo0bits>
 800890e:	9b01      	ldr	r3, [sp, #4]
 8008910:	9900      	ldr	r1, [sp, #0]
 8008912:	2800      	cmp	r0, #0
 8008914:	d01e      	beq.n	8008954 <__d2b+0x7c>
 8008916:	2220      	movs	r2, #32
 8008918:	001c      	movs	r4, r3
 800891a:	1a12      	subs	r2, r2, r0
 800891c:	4094      	lsls	r4, r2
 800891e:	0022      	movs	r2, r4
 8008920:	40c3      	lsrs	r3, r0
 8008922:	430a      	orrs	r2, r1
 8008924:	6172      	str	r2, [r6, #20]
 8008926:	9301      	str	r3, [sp, #4]
 8008928:	9c01      	ldr	r4, [sp, #4]
 800892a:	61b4      	str	r4, [r6, #24]
 800892c:	1e63      	subs	r3, r4, #1
 800892e:	419c      	sbcs	r4, r3
 8008930:	3401      	adds	r4, #1
 8008932:	6134      	str	r4, [r6, #16]
 8008934:	2d00      	cmp	r5, #0
 8008936:	d017      	beq.n	8008968 <__d2b+0x90>
 8008938:	2435      	movs	r4, #53	; 0x35
 800893a:	4b14      	ldr	r3, [pc, #80]	; (800898c <__d2b+0xb4>)
 800893c:	18ed      	adds	r5, r5, r3
 800893e:	182d      	adds	r5, r5, r0
 8008940:	603d      	str	r5, [r7, #0]
 8008942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008944:	1a24      	subs	r4, r4, r0
 8008946:	601c      	str	r4, [r3, #0]
 8008948:	0030      	movs	r0, r6
 800894a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800894c:	2280      	movs	r2, #128	; 0x80
 800894e:	0352      	lsls	r2, r2, #13
 8008950:	4313      	orrs	r3, r2
 8008952:	e7d5      	b.n	8008900 <__d2b+0x28>
 8008954:	6171      	str	r1, [r6, #20]
 8008956:	e7e7      	b.n	8008928 <__d2b+0x50>
 8008958:	a801      	add	r0, sp, #4
 800895a:	f7ff fd49 	bl	80083f0 <__lo0bits>
 800895e:	9b01      	ldr	r3, [sp, #4]
 8008960:	2401      	movs	r4, #1
 8008962:	6173      	str	r3, [r6, #20]
 8008964:	3020      	adds	r0, #32
 8008966:	e7e4      	b.n	8008932 <__d2b+0x5a>
 8008968:	4b09      	ldr	r3, [pc, #36]	; (8008990 <__d2b+0xb8>)
 800896a:	18c0      	adds	r0, r0, r3
 800896c:	4b09      	ldr	r3, [pc, #36]	; (8008994 <__d2b+0xbc>)
 800896e:	6038      	str	r0, [r7, #0]
 8008970:	18e3      	adds	r3, r4, r3
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	18f3      	adds	r3, r6, r3
 8008976:	6958      	ldr	r0, [r3, #20]
 8008978:	f7ff fd20 	bl	80083bc <__hi0bits>
 800897c:	0164      	lsls	r4, r4, #5
 800897e:	e7e0      	b.n	8008942 <__d2b+0x6a>
 8008980:	08009354 	.word	0x08009354
 8008984:	08009365 	.word	0x08009365
 8008988:	0000030f 	.word	0x0000030f
 800898c:	fffffbcd 	.word	0xfffffbcd
 8008990:	fffffbce 	.word	0xfffffbce
 8008994:	3fffffff 	.word	0x3fffffff

08008998 <__sflush_r>:
 8008998:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800899a:	898b      	ldrh	r3, [r1, #12]
 800899c:	0005      	movs	r5, r0
 800899e:	000c      	movs	r4, r1
 80089a0:	071a      	lsls	r2, r3, #28
 80089a2:	d45c      	bmi.n	8008a5e <__sflush_r+0xc6>
 80089a4:	684a      	ldr	r2, [r1, #4]
 80089a6:	2a00      	cmp	r2, #0
 80089a8:	dc04      	bgt.n	80089b4 <__sflush_r+0x1c>
 80089aa:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80089ac:	2a00      	cmp	r2, #0
 80089ae:	dc01      	bgt.n	80089b4 <__sflush_r+0x1c>
 80089b0:	2000      	movs	r0, #0
 80089b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80089b4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80089b6:	2f00      	cmp	r7, #0
 80089b8:	d0fa      	beq.n	80089b0 <__sflush_r+0x18>
 80089ba:	2200      	movs	r2, #0
 80089bc:	2080      	movs	r0, #128	; 0x80
 80089be:	682e      	ldr	r6, [r5, #0]
 80089c0:	602a      	str	r2, [r5, #0]
 80089c2:	001a      	movs	r2, r3
 80089c4:	0140      	lsls	r0, r0, #5
 80089c6:	6a21      	ldr	r1, [r4, #32]
 80089c8:	4002      	ands	r2, r0
 80089ca:	4203      	tst	r3, r0
 80089cc:	d034      	beq.n	8008a38 <__sflush_r+0xa0>
 80089ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80089d0:	89a3      	ldrh	r3, [r4, #12]
 80089d2:	075b      	lsls	r3, r3, #29
 80089d4:	d506      	bpl.n	80089e4 <__sflush_r+0x4c>
 80089d6:	6863      	ldr	r3, [r4, #4]
 80089d8:	1ac0      	subs	r0, r0, r3
 80089da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d001      	beq.n	80089e4 <__sflush_r+0x4c>
 80089e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089e2:	1ac0      	subs	r0, r0, r3
 80089e4:	0002      	movs	r2, r0
 80089e6:	2300      	movs	r3, #0
 80089e8:	0028      	movs	r0, r5
 80089ea:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80089ec:	6a21      	ldr	r1, [r4, #32]
 80089ee:	47b8      	blx	r7
 80089f0:	89a2      	ldrh	r2, [r4, #12]
 80089f2:	1c43      	adds	r3, r0, #1
 80089f4:	d106      	bne.n	8008a04 <__sflush_r+0x6c>
 80089f6:	6829      	ldr	r1, [r5, #0]
 80089f8:	291d      	cmp	r1, #29
 80089fa:	d82c      	bhi.n	8008a56 <__sflush_r+0xbe>
 80089fc:	4b2a      	ldr	r3, [pc, #168]	; (8008aa8 <__sflush_r+0x110>)
 80089fe:	410b      	asrs	r3, r1
 8008a00:	07db      	lsls	r3, r3, #31
 8008a02:	d428      	bmi.n	8008a56 <__sflush_r+0xbe>
 8008a04:	2300      	movs	r3, #0
 8008a06:	6063      	str	r3, [r4, #4]
 8008a08:	6923      	ldr	r3, [r4, #16]
 8008a0a:	6023      	str	r3, [r4, #0]
 8008a0c:	04d2      	lsls	r2, r2, #19
 8008a0e:	d505      	bpl.n	8008a1c <__sflush_r+0x84>
 8008a10:	1c43      	adds	r3, r0, #1
 8008a12:	d102      	bne.n	8008a1a <__sflush_r+0x82>
 8008a14:	682b      	ldr	r3, [r5, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d100      	bne.n	8008a1c <__sflush_r+0x84>
 8008a1a:	6560      	str	r0, [r4, #84]	; 0x54
 8008a1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a1e:	602e      	str	r6, [r5, #0]
 8008a20:	2900      	cmp	r1, #0
 8008a22:	d0c5      	beq.n	80089b0 <__sflush_r+0x18>
 8008a24:	0023      	movs	r3, r4
 8008a26:	3344      	adds	r3, #68	; 0x44
 8008a28:	4299      	cmp	r1, r3
 8008a2a:	d002      	beq.n	8008a32 <__sflush_r+0x9a>
 8008a2c:	0028      	movs	r0, r5
 8008a2e:	f7ff fb11 	bl	8008054 <_free_r>
 8008a32:	2000      	movs	r0, #0
 8008a34:	6360      	str	r0, [r4, #52]	; 0x34
 8008a36:	e7bc      	b.n	80089b2 <__sflush_r+0x1a>
 8008a38:	2301      	movs	r3, #1
 8008a3a:	0028      	movs	r0, r5
 8008a3c:	47b8      	blx	r7
 8008a3e:	1c43      	adds	r3, r0, #1
 8008a40:	d1c6      	bne.n	80089d0 <__sflush_r+0x38>
 8008a42:	682b      	ldr	r3, [r5, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d0c3      	beq.n	80089d0 <__sflush_r+0x38>
 8008a48:	2b1d      	cmp	r3, #29
 8008a4a:	d001      	beq.n	8008a50 <__sflush_r+0xb8>
 8008a4c:	2b16      	cmp	r3, #22
 8008a4e:	d101      	bne.n	8008a54 <__sflush_r+0xbc>
 8008a50:	602e      	str	r6, [r5, #0]
 8008a52:	e7ad      	b.n	80089b0 <__sflush_r+0x18>
 8008a54:	89a2      	ldrh	r2, [r4, #12]
 8008a56:	2340      	movs	r3, #64	; 0x40
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	81a3      	strh	r3, [r4, #12]
 8008a5c:	e7a9      	b.n	80089b2 <__sflush_r+0x1a>
 8008a5e:	690e      	ldr	r6, [r1, #16]
 8008a60:	2e00      	cmp	r6, #0
 8008a62:	d0a5      	beq.n	80089b0 <__sflush_r+0x18>
 8008a64:	680f      	ldr	r7, [r1, #0]
 8008a66:	600e      	str	r6, [r1, #0]
 8008a68:	1bba      	subs	r2, r7, r6
 8008a6a:	9201      	str	r2, [sp, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	079b      	lsls	r3, r3, #30
 8008a70:	d100      	bne.n	8008a74 <__sflush_r+0xdc>
 8008a72:	694a      	ldr	r2, [r1, #20]
 8008a74:	60a2      	str	r2, [r4, #8]
 8008a76:	9b01      	ldr	r3, [sp, #4]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	dd99      	ble.n	80089b0 <__sflush_r+0x18>
 8008a7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008a7e:	0032      	movs	r2, r6
 8008a80:	001f      	movs	r7, r3
 8008a82:	0028      	movs	r0, r5
 8008a84:	9b01      	ldr	r3, [sp, #4]
 8008a86:	6a21      	ldr	r1, [r4, #32]
 8008a88:	47b8      	blx	r7
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	dc06      	bgt.n	8008a9c <__sflush_r+0x104>
 8008a8e:	2340      	movs	r3, #64	; 0x40
 8008a90:	2001      	movs	r0, #1
 8008a92:	89a2      	ldrh	r2, [r4, #12]
 8008a94:	4240      	negs	r0, r0
 8008a96:	4313      	orrs	r3, r2
 8008a98:	81a3      	strh	r3, [r4, #12]
 8008a9a:	e78a      	b.n	80089b2 <__sflush_r+0x1a>
 8008a9c:	9b01      	ldr	r3, [sp, #4]
 8008a9e:	1836      	adds	r6, r6, r0
 8008aa0:	1a1b      	subs	r3, r3, r0
 8008aa2:	9301      	str	r3, [sp, #4]
 8008aa4:	e7e7      	b.n	8008a76 <__sflush_r+0xde>
 8008aa6:	46c0      	nop			; (mov r8, r8)
 8008aa8:	dfbffffe 	.word	0xdfbffffe

08008aac <_fflush_r>:
 8008aac:	690b      	ldr	r3, [r1, #16]
 8008aae:	b570      	push	{r4, r5, r6, lr}
 8008ab0:	0005      	movs	r5, r0
 8008ab2:	000c      	movs	r4, r1
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d102      	bne.n	8008abe <_fflush_r+0x12>
 8008ab8:	2500      	movs	r5, #0
 8008aba:	0028      	movs	r0, r5
 8008abc:	bd70      	pop	{r4, r5, r6, pc}
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	d004      	beq.n	8008acc <_fflush_r+0x20>
 8008ac2:	6a03      	ldr	r3, [r0, #32]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d101      	bne.n	8008acc <_fflush_r+0x20>
 8008ac8:	f7fe fb16 	bl	80070f8 <__sinit>
 8008acc:	220c      	movs	r2, #12
 8008ace:	5ea3      	ldrsh	r3, [r4, r2]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d0f1      	beq.n	8008ab8 <_fflush_r+0xc>
 8008ad4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ad6:	07d2      	lsls	r2, r2, #31
 8008ad8:	d404      	bmi.n	8008ae4 <_fflush_r+0x38>
 8008ada:	059b      	lsls	r3, r3, #22
 8008adc:	d402      	bmi.n	8008ae4 <_fflush_r+0x38>
 8008ade:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ae0:	f7fe fc0e 	bl	8007300 <__retarget_lock_acquire_recursive>
 8008ae4:	0028      	movs	r0, r5
 8008ae6:	0021      	movs	r1, r4
 8008ae8:	f7ff ff56 	bl	8008998 <__sflush_r>
 8008aec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008aee:	0005      	movs	r5, r0
 8008af0:	07db      	lsls	r3, r3, #31
 8008af2:	d4e2      	bmi.n	8008aba <_fflush_r+0xe>
 8008af4:	89a3      	ldrh	r3, [r4, #12]
 8008af6:	059b      	lsls	r3, r3, #22
 8008af8:	d4df      	bmi.n	8008aba <_fflush_r+0xe>
 8008afa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008afc:	f7fe fc01 	bl	8007302 <__retarget_lock_release_recursive>
 8008b00:	e7db      	b.n	8008aba <_fflush_r+0xe>
	...

08008b04 <_sbrk_r>:
 8008b04:	2300      	movs	r3, #0
 8008b06:	b570      	push	{r4, r5, r6, lr}
 8008b08:	4d06      	ldr	r5, [pc, #24]	; (8008b24 <_sbrk_r+0x20>)
 8008b0a:	0004      	movs	r4, r0
 8008b0c:	0008      	movs	r0, r1
 8008b0e:	602b      	str	r3, [r5, #0]
 8008b10:	f7fa fa42 	bl	8002f98 <_sbrk>
 8008b14:	1c43      	adds	r3, r0, #1
 8008b16:	d103      	bne.n	8008b20 <_sbrk_r+0x1c>
 8008b18:	682b      	ldr	r3, [r5, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d000      	beq.n	8008b20 <_sbrk_r+0x1c>
 8008b1e:	6023      	str	r3, [r4, #0]
 8008b20:	bd70      	pop	{r4, r5, r6, pc}
 8008b22:	46c0      	nop			; (mov r8, r8)
 8008b24:	20000718 	.word	0x20000718

08008b28 <memcpy>:
 8008b28:	2300      	movs	r3, #0
 8008b2a:	b510      	push	{r4, lr}
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d100      	bne.n	8008b32 <memcpy+0xa>
 8008b30:	bd10      	pop	{r4, pc}
 8008b32:	5ccc      	ldrb	r4, [r1, r3]
 8008b34:	54c4      	strb	r4, [r0, r3]
 8008b36:	3301      	adds	r3, #1
 8008b38:	e7f8      	b.n	8008b2c <memcpy+0x4>
	...

08008b3c <__assert_func>:
 8008b3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008b3e:	0014      	movs	r4, r2
 8008b40:	001a      	movs	r2, r3
 8008b42:	4b09      	ldr	r3, [pc, #36]	; (8008b68 <__assert_func+0x2c>)
 8008b44:	0005      	movs	r5, r0
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	000e      	movs	r6, r1
 8008b4a:	68d8      	ldr	r0, [r3, #12]
 8008b4c:	4b07      	ldr	r3, [pc, #28]	; (8008b6c <__assert_func+0x30>)
 8008b4e:	2c00      	cmp	r4, #0
 8008b50:	d101      	bne.n	8008b56 <__assert_func+0x1a>
 8008b52:	4b07      	ldr	r3, [pc, #28]	; (8008b70 <__assert_func+0x34>)
 8008b54:	001c      	movs	r4, r3
 8008b56:	4907      	ldr	r1, [pc, #28]	; (8008b74 <__assert_func+0x38>)
 8008b58:	9301      	str	r3, [sp, #4]
 8008b5a:	9402      	str	r4, [sp, #8]
 8008b5c:	002b      	movs	r3, r5
 8008b5e:	9600      	str	r6, [sp, #0]
 8008b60:	f000 f856 	bl	8008c10 <fiprintf>
 8008b64:	f000 f864 	bl	8008c30 <abort>
 8008b68:	20000064 	.word	0x20000064
 8008b6c:	080094c6 	.word	0x080094c6
 8008b70:	08009501 	.word	0x08009501
 8008b74:	080094d3 	.word	0x080094d3

08008b78 <_calloc_r>:
 8008b78:	b570      	push	{r4, r5, r6, lr}
 8008b7a:	0c0b      	lsrs	r3, r1, #16
 8008b7c:	0c15      	lsrs	r5, r2, #16
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d11e      	bne.n	8008bc0 <_calloc_r+0x48>
 8008b82:	2d00      	cmp	r5, #0
 8008b84:	d10c      	bne.n	8008ba0 <_calloc_r+0x28>
 8008b86:	b289      	uxth	r1, r1
 8008b88:	b294      	uxth	r4, r2
 8008b8a:	434c      	muls	r4, r1
 8008b8c:	0021      	movs	r1, r4
 8008b8e:	f7ff fad7 	bl	8008140 <_malloc_r>
 8008b92:	1e05      	subs	r5, r0, #0
 8008b94:	d01b      	beq.n	8008bce <_calloc_r+0x56>
 8008b96:	0022      	movs	r2, r4
 8008b98:	2100      	movs	r1, #0
 8008b9a:	f7fe fb2d 	bl	80071f8 <memset>
 8008b9e:	e016      	b.n	8008bce <_calloc_r+0x56>
 8008ba0:	1c2b      	adds	r3, r5, #0
 8008ba2:	1c0c      	adds	r4, r1, #0
 8008ba4:	b289      	uxth	r1, r1
 8008ba6:	b292      	uxth	r2, r2
 8008ba8:	434a      	muls	r2, r1
 8008baa:	b2a1      	uxth	r1, r4
 8008bac:	b29c      	uxth	r4, r3
 8008bae:	434c      	muls	r4, r1
 8008bb0:	0c13      	lsrs	r3, r2, #16
 8008bb2:	18e4      	adds	r4, r4, r3
 8008bb4:	0c23      	lsrs	r3, r4, #16
 8008bb6:	d107      	bne.n	8008bc8 <_calloc_r+0x50>
 8008bb8:	0424      	lsls	r4, r4, #16
 8008bba:	b292      	uxth	r2, r2
 8008bbc:	4314      	orrs	r4, r2
 8008bbe:	e7e5      	b.n	8008b8c <_calloc_r+0x14>
 8008bc0:	2d00      	cmp	r5, #0
 8008bc2:	d101      	bne.n	8008bc8 <_calloc_r+0x50>
 8008bc4:	1c14      	adds	r4, r2, #0
 8008bc6:	e7ed      	b.n	8008ba4 <_calloc_r+0x2c>
 8008bc8:	230c      	movs	r3, #12
 8008bca:	2500      	movs	r5, #0
 8008bcc:	6003      	str	r3, [r0, #0]
 8008bce:	0028      	movs	r0, r5
 8008bd0:	bd70      	pop	{r4, r5, r6, pc}

08008bd2 <__ascii_mbtowc>:
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	2900      	cmp	r1, #0
 8008bd6:	d100      	bne.n	8008bda <__ascii_mbtowc+0x8>
 8008bd8:	a901      	add	r1, sp, #4
 8008bda:	1e10      	subs	r0, r2, #0
 8008bdc:	d006      	beq.n	8008bec <__ascii_mbtowc+0x1a>
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d006      	beq.n	8008bf0 <__ascii_mbtowc+0x1e>
 8008be2:	7813      	ldrb	r3, [r2, #0]
 8008be4:	600b      	str	r3, [r1, #0]
 8008be6:	7810      	ldrb	r0, [r2, #0]
 8008be8:	1e43      	subs	r3, r0, #1
 8008bea:	4198      	sbcs	r0, r3
 8008bec:	b002      	add	sp, #8
 8008bee:	4770      	bx	lr
 8008bf0:	2002      	movs	r0, #2
 8008bf2:	4240      	negs	r0, r0
 8008bf4:	e7fa      	b.n	8008bec <__ascii_mbtowc+0x1a>

08008bf6 <__ascii_wctomb>:
 8008bf6:	0003      	movs	r3, r0
 8008bf8:	1e08      	subs	r0, r1, #0
 8008bfa:	d005      	beq.n	8008c08 <__ascii_wctomb+0x12>
 8008bfc:	2aff      	cmp	r2, #255	; 0xff
 8008bfe:	d904      	bls.n	8008c0a <__ascii_wctomb+0x14>
 8008c00:	228a      	movs	r2, #138	; 0x8a
 8008c02:	2001      	movs	r0, #1
 8008c04:	601a      	str	r2, [r3, #0]
 8008c06:	4240      	negs	r0, r0
 8008c08:	4770      	bx	lr
 8008c0a:	2001      	movs	r0, #1
 8008c0c:	700a      	strb	r2, [r1, #0]
 8008c0e:	e7fb      	b.n	8008c08 <__ascii_wctomb+0x12>

08008c10 <fiprintf>:
 8008c10:	b40e      	push	{r1, r2, r3}
 8008c12:	b517      	push	{r0, r1, r2, r4, lr}
 8008c14:	4c05      	ldr	r4, [pc, #20]	; (8008c2c <fiprintf+0x1c>)
 8008c16:	ab05      	add	r3, sp, #20
 8008c18:	cb04      	ldmia	r3!, {r2}
 8008c1a:	0001      	movs	r1, r0
 8008c1c:	6820      	ldr	r0, [r4, #0]
 8008c1e:	9301      	str	r3, [sp, #4]
 8008c20:	f000 f834 	bl	8008c8c <_vfiprintf_r>
 8008c24:	bc1e      	pop	{r1, r2, r3, r4}
 8008c26:	bc08      	pop	{r3}
 8008c28:	b003      	add	sp, #12
 8008c2a:	4718      	bx	r3
 8008c2c:	20000064 	.word	0x20000064

08008c30 <abort>:
 8008c30:	2006      	movs	r0, #6
 8008c32:	b510      	push	{r4, lr}
 8008c34:	f000 fa16 	bl	8009064 <raise>
 8008c38:	2001      	movs	r0, #1
 8008c3a:	f7fa f93b 	bl	8002eb4 <_exit>

08008c3e <__sfputc_r>:
 8008c3e:	6893      	ldr	r3, [r2, #8]
 8008c40:	b510      	push	{r4, lr}
 8008c42:	3b01      	subs	r3, #1
 8008c44:	6093      	str	r3, [r2, #8]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	da04      	bge.n	8008c54 <__sfputc_r+0x16>
 8008c4a:	6994      	ldr	r4, [r2, #24]
 8008c4c:	42a3      	cmp	r3, r4
 8008c4e:	db07      	blt.n	8008c60 <__sfputc_r+0x22>
 8008c50:	290a      	cmp	r1, #10
 8008c52:	d005      	beq.n	8008c60 <__sfputc_r+0x22>
 8008c54:	6813      	ldr	r3, [r2, #0]
 8008c56:	1c58      	adds	r0, r3, #1
 8008c58:	6010      	str	r0, [r2, #0]
 8008c5a:	7019      	strb	r1, [r3, #0]
 8008c5c:	0008      	movs	r0, r1
 8008c5e:	bd10      	pop	{r4, pc}
 8008c60:	f000 f930 	bl	8008ec4 <__swbuf_r>
 8008c64:	0001      	movs	r1, r0
 8008c66:	e7f9      	b.n	8008c5c <__sfputc_r+0x1e>

08008c68 <__sfputs_r>:
 8008c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c6a:	0006      	movs	r6, r0
 8008c6c:	000f      	movs	r7, r1
 8008c6e:	0014      	movs	r4, r2
 8008c70:	18d5      	adds	r5, r2, r3
 8008c72:	42ac      	cmp	r4, r5
 8008c74:	d101      	bne.n	8008c7a <__sfputs_r+0x12>
 8008c76:	2000      	movs	r0, #0
 8008c78:	e007      	b.n	8008c8a <__sfputs_r+0x22>
 8008c7a:	7821      	ldrb	r1, [r4, #0]
 8008c7c:	003a      	movs	r2, r7
 8008c7e:	0030      	movs	r0, r6
 8008c80:	f7ff ffdd 	bl	8008c3e <__sfputc_r>
 8008c84:	3401      	adds	r4, #1
 8008c86:	1c43      	adds	r3, r0, #1
 8008c88:	d1f3      	bne.n	8008c72 <__sfputs_r+0xa>
 8008c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c8c <_vfiprintf_r>:
 8008c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c8e:	b0a1      	sub	sp, #132	; 0x84
 8008c90:	000f      	movs	r7, r1
 8008c92:	0015      	movs	r5, r2
 8008c94:	001e      	movs	r6, r3
 8008c96:	9003      	str	r0, [sp, #12]
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	d004      	beq.n	8008ca6 <_vfiprintf_r+0x1a>
 8008c9c:	6a03      	ldr	r3, [r0, #32]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d101      	bne.n	8008ca6 <_vfiprintf_r+0x1a>
 8008ca2:	f7fe fa29 	bl	80070f8 <__sinit>
 8008ca6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ca8:	07db      	lsls	r3, r3, #31
 8008caa:	d405      	bmi.n	8008cb8 <_vfiprintf_r+0x2c>
 8008cac:	89bb      	ldrh	r3, [r7, #12]
 8008cae:	059b      	lsls	r3, r3, #22
 8008cb0:	d402      	bmi.n	8008cb8 <_vfiprintf_r+0x2c>
 8008cb2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008cb4:	f7fe fb24 	bl	8007300 <__retarget_lock_acquire_recursive>
 8008cb8:	89bb      	ldrh	r3, [r7, #12]
 8008cba:	071b      	lsls	r3, r3, #28
 8008cbc:	d502      	bpl.n	8008cc4 <_vfiprintf_r+0x38>
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d113      	bne.n	8008cec <_vfiprintf_r+0x60>
 8008cc4:	0039      	movs	r1, r7
 8008cc6:	9803      	ldr	r0, [sp, #12]
 8008cc8:	f000 f93e 	bl	8008f48 <__swsetup_r>
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	d00d      	beq.n	8008cec <_vfiprintf_r+0x60>
 8008cd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cd2:	07db      	lsls	r3, r3, #31
 8008cd4:	d503      	bpl.n	8008cde <_vfiprintf_r+0x52>
 8008cd6:	2001      	movs	r0, #1
 8008cd8:	4240      	negs	r0, r0
 8008cda:	b021      	add	sp, #132	; 0x84
 8008cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cde:	89bb      	ldrh	r3, [r7, #12]
 8008ce0:	059b      	lsls	r3, r3, #22
 8008ce2:	d4f8      	bmi.n	8008cd6 <_vfiprintf_r+0x4a>
 8008ce4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008ce6:	f7fe fb0c 	bl	8007302 <__retarget_lock_release_recursive>
 8008cea:	e7f4      	b.n	8008cd6 <_vfiprintf_r+0x4a>
 8008cec:	2300      	movs	r3, #0
 8008cee:	ac08      	add	r4, sp, #32
 8008cf0:	6163      	str	r3, [r4, #20]
 8008cf2:	3320      	adds	r3, #32
 8008cf4:	7663      	strb	r3, [r4, #25]
 8008cf6:	3310      	adds	r3, #16
 8008cf8:	76a3      	strb	r3, [r4, #26]
 8008cfa:	9607      	str	r6, [sp, #28]
 8008cfc:	002e      	movs	r6, r5
 8008cfe:	7833      	ldrb	r3, [r6, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d001      	beq.n	8008d08 <_vfiprintf_r+0x7c>
 8008d04:	2b25      	cmp	r3, #37	; 0x25
 8008d06:	d148      	bne.n	8008d9a <_vfiprintf_r+0x10e>
 8008d08:	1b73      	subs	r3, r6, r5
 8008d0a:	9305      	str	r3, [sp, #20]
 8008d0c:	42ae      	cmp	r6, r5
 8008d0e:	d00b      	beq.n	8008d28 <_vfiprintf_r+0x9c>
 8008d10:	002a      	movs	r2, r5
 8008d12:	0039      	movs	r1, r7
 8008d14:	9803      	ldr	r0, [sp, #12]
 8008d16:	f7ff ffa7 	bl	8008c68 <__sfputs_r>
 8008d1a:	3001      	adds	r0, #1
 8008d1c:	d100      	bne.n	8008d20 <_vfiprintf_r+0x94>
 8008d1e:	e0af      	b.n	8008e80 <_vfiprintf_r+0x1f4>
 8008d20:	6963      	ldr	r3, [r4, #20]
 8008d22:	9a05      	ldr	r2, [sp, #20]
 8008d24:	189b      	adds	r3, r3, r2
 8008d26:	6163      	str	r3, [r4, #20]
 8008d28:	7833      	ldrb	r3, [r6, #0]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d100      	bne.n	8008d30 <_vfiprintf_r+0xa4>
 8008d2e:	e0a7      	b.n	8008e80 <_vfiprintf_r+0x1f4>
 8008d30:	2201      	movs	r2, #1
 8008d32:	2300      	movs	r3, #0
 8008d34:	4252      	negs	r2, r2
 8008d36:	6062      	str	r2, [r4, #4]
 8008d38:	a904      	add	r1, sp, #16
 8008d3a:	3254      	adds	r2, #84	; 0x54
 8008d3c:	1852      	adds	r2, r2, r1
 8008d3e:	1c75      	adds	r5, r6, #1
 8008d40:	6023      	str	r3, [r4, #0]
 8008d42:	60e3      	str	r3, [r4, #12]
 8008d44:	60a3      	str	r3, [r4, #8]
 8008d46:	7013      	strb	r3, [r2, #0]
 8008d48:	65a3      	str	r3, [r4, #88]	; 0x58
 8008d4a:	4b59      	ldr	r3, [pc, #356]	; (8008eb0 <_vfiprintf_r+0x224>)
 8008d4c:	2205      	movs	r2, #5
 8008d4e:	0018      	movs	r0, r3
 8008d50:	7829      	ldrb	r1, [r5, #0]
 8008d52:	9305      	str	r3, [sp, #20]
 8008d54:	f7fe fad6 	bl	8007304 <memchr>
 8008d58:	1c6e      	adds	r6, r5, #1
 8008d5a:	2800      	cmp	r0, #0
 8008d5c:	d11f      	bne.n	8008d9e <_vfiprintf_r+0x112>
 8008d5e:	6822      	ldr	r2, [r4, #0]
 8008d60:	06d3      	lsls	r3, r2, #27
 8008d62:	d504      	bpl.n	8008d6e <_vfiprintf_r+0xe2>
 8008d64:	2353      	movs	r3, #83	; 0x53
 8008d66:	a904      	add	r1, sp, #16
 8008d68:	185b      	adds	r3, r3, r1
 8008d6a:	2120      	movs	r1, #32
 8008d6c:	7019      	strb	r1, [r3, #0]
 8008d6e:	0713      	lsls	r3, r2, #28
 8008d70:	d504      	bpl.n	8008d7c <_vfiprintf_r+0xf0>
 8008d72:	2353      	movs	r3, #83	; 0x53
 8008d74:	a904      	add	r1, sp, #16
 8008d76:	185b      	adds	r3, r3, r1
 8008d78:	212b      	movs	r1, #43	; 0x2b
 8008d7a:	7019      	strb	r1, [r3, #0]
 8008d7c:	782b      	ldrb	r3, [r5, #0]
 8008d7e:	2b2a      	cmp	r3, #42	; 0x2a
 8008d80:	d016      	beq.n	8008db0 <_vfiprintf_r+0x124>
 8008d82:	002e      	movs	r6, r5
 8008d84:	2100      	movs	r1, #0
 8008d86:	200a      	movs	r0, #10
 8008d88:	68e3      	ldr	r3, [r4, #12]
 8008d8a:	7832      	ldrb	r2, [r6, #0]
 8008d8c:	1c75      	adds	r5, r6, #1
 8008d8e:	3a30      	subs	r2, #48	; 0x30
 8008d90:	2a09      	cmp	r2, #9
 8008d92:	d94e      	bls.n	8008e32 <_vfiprintf_r+0x1a6>
 8008d94:	2900      	cmp	r1, #0
 8008d96:	d111      	bne.n	8008dbc <_vfiprintf_r+0x130>
 8008d98:	e017      	b.n	8008dca <_vfiprintf_r+0x13e>
 8008d9a:	3601      	adds	r6, #1
 8008d9c:	e7af      	b.n	8008cfe <_vfiprintf_r+0x72>
 8008d9e:	9b05      	ldr	r3, [sp, #20]
 8008da0:	6822      	ldr	r2, [r4, #0]
 8008da2:	1ac0      	subs	r0, r0, r3
 8008da4:	2301      	movs	r3, #1
 8008da6:	4083      	lsls	r3, r0
 8008da8:	4313      	orrs	r3, r2
 8008daa:	0035      	movs	r5, r6
 8008dac:	6023      	str	r3, [r4, #0]
 8008dae:	e7cc      	b.n	8008d4a <_vfiprintf_r+0xbe>
 8008db0:	9b07      	ldr	r3, [sp, #28]
 8008db2:	1d19      	adds	r1, r3, #4
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	9107      	str	r1, [sp, #28]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	db01      	blt.n	8008dc0 <_vfiprintf_r+0x134>
 8008dbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dbe:	e004      	b.n	8008dca <_vfiprintf_r+0x13e>
 8008dc0:	425b      	negs	r3, r3
 8008dc2:	60e3      	str	r3, [r4, #12]
 8008dc4:	2302      	movs	r3, #2
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	6023      	str	r3, [r4, #0]
 8008dca:	7833      	ldrb	r3, [r6, #0]
 8008dcc:	2b2e      	cmp	r3, #46	; 0x2e
 8008dce:	d10a      	bne.n	8008de6 <_vfiprintf_r+0x15a>
 8008dd0:	7873      	ldrb	r3, [r6, #1]
 8008dd2:	2b2a      	cmp	r3, #42	; 0x2a
 8008dd4:	d135      	bne.n	8008e42 <_vfiprintf_r+0x1b6>
 8008dd6:	9b07      	ldr	r3, [sp, #28]
 8008dd8:	3602      	adds	r6, #2
 8008dda:	1d1a      	adds	r2, r3, #4
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	9207      	str	r2, [sp, #28]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	db2b      	blt.n	8008e3c <_vfiprintf_r+0x1b0>
 8008de4:	9309      	str	r3, [sp, #36]	; 0x24
 8008de6:	4d33      	ldr	r5, [pc, #204]	; (8008eb4 <_vfiprintf_r+0x228>)
 8008de8:	2203      	movs	r2, #3
 8008dea:	0028      	movs	r0, r5
 8008dec:	7831      	ldrb	r1, [r6, #0]
 8008dee:	f7fe fa89 	bl	8007304 <memchr>
 8008df2:	2800      	cmp	r0, #0
 8008df4:	d006      	beq.n	8008e04 <_vfiprintf_r+0x178>
 8008df6:	2340      	movs	r3, #64	; 0x40
 8008df8:	1b40      	subs	r0, r0, r5
 8008dfa:	4083      	lsls	r3, r0
 8008dfc:	6822      	ldr	r2, [r4, #0]
 8008dfe:	3601      	adds	r6, #1
 8008e00:	4313      	orrs	r3, r2
 8008e02:	6023      	str	r3, [r4, #0]
 8008e04:	7831      	ldrb	r1, [r6, #0]
 8008e06:	2206      	movs	r2, #6
 8008e08:	482b      	ldr	r0, [pc, #172]	; (8008eb8 <_vfiprintf_r+0x22c>)
 8008e0a:	1c75      	adds	r5, r6, #1
 8008e0c:	7621      	strb	r1, [r4, #24]
 8008e0e:	f7fe fa79 	bl	8007304 <memchr>
 8008e12:	2800      	cmp	r0, #0
 8008e14:	d043      	beq.n	8008e9e <_vfiprintf_r+0x212>
 8008e16:	4b29      	ldr	r3, [pc, #164]	; (8008ebc <_vfiprintf_r+0x230>)
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d125      	bne.n	8008e68 <_vfiprintf_r+0x1dc>
 8008e1c:	2207      	movs	r2, #7
 8008e1e:	9b07      	ldr	r3, [sp, #28]
 8008e20:	3307      	adds	r3, #7
 8008e22:	4393      	bics	r3, r2
 8008e24:	3308      	adds	r3, #8
 8008e26:	9307      	str	r3, [sp, #28]
 8008e28:	6963      	ldr	r3, [r4, #20]
 8008e2a:	9a04      	ldr	r2, [sp, #16]
 8008e2c:	189b      	adds	r3, r3, r2
 8008e2e:	6163      	str	r3, [r4, #20]
 8008e30:	e764      	b.n	8008cfc <_vfiprintf_r+0x70>
 8008e32:	4343      	muls	r3, r0
 8008e34:	002e      	movs	r6, r5
 8008e36:	2101      	movs	r1, #1
 8008e38:	189b      	adds	r3, r3, r2
 8008e3a:	e7a6      	b.n	8008d8a <_vfiprintf_r+0xfe>
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	425b      	negs	r3, r3
 8008e40:	e7d0      	b.n	8008de4 <_vfiprintf_r+0x158>
 8008e42:	2300      	movs	r3, #0
 8008e44:	200a      	movs	r0, #10
 8008e46:	001a      	movs	r2, r3
 8008e48:	3601      	adds	r6, #1
 8008e4a:	6063      	str	r3, [r4, #4]
 8008e4c:	7831      	ldrb	r1, [r6, #0]
 8008e4e:	1c75      	adds	r5, r6, #1
 8008e50:	3930      	subs	r1, #48	; 0x30
 8008e52:	2909      	cmp	r1, #9
 8008e54:	d903      	bls.n	8008e5e <_vfiprintf_r+0x1d2>
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d0c5      	beq.n	8008de6 <_vfiprintf_r+0x15a>
 8008e5a:	9209      	str	r2, [sp, #36]	; 0x24
 8008e5c:	e7c3      	b.n	8008de6 <_vfiprintf_r+0x15a>
 8008e5e:	4342      	muls	r2, r0
 8008e60:	002e      	movs	r6, r5
 8008e62:	2301      	movs	r3, #1
 8008e64:	1852      	adds	r2, r2, r1
 8008e66:	e7f1      	b.n	8008e4c <_vfiprintf_r+0x1c0>
 8008e68:	aa07      	add	r2, sp, #28
 8008e6a:	9200      	str	r2, [sp, #0]
 8008e6c:	0021      	movs	r1, r4
 8008e6e:	003a      	movs	r2, r7
 8008e70:	4b13      	ldr	r3, [pc, #76]	; (8008ec0 <_vfiprintf_r+0x234>)
 8008e72:	9803      	ldr	r0, [sp, #12]
 8008e74:	f7fd fcec 	bl	8006850 <_printf_float>
 8008e78:	9004      	str	r0, [sp, #16]
 8008e7a:	9b04      	ldr	r3, [sp, #16]
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	d1d3      	bne.n	8008e28 <_vfiprintf_r+0x19c>
 8008e80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e82:	07db      	lsls	r3, r3, #31
 8008e84:	d405      	bmi.n	8008e92 <_vfiprintf_r+0x206>
 8008e86:	89bb      	ldrh	r3, [r7, #12]
 8008e88:	059b      	lsls	r3, r3, #22
 8008e8a:	d402      	bmi.n	8008e92 <_vfiprintf_r+0x206>
 8008e8c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008e8e:	f7fe fa38 	bl	8007302 <__retarget_lock_release_recursive>
 8008e92:	89bb      	ldrh	r3, [r7, #12]
 8008e94:	065b      	lsls	r3, r3, #25
 8008e96:	d500      	bpl.n	8008e9a <_vfiprintf_r+0x20e>
 8008e98:	e71d      	b.n	8008cd6 <_vfiprintf_r+0x4a>
 8008e9a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008e9c:	e71d      	b.n	8008cda <_vfiprintf_r+0x4e>
 8008e9e:	aa07      	add	r2, sp, #28
 8008ea0:	9200      	str	r2, [sp, #0]
 8008ea2:	0021      	movs	r1, r4
 8008ea4:	003a      	movs	r2, r7
 8008ea6:	4b06      	ldr	r3, [pc, #24]	; (8008ec0 <_vfiprintf_r+0x234>)
 8008ea8:	9803      	ldr	r0, [sp, #12]
 8008eaa:	f7fd ff97 	bl	8006ddc <_printf_i>
 8008eae:	e7e3      	b.n	8008e78 <_vfiprintf_r+0x1ec>
 8008eb0:	08009603 	.word	0x08009603
 8008eb4:	08009609 	.word	0x08009609
 8008eb8:	0800960d 	.word	0x0800960d
 8008ebc:	08006851 	.word	0x08006851
 8008ec0:	08008c69 	.word	0x08008c69

08008ec4 <__swbuf_r>:
 8008ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ec6:	0006      	movs	r6, r0
 8008ec8:	000d      	movs	r5, r1
 8008eca:	0014      	movs	r4, r2
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	d004      	beq.n	8008eda <__swbuf_r+0x16>
 8008ed0:	6a03      	ldr	r3, [r0, #32]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d101      	bne.n	8008eda <__swbuf_r+0x16>
 8008ed6:	f7fe f90f 	bl	80070f8 <__sinit>
 8008eda:	69a3      	ldr	r3, [r4, #24]
 8008edc:	60a3      	str	r3, [r4, #8]
 8008ede:	89a3      	ldrh	r3, [r4, #12]
 8008ee0:	071b      	lsls	r3, r3, #28
 8008ee2:	d528      	bpl.n	8008f36 <__swbuf_r+0x72>
 8008ee4:	6923      	ldr	r3, [r4, #16]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d025      	beq.n	8008f36 <__swbuf_r+0x72>
 8008eea:	6923      	ldr	r3, [r4, #16]
 8008eec:	6820      	ldr	r0, [r4, #0]
 8008eee:	b2ef      	uxtb	r7, r5
 8008ef0:	1ac0      	subs	r0, r0, r3
 8008ef2:	6963      	ldr	r3, [r4, #20]
 8008ef4:	b2ed      	uxtb	r5, r5
 8008ef6:	4283      	cmp	r3, r0
 8008ef8:	dc05      	bgt.n	8008f06 <__swbuf_r+0x42>
 8008efa:	0021      	movs	r1, r4
 8008efc:	0030      	movs	r0, r6
 8008efe:	f7ff fdd5 	bl	8008aac <_fflush_r>
 8008f02:	2800      	cmp	r0, #0
 8008f04:	d11d      	bne.n	8008f42 <__swbuf_r+0x7e>
 8008f06:	68a3      	ldr	r3, [r4, #8]
 8008f08:	3001      	adds	r0, #1
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	60a3      	str	r3, [r4, #8]
 8008f0e:	6823      	ldr	r3, [r4, #0]
 8008f10:	1c5a      	adds	r2, r3, #1
 8008f12:	6022      	str	r2, [r4, #0]
 8008f14:	701f      	strb	r7, [r3, #0]
 8008f16:	6963      	ldr	r3, [r4, #20]
 8008f18:	4283      	cmp	r3, r0
 8008f1a:	d004      	beq.n	8008f26 <__swbuf_r+0x62>
 8008f1c:	89a3      	ldrh	r3, [r4, #12]
 8008f1e:	07db      	lsls	r3, r3, #31
 8008f20:	d507      	bpl.n	8008f32 <__swbuf_r+0x6e>
 8008f22:	2d0a      	cmp	r5, #10
 8008f24:	d105      	bne.n	8008f32 <__swbuf_r+0x6e>
 8008f26:	0021      	movs	r1, r4
 8008f28:	0030      	movs	r0, r6
 8008f2a:	f7ff fdbf 	bl	8008aac <_fflush_r>
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	d107      	bne.n	8008f42 <__swbuf_r+0x7e>
 8008f32:	0028      	movs	r0, r5
 8008f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f36:	0021      	movs	r1, r4
 8008f38:	0030      	movs	r0, r6
 8008f3a:	f000 f805 	bl	8008f48 <__swsetup_r>
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	d0d3      	beq.n	8008eea <__swbuf_r+0x26>
 8008f42:	2501      	movs	r5, #1
 8008f44:	426d      	negs	r5, r5
 8008f46:	e7f4      	b.n	8008f32 <__swbuf_r+0x6e>

08008f48 <__swsetup_r>:
 8008f48:	4b30      	ldr	r3, [pc, #192]	; (800900c <__swsetup_r+0xc4>)
 8008f4a:	b570      	push	{r4, r5, r6, lr}
 8008f4c:	0005      	movs	r5, r0
 8008f4e:	6818      	ldr	r0, [r3, #0]
 8008f50:	000c      	movs	r4, r1
 8008f52:	2800      	cmp	r0, #0
 8008f54:	d004      	beq.n	8008f60 <__swsetup_r+0x18>
 8008f56:	6a03      	ldr	r3, [r0, #32]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d101      	bne.n	8008f60 <__swsetup_r+0x18>
 8008f5c:	f7fe f8cc 	bl	80070f8 <__sinit>
 8008f60:	230c      	movs	r3, #12
 8008f62:	5ee2      	ldrsh	r2, [r4, r3]
 8008f64:	b293      	uxth	r3, r2
 8008f66:	0711      	lsls	r1, r2, #28
 8008f68:	d423      	bmi.n	8008fb2 <__swsetup_r+0x6a>
 8008f6a:	06d9      	lsls	r1, r3, #27
 8008f6c:	d407      	bmi.n	8008f7e <__swsetup_r+0x36>
 8008f6e:	2309      	movs	r3, #9
 8008f70:	2001      	movs	r0, #1
 8008f72:	602b      	str	r3, [r5, #0]
 8008f74:	3337      	adds	r3, #55	; 0x37
 8008f76:	4313      	orrs	r3, r2
 8008f78:	81a3      	strh	r3, [r4, #12]
 8008f7a:	4240      	negs	r0, r0
 8008f7c:	bd70      	pop	{r4, r5, r6, pc}
 8008f7e:	075b      	lsls	r3, r3, #29
 8008f80:	d513      	bpl.n	8008faa <__swsetup_r+0x62>
 8008f82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f84:	2900      	cmp	r1, #0
 8008f86:	d008      	beq.n	8008f9a <__swsetup_r+0x52>
 8008f88:	0023      	movs	r3, r4
 8008f8a:	3344      	adds	r3, #68	; 0x44
 8008f8c:	4299      	cmp	r1, r3
 8008f8e:	d002      	beq.n	8008f96 <__swsetup_r+0x4e>
 8008f90:	0028      	movs	r0, r5
 8008f92:	f7ff f85f 	bl	8008054 <_free_r>
 8008f96:	2300      	movs	r3, #0
 8008f98:	6363      	str	r3, [r4, #52]	; 0x34
 8008f9a:	2224      	movs	r2, #36	; 0x24
 8008f9c:	89a3      	ldrh	r3, [r4, #12]
 8008f9e:	4393      	bics	r3, r2
 8008fa0:	81a3      	strh	r3, [r4, #12]
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	6063      	str	r3, [r4, #4]
 8008fa6:	6923      	ldr	r3, [r4, #16]
 8008fa8:	6023      	str	r3, [r4, #0]
 8008faa:	2308      	movs	r3, #8
 8008fac:	89a2      	ldrh	r2, [r4, #12]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	81a3      	strh	r3, [r4, #12]
 8008fb2:	6923      	ldr	r3, [r4, #16]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d10b      	bne.n	8008fd0 <__swsetup_r+0x88>
 8008fb8:	21a0      	movs	r1, #160	; 0xa0
 8008fba:	2280      	movs	r2, #128	; 0x80
 8008fbc:	89a3      	ldrh	r3, [r4, #12]
 8008fbe:	0089      	lsls	r1, r1, #2
 8008fc0:	0092      	lsls	r2, r2, #2
 8008fc2:	400b      	ands	r3, r1
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d003      	beq.n	8008fd0 <__swsetup_r+0x88>
 8008fc8:	0021      	movs	r1, r4
 8008fca:	0028      	movs	r0, r5
 8008fcc:	f000 f892 	bl	80090f4 <__smakebuf_r>
 8008fd0:	220c      	movs	r2, #12
 8008fd2:	5ea3      	ldrsh	r3, [r4, r2]
 8008fd4:	2001      	movs	r0, #1
 8008fd6:	001a      	movs	r2, r3
 8008fd8:	b299      	uxth	r1, r3
 8008fda:	4002      	ands	r2, r0
 8008fdc:	4203      	tst	r3, r0
 8008fde:	d00f      	beq.n	8009000 <__swsetup_r+0xb8>
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	60a2      	str	r2, [r4, #8]
 8008fe4:	6962      	ldr	r2, [r4, #20]
 8008fe6:	4252      	negs	r2, r2
 8008fe8:	61a2      	str	r2, [r4, #24]
 8008fea:	2000      	movs	r0, #0
 8008fec:	6922      	ldr	r2, [r4, #16]
 8008fee:	4282      	cmp	r2, r0
 8008ff0:	d1c4      	bne.n	8008f7c <__swsetup_r+0x34>
 8008ff2:	0609      	lsls	r1, r1, #24
 8008ff4:	d5c2      	bpl.n	8008f7c <__swsetup_r+0x34>
 8008ff6:	2240      	movs	r2, #64	; 0x40
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	81a3      	strh	r3, [r4, #12]
 8008ffc:	3801      	subs	r0, #1
 8008ffe:	e7bd      	b.n	8008f7c <__swsetup_r+0x34>
 8009000:	0788      	lsls	r0, r1, #30
 8009002:	d400      	bmi.n	8009006 <__swsetup_r+0xbe>
 8009004:	6962      	ldr	r2, [r4, #20]
 8009006:	60a2      	str	r2, [r4, #8]
 8009008:	e7ef      	b.n	8008fea <__swsetup_r+0xa2>
 800900a:	46c0      	nop			; (mov r8, r8)
 800900c:	20000064 	.word	0x20000064

08009010 <_raise_r>:
 8009010:	b570      	push	{r4, r5, r6, lr}
 8009012:	0004      	movs	r4, r0
 8009014:	000d      	movs	r5, r1
 8009016:	291f      	cmp	r1, #31
 8009018:	d904      	bls.n	8009024 <_raise_r+0x14>
 800901a:	2316      	movs	r3, #22
 800901c:	6003      	str	r3, [r0, #0]
 800901e:	2001      	movs	r0, #1
 8009020:	4240      	negs	r0, r0
 8009022:	bd70      	pop	{r4, r5, r6, pc}
 8009024:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8009026:	2b00      	cmp	r3, #0
 8009028:	d004      	beq.n	8009034 <_raise_r+0x24>
 800902a:	008a      	lsls	r2, r1, #2
 800902c:	189b      	adds	r3, r3, r2
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	2a00      	cmp	r2, #0
 8009032:	d108      	bne.n	8009046 <_raise_r+0x36>
 8009034:	0020      	movs	r0, r4
 8009036:	f000 f831 	bl	800909c <_getpid_r>
 800903a:	002a      	movs	r2, r5
 800903c:	0001      	movs	r1, r0
 800903e:	0020      	movs	r0, r4
 8009040:	f000 f81a 	bl	8009078 <_kill_r>
 8009044:	e7ed      	b.n	8009022 <_raise_r+0x12>
 8009046:	2000      	movs	r0, #0
 8009048:	2a01      	cmp	r2, #1
 800904a:	d0ea      	beq.n	8009022 <_raise_r+0x12>
 800904c:	1c51      	adds	r1, r2, #1
 800904e:	d103      	bne.n	8009058 <_raise_r+0x48>
 8009050:	2316      	movs	r3, #22
 8009052:	3001      	adds	r0, #1
 8009054:	6023      	str	r3, [r4, #0]
 8009056:	e7e4      	b.n	8009022 <_raise_r+0x12>
 8009058:	2400      	movs	r4, #0
 800905a:	0028      	movs	r0, r5
 800905c:	601c      	str	r4, [r3, #0]
 800905e:	4790      	blx	r2
 8009060:	0020      	movs	r0, r4
 8009062:	e7de      	b.n	8009022 <_raise_r+0x12>

08009064 <raise>:
 8009064:	b510      	push	{r4, lr}
 8009066:	4b03      	ldr	r3, [pc, #12]	; (8009074 <raise+0x10>)
 8009068:	0001      	movs	r1, r0
 800906a:	6818      	ldr	r0, [r3, #0]
 800906c:	f7ff ffd0 	bl	8009010 <_raise_r>
 8009070:	bd10      	pop	{r4, pc}
 8009072:	46c0      	nop			; (mov r8, r8)
 8009074:	20000064 	.word	0x20000064

08009078 <_kill_r>:
 8009078:	2300      	movs	r3, #0
 800907a:	b570      	push	{r4, r5, r6, lr}
 800907c:	4d06      	ldr	r5, [pc, #24]	; (8009098 <_kill_r+0x20>)
 800907e:	0004      	movs	r4, r0
 8009080:	0008      	movs	r0, r1
 8009082:	0011      	movs	r1, r2
 8009084:	602b      	str	r3, [r5, #0]
 8009086:	f7f9 ff05 	bl	8002e94 <_kill>
 800908a:	1c43      	adds	r3, r0, #1
 800908c:	d103      	bne.n	8009096 <_kill_r+0x1e>
 800908e:	682b      	ldr	r3, [r5, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d000      	beq.n	8009096 <_kill_r+0x1e>
 8009094:	6023      	str	r3, [r4, #0]
 8009096:	bd70      	pop	{r4, r5, r6, pc}
 8009098:	20000718 	.word	0x20000718

0800909c <_getpid_r>:
 800909c:	b510      	push	{r4, lr}
 800909e:	f7f9 fef3 	bl	8002e88 <_getpid>
 80090a2:	bd10      	pop	{r4, pc}

080090a4 <__swhatbuf_r>:
 80090a4:	b570      	push	{r4, r5, r6, lr}
 80090a6:	000e      	movs	r6, r1
 80090a8:	001d      	movs	r5, r3
 80090aa:	230e      	movs	r3, #14
 80090ac:	5ec9      	ldrsh	r1, [r1, r3]
 80090ae:	0014      	movs	r4, r2
 80090b0:	b096      	sub	sp, #88	; 0x58
 80090b2:	2900      	cmp	r1, #0
 80090b4:	da0c      	bge.n	80090d0 <__swhatbuf_r+0x2c>
 80090b6:	89b2      	ldrh	r2, [r6, #12]
 80090b8:	2380      	movs	r3, #128	; 0x80
 80090ba:	0011      	movs	r1, r2
 80090bc:	4019      	ands	r1, r3
 80090be:	421a      	tst	r2, r3
 80090c0:	d013      	beq.n	80090ea <__swhatbuf_r+0x46>
 80090c2:	2100      	movs	r1, #0
 80090c4:	3b40      	subs	r3, #64	; 0x40
 80090c6:	2000      	movs	r0, #0
 80090c8:	6029      	str	r1, [r5, #0]
 80090ca:	6023      	str	r3, [r4, #0]
 80090cc:	b016      	add	sp, #88	; 0x58
 80090ce:	bd70      	pop	{r4, r5, r6, pc}
 80090d0:	466a      	mov	r2, sp
 80090d2:	f000 f84d 	bl	8009170 <_fstat_r>
 80090d6:	2800      	cmp	r0, #0
 80090d8:	dbed      	blt.n	80090b6 <__swhatbuf_r+0x12>
 80090da:	23f0      	movs	r3, #240	; 0xf0
 80090dc:	9901      	ldr	r1, [sp, #4]
 80090de:	021b      	lsls	r3, r3, #8
 80090e0:	4019      	ands	r1, r3
 80090e2:	4b03      	ldr	r3, [pc, #12]	; (80090f0 <__swhatbuf_r+0x4c>)
 80090e4:	18c9      	adds	r1, r1, r3
 80090e6:	424b      	negs	r3, r1
 80090e8:	4159      	adcs	r1, r3
 80090ea:	2380      	movs	r3, #128	; 0x80
 80090ec:	00db      	lsls	r3, r3, #3
 80090ee:	e7ea      	b.n	80090c6 <__swhatbuf_r+0x22>
 80090f0:	ffffe000 	.word	0xffffe000

080090f4 <__smakebuf_r>:
 80090f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090f6:	2602      	movs	r6, #2
 80090f8:	898b      	ldrh	r3, [r1, #12]
 80090fa:	0005      	movs	r5, r0
 80090fc:	000c      	movs	r4, r1
 80090fe:	4233      	tst	r3, r6
 8009100:	d006      	beq.n	8009110 <__smakebuf_r+0x1c>
 8009102:	0023      	movs	r3, r4
 8009104:	3347      	adds	r3, #71	; 0x47
 8009106:	6023      	str	r3, [r4, #0]
 8009108:	6123      	str	r3, [r4, #16]
 800910a:	2301      	movs	r3, #1
 800910c:	6163      	str	r3, [r4, #20]
 800910e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009110:	466a      	mov	r2, sp
 8009112:	ab01      	add	r3, sp, #4
 8009114:	f7ff ffc6 	bl	80090a4 <__swhatbuf_r>
 8009118:	9900      	ldr	r1, [sp, #0]
 800911a:	0007      	movs	r7, r0
 800911c:	0028      	movs	r0, r5
 800911e:	f7ff f80f 	bl	8008140 <_malloc_r>
 8009122:	2800      	cmp	r0, #0
 8009124:	d108      	bne.n	8009138 <__smakebuf_r+0x44>
 8009126:	220c      	movs	r2, #12
 8009128:	5ea3      	ldrsh	r3, [r4, r2]
 800912a:	059a      	lsls	r2, r3, #22
 800912c:	d4ef      	bmi.n	800910e <__smakebuf_r+0x1a>
 800912e:	2203      	movs	r2, #3
 8009130:	4393      	bics	r3, r2
 8009132:	431e      	orrs	r6, r3
 8009134:	81a6      	strh	r6, [r4, #12]
 8009136:	e7e4      	b.n	8009102 <__smakebuf_r+0xe>
 8009138:	2380      	movs	r3, #128	; 0x80
 800913a:	89a2      	ldrh	r2, [r4, #12]
 800913c:	6020      	str	r0, [r4, #0]
 800913e:	4313      	orrs	r3, r2
 8009140:	81a3      	strh	r3, [r4, #12]
 8009142:	9b00      	ldr	r3, [sp, #0]
 8009144:	6120      	str	r0, [r4, #16]
 8009146:	6163      	str	r3, [r4, #20]
 8009148:	9b01      	ldr	r3, [sp, #4]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d00c      	beq.n	8009168 <__smakebuf_r+0x74>
 800914e:	0028      	movs	r0, r5
 8009150:	230e      	movs	r3, #14
 8009152:	5ee1      	ldrsh	r1, [r4, r3]
 8009154:	f000 f81e 	bl	8009194 <_isatty_r>
 8009158:	2800      	cmp	r0, #0
 800915a:	d005      	beq.n	8009168 <__smakebuf_r+0x74>
 800915c:	2303      	movs	r3, #3
 800915e:	89a2      	ldrh	r2, [r4, #12]
 8009160:	439a      	bics	r2, r3
 8009162:	3b02      	subs	r3, #2
 8009164:	4313      	orrs	r3, r2
 8009166:	81a3      	strh	r3, [r4, #12]
 8009168:	89a3      	ldrh	r3, [r4, #12]
 800916a:	433b      	orrs	r3, r7
 800916c:	81a3      	strh	r3, [r4, #12]
 800916e:	e7ce      	b.n	800910e <__smakebuf_r+0x1a>

08009170 <_fstat_r>:
 8009170:	2300      	movs	r3, #0
 8009172:	b570      	push	{r4, r5, r6, lr}
 8009174:	4d06      	ldr	r5, [pc, #24]	; (8009190 <_fstat_r+0x20>)
 8009176:	0004      	movs	r4, r0
 8009178:	0008      	movs	r0, r1
 800917a:	0011      	movs	r1, r2
 800917c:	602b      	str	r3, [r5, #0]
 800917e:	f7f9 fee8 	bl	8002f52 <_fstat>
 8009182:	1c43      	adds	r3, r0, #1
 8009184:	d103      	bne.n	800918e <_fstat_r+0x1e>
 8009186:	682b      	ldr	r3, [r5, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d000      	beq.n	800918e <_fstat_r+0x1e>
 800918c:	6023      	str	r3, [r4, #0]
 800918e:	bd70      	pop	{r4, r5, r6, pc}
 8009190:	20000718 	.word	0x20000718

08009194 <_isatty_r>:
 8009194:	2300      	movs	r3, #0
 8009196:	b570      	push	{r4, r5, r6, lr}
 8009198:	4d06      	ldr	r5, [pc, #24]	; (80091b4 <_isatty_r+0x20>)
 800919a:	0004      	movs	r4, r0
 800919c:	0008      	movs	r0, r1
 800919e:	602b      	str	r3, [r5, #0]
 80091a0:	f7f9 fee5 	bl	8002f6e <_isatty>
 80091a4:	1c43      	adds	r3, r0, #1
 80091a6:	d103      	bne.n	80091b0 <_isatty_r+0x1c>
 80091a8:	682b      	ldr	r3, [r5, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d000      	beq.n	80091b0 <_isatty_r+0x1c>
 80091ae:	6023      	str	r3, [r4, #0]
 80091b0:	bd70      	pop	{r4, r5, r6, pc}
 80091b2:	46c0      	nop			; (mov r8, r8)
 80091b4:	20000718 	.word	0x20000718

080091b8 <_init>:
 80091b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ba:	46c0      	nop			; (mov r8, r8)
 80091bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091be:	bc08      	pop	{r3}
 80091c0:	469e      	mov	lr, r3
 80091c2:	4770      	bx	lr

080091c4 <_fini>:
 80091c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c6:	46c0      	nop			; (mov r8, r8)
 80091c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ca:	bc08      	pop	{r3}
 80091cc:	469e      	mov	lr, r3
 80091ce:	4770      	bx	lr
